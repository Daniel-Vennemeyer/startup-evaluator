Opt-In Prize,Project Title,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Built With,Notes,Team Colleges/Universities,Additional Team Member Count,Room Number,"What School Do You Attend? If You Are No Longer In School, What University Did You Attend Most Recently?",Tell Us About Your Technology Experience This Weekend.,"Did You Register A .Tech Domain Name This Weekend? If So, What Domain Did You Register?"
Best Social Impact Hack,TransitU,https://revolutionuc2024.devpost.com/submissions/484343-transitu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:16:04,"Inspiration

We understood the unappreciated value of the on-campus bus systems and understood the lack of basic functionality of routing Point A to B for students through this system. We wanted to make a web app that could provide this functionality to allow students to better coordinate how to ride the buses.

What it does

Allows the commuting student to enter their class schedule, and finds the optimal time to leave using live, webscraped bus data with the Live Shuttle Tracker (https://uc.transloc.com/).

How we built it

We used Typescript React in NextJS for the front-end, and a MySQL server with Auth0 for authentication in the back-end. The webscraping relied on JavaScript fetch calls to the same backend API as the Live Shuttle Tracker. It runs this data through the Google Maps API as well to give a final minute count of your estimated time it takes to get on, ride, get off, and walk to your final destination to give you the most accurate arrival time to your scheduled classes.

Challenges we ran into

Originally we were going to have the bus route display on the map page, but ran into issues with the Google Maps API that we couldn't resolve in time. Having the ability to visually display the route the bus is taking the student and the walking path they must take when the bus arrives at the bus stop wouldn't been incredible.

Accomplishments that we're proud of

We were able to successfully collaborate using many, many frameworks that we had little to no experience beforehand to make a working application.

What we learned

Using multiple Google APIs is much harder to work with in a React environment and requires more time and prior knowledge than a Hackathon could allocate us with.

What's next for TransitU

Integrating Google Maps effectively to mark with visuals where the student needs to go. First from the origin point to the bus stop, marking the path of the first bus stop to the end, and the walk from exiting the bus to the building.
",https://github.com/collin-b1/rev-uc-2024,https://youtu.be/YUfuEC2qat4,"typescript, react, nextjs, mysql, auth0, webscraping",,"Ohio State University, University of Cincinnati",2,245-10,University of Cincinnati,"We certainly dove straight into the unknown. We learned how to create a web app using React in Typescript, create user authorization using Auth0, and create a database using MySQL. We also utilized Git and GitHub to easily collaborate without having conflicts in code changes.",whipnaenae.tech
Best Use of Auth0 ,TransitU,https://revolutionuc2024.devpost.com/submissions/484343-transitu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:16:04,"Inspiration

We understood the unappreciated value of the on-campus bus systems and understood the lack of basic functionality of routing Point A to B for students through this system. We wanted to make a web app that could provide this functionality to allow students to better coordinate how to ride the buses.

What it does

Allows the commuting student to enter their class schedule, and finds the optimal time to leave using live, webscraped bus data with the Live Shuttle Tracker (https://uc.transloc.com/).

How we built it

We used Typescript React in NextJS for the front-end, and a MySQL server with Auth0 for authentication in the back-end. The webscraping relied on JavaScript fetch calls to the same backend API as the Live Shuttle Tracker. It runs this data through the Google Maps API as well to give a final minute count of your estimated time it takes to get on, ride, get off, and walk to your final destination to give you the most accurate arrival time to your scheduled classes.

Challenges we ran into

Originally we were going to have the bus route display on the map page, but ran into issues with the Google Maps API that we couldn't resolve in time. Having the ability to visually display the route the bus is taking the student and the walking path they must take when the bus arrives at the bus stop wouldn't been incredible.

Accomplishments that we're proud of

We were able to successfully collaborate using many, many frameworks that we had little to no experience beforehand to make a working application.

What we learned

Using multiple Google APIs is much harder to work with in a React environment and requires more time and prior knowledge than a Hackathon could allocate us with.

What's next for TransitU

Integrating Google Maps effectively to mark with visuals where the student needs to go. First from the origin point to the bus stop, marking the path of the first bus stop to the end, and the walk from exiting the bus to the building.
",https://github.com/collin-b1/rev-uc-2024,https://youtu.be/YUfuEC2qat4,"typescript, react, nextjs, mysql, auth0, webscraping",,"Ohio State University, University of Cincinnati",2,245-10,University of Cincinnati,"We certainly dove straight into the unknown. We learned how to create a web app using React in Typescript, create user authorization using Auth0, and create a database using MySQL. We also utilized Git and GitHub to easily collaborate without having conflicts in code changes.",whipnaenae.tech
Best Educational Hack,WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Best Design Hack,WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Best Social Impact Hack,WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Parkinson's Together Synapse Sprint,WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Best Product Market Fit (Center for Entrepreneurship),WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Best .Tech Domain Name,WeCU,https://revolutionuc2024.devpost.com/submissions/484349-wecu,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:29:06,"Inspiration

WeCU is born from the need of better help for people with neurological difficulties, and the desire to create an easy to use and fun solution

We are Johana Hernandez and Oriana Hernandez, two UC students with creativity, 24 hours and a really strong sister bond willing to find the way to fight the lack of great solutions in the mental health sector.

What it does

CU DAILY
By monitoring the student's or patient's mental well-being by implementing a daily check-up which consists on 3 short questions regarding energy levels, any concerns, and in the ruler quadrants scale, how do they feel that specific day.

Our CU DAILY check-up is a tool created to be there even when we can't. Maybe being in person is not a thing someone can do daily, but in WeCU the patients and students are first. We want to be there for them at any minute they need us, plus we keep track of their data and analyze it, to see patterns on they're mental health depending on the season, month, personal situation, etc. Our daily survey serves as a way for the patient's and students to wait a second and understand how they feel, while getting feedback about their recent energy levels and mood data displayed as a chart for their convenience.

In UC WeCU
Our fabulous student section is a great way for students to get to know all the resources they can access within UC, maybe getting support, talking to someone, or using our built in tips and hacks tile, which we developed with love to help people struggling with Stress, Seasonal Depression, Home Sickness, and Anxiety about exams. in WeCU we know that most students struggle with those topics and we're here to help the transition to be a college student, the hard winter or finals week, be easier to manage.

How we built it

To create WeCU, we decided to use HTML and CSS for our  front-end along with Javascript for our back-end, we decided to use github to host our webpage and added the custom .tech domain to our idea. For our built in chat bot we used tidio, chatbot templates. 

Challenges we ran into

Johana Hernandez First hackathon, it was our first time developing a completely programmed project, Oriana's first time using javascript , it was terrifying but most programming languages have the same logic and that helped her to understand the coding better. We are a team of two for a really ambitious project, and it was really hard to keep going even when we were tired. 
A challenge was that we wanted to use python to develop the backend but python does not support being added to HTML so we changed our method and started learning about basic syntax of Javascript.

Accomplishments that we're proud of

We are proud of our way to join our personal experiences with coding and formatting to create a great project, with Johana's knowledge of HTML and graphic design and Oriana's knowledge about programming logic and HTML, plus our drive to learn and try new things helped us create a great project.

What we learned

We learned how to develop code in Javascript from inside of an HTML document. 
Time management. 
How to complement each other ideas and knowledge. 
How to set up a greeting chatbot and a FAQ chatbot. 
The basics of implementing CECE our virtual assistant chatbot to check up on students or patients and answer questions regarding the website. 

What's next for WeCU

Successfully connecting the database to be able to retrieve and analyze data from each patient and display their respective information whenever they want. 
Expand our built in tips and hacks section to be able to give more mini-tips on how to manage certain situations in a students life. 
Implement a mobile application version, it works now on a smartphone but the dimensions are a little off so we might want to create a version just for phones and other for laptops or desktops.  
",https://orianahernandez.github.io/wecu_uc/,https://youtu.be/QsztaSH1g0M,"css, html, tidio, javascript, github, .tech",,"University of Cincinnati, University of Cincinnati Clermont College",1,Lobby 2-22,University Of Cincinnati,"We had a great experience, it was our first time developing a project using real code, and we learned so much from it. HTML and Javascript weren't our go-to codes but we enjoyed understanding how to implement these types of front-end languages for a project. We learned about .tech domain, it was a little bit difficult to deploy not gonna lie, but we got to expand our knowledge about the different types of domains that exist.",WeCU.tech (In UC WeCU)
Best Social Impact Hack,CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Use of Postgres (Tembo),CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Use of AWS,CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Implementation of an LLM or Other Generative AI Model (CincyTech),CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Data Science and Analytics Hack (Fortified Data),CHAAP: Chat With Any Anonymous Page,https://revolutionuc2024.devpost.com/submissions/484354-chaap-chat-with-any-anonymous-page,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:38:20,"Inspiration

We wanted to build a chatbot that could respect private data constraints and still deliver value. As such, we built an extension that can talk to anything, working with any website you can think of and scraping the data in a way that completely anonymizes data. We were inspired by works like Nightshade and other chatbots to guide our development.

What it does

CHAAP is a Chrome extension that can talk to any webpage you're on, performing reasoning and inference over the webpage. CHAAP allows you to talk to any LLM you want, ranging from AWS to OLLaMA to GPT. Additionally, if you're using proprietary LLMs, our HEMLock algorithm protects your data and prevents LLM providers from using your data for pretraining their models and stealing your work.

How we built it

We built CHAAP with several technologies, using technologies like Tembo for RAG, AWS for LLM inference, HuggingFace and Presidio for Anonymization, JS and HTML for the frontend, and countless other libraries. This library intricately weaves together a number of LLM systems to deliver secure and effective chatbot integrations.

Challenges we ran into

Chrome was a particularly hard thing to work with, as well as configuring Tembo to do vector database work. However we ended up implementing both.

Accomplishments that we're proud of

Delivering the project was an accomplishment we're quite proud of, as well as the anonymization algorithm we developed.

What we learned

Chrome is mean.

What's next for CHAAP: Chat With Any Anonymous Page

Image integration, stronger anonymization, potential decentralized protocol for LLM routing.
",https://github.com/arnavkomaragiri/CHAP,https://www.youtube.com/watch?v=80qRcPHnKxA&ab_channel=AndrewGerstenslager,"javascript, tembo, langchain, huggingface, ollama, amazon-web-services, openai, html5, chrome, python, fastapi",,University of Cincinnati,3,Lobby 2-27,University of Cincinnati,"Things were relatively good, we used Tembo, AWS, FastAPI, HuggingFace, and a number of technologies to deliver our product.",""
Best Educational Hack,QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
Best Design Hack,QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
"Best ""Useless"" Hack",QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
Best Implementation of an LLM or Other Generative AI Model (CincyTech),QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
Best Data Science and Analytics Hack (Fortified Data),QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
Best Use of Taipy,QueryPages,https://revolutionuc2024.devpost.com/submissions/484360-querypages,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:44:55,"Inspiration

Navigating multiple organizations as a student on campus, or a volunteer or an employee is difficult. And for some overwhelming. To ease this process, I introduce you to Query Pages - similar to the Yellow pages but for your organization.... and no it isn't something you will have to carry.

What it does

The Query Pages framework allows for the conversing with organizational data providing accurate responses. It lets you train the well-known llama2 model on your organization's data and policies on secure company system.

How we built it

Stage 1 - Ensure the model can read the various document types - pdf, docx, json and csv. Parse the data into chunks and then vectorize them using Ollama. The values are then stored in a chromadb embedded database. 

Stage 2 - Converting the query to vectors and then comparing and retrieving using RAG.

Stage 3 - Integration of Taipy with the framework

Challenges we ran into

Required 8 hours to ensure the working and configuration of the llama2 - Ollama model.

Accomplishments that we're proud of

Able to debug code and didn't lose hope.

What we learned

We learned about idea creation, tabnine and github copilot for development.

What's next for QueryPages

Implementation with more types of files.
Usage of better llms and fine-tuning models.
Improvement in UI with more tech stacks.
",https://github.com/mindofVishesh/revuc-lookup/tree/main,https://www.youtube.com/watch?v=MXWGqC1N688&ab_channel=VisheshParwani,"python, llama2, langchain, chromadb, taipy",,University of Cincinnati,3,335,University of Cincinnati,"During the hackathon. my team used Taipy, Ollama and langchain. We found it a bit difficult to implement the langchain at first, but we were then able to conquer that challenge. Taipy was a very hard framework to implement and we were unable to completely implement the same.
Overall, the documentation and the get started guide should be improved to better help new age hackers.",No
Best Educational Hack,BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Design Hack,BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Social Impact Hack,BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Use of Postgres (Tembo),BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Use of AWS,BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Implementation of an LLM or Other Generative AI Model (CincyTech),BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best Product Market Fit (Center for Entrepreneurship),BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
Best .Tech Domain Name,BardTales,https://revolutionuc2024.devpost.com/submissions/484363-bardtales,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:48:58,"Inspiration

Imagine bringing your favorite stories to life, not just with narration, but with immersive soundscapes too! Lose yourself in the world of the story with sound effects, emotional music, and professional narration. Perfect for audiobooks, bedtime stories, or simply adding a new dimension to your reading experience. Upload your favorite book, choose from a library of atmospheric sounds, and let BardTales weave its magic.

What it does

BardTales used generative AI convert a written work to an audiobook with professional voice narration and music score. 

How we built it

Web based UI is deployed on a flask server, which contains business logic taking the text payload from the input and perform the following operations.


 Polly API converts text to obtain natural sounding speech
 Inference on MusicGen small model.
 Encode speech and Music to a single audio file.
 Playback on web UI.


Challenges we ran into

We wanted to deploy and run inference on EC2 VMs with GPU(s). However, due to the unavailability of GPU quotas for EC2 we resolved to deploy this locally on our machines. Configuring the dependencies for pytorch and cuda was a time consuming process. The MusicGen models being very powerful require very specific context to  make aesthetically accurate soundtracks. We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

Accomplishments that we're proud of

Aesthetic UI
Approach generalizable to other platforms such as e-readers and pdfs.
Creative application bringing together distinct generative AI models (music and speech), with an ambitious architecture.
Better understanding of applications of prompt engineering for prototyping.

What we learned

AWS EC2, AWS Polly, AWS Rekognition, Flask, Pytorch, CSS, PostgreSQL, Prompt Engineering, Audio processing concepts.
We experimented with other LLMs GPT, Gemini, Llama 2, to add context prompts to our story text; these experiments demonstrated the potential for such techniques if we were able to obtain full access for the same models in future.

What's next for BardTales

Bugfixes, scale for bigger payloads, integrate e-readers as a target platform.
Merge persistence API hosted on Tembo (PSQL).
",https://github.com/vivek1376/5052_revUC2024,https://youtu.be/DHpMgerPShs,"amazon-web-services, pytorch, github, flask, ai, deeplearning, spectre.css, javascript, postgresql",,University of Cincinnati,3,230-3,University of Cincinnati,Missed google cloud platform this time !,bookbard.tech
"",Untitled,"",Draft,Pending,Manage team,02/24/2024 12:49:21,"","",,"",,"University of Cincinnati, University of Cincinnati Blue Ash College",3,"","","",""
Best Social Impact Hack,CapSoul,https://revolutionuc2024.devpost.com/submissions/484366-capsoul,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:50:32,"Inspiration

Overconsumption in the fashion industry has reached alarming levels, contributing to environmental degradation and overflowing closets. In response, our capsule wardrobe app provides a sustainable solution. By offering curated collections of timeless pieces, users can break free from excess, minimize waste, and define their personal style with ease.

What it does

Our app revolutionizes wardrobe management by allowing users to effortlessly upload their articles of clothing into their digital wardrobe. The app generates a personalized ""outfit of the day"" based on the user's preferences and style. If the outfit isn't quite right, the app regenerates new outfit options until the perfect look is achieved. Additionally, our app features an environmental page that provides users with personalized statistics on their fashion consumption habits, empowering them to make more sustainable choices. Furthermore, we offer a comprehensive fabric care guide to help users prolong the lifespan of their garments and reduce environmental impact.

How we built it

The Wardrobe page was primarily developed using Object-Oriented Programming (OOP) principles. We designed a Wardrobe class and instantiated objects capable of interacting seamlessly with the wardrobe, facilitating the effortless addition of various clothing items. Additionally, we implemented functions enabling users to add, delete, and locally store clothes within the wardrobe interface.

Challenges we ran into

As a team of four working with React Native and TypeScript, we encountered several challenges throughout our development process. Firstly, integrating React Native with TypeScript presented a learning curve, as we navigated the nuances of type definitions and ensuring compatibility between the two technologies.

Accomplishments that we're proud of

In our team, we had no prior knowledge of creating apps. However, in under 24 hours we were able to create a fully functional capsule wardrobe. 

What we learned

In this project, we had no prior experience in React Native or TypeScript presented a steep learning curve for our team. Throughout the development process, we gained valuable insights and skills that will undoubtedly shape our future endeavors. We learned the fundamentals of React Native, mastering its components, navigation, and state management. 

What's next for CapSoul

We aim to promote sustainability further by integrating a marketplace feature, where users can buy, sell, or exchange pre-loved clothing items within the community. This not only encourages mindful consumption but also fosters a culture of circular fashion, reducing waste and extending the lifespan of garments
",https://github.com/brown5lc/CapSoul,https://youtu.be/4qaPNC1RyJY,"react-native, typescript, javascript, react, expo.io, android-studio",,University of Cincinnati,3,N/A,The University of Cincinnati,"We had a great time learning how to develop an app using React Native! We used Expo, React Native, TypeScript, CSS, and HTML, to make a great app that helps people reduce their environmental impact!",""
UC Climate Action Plan Challenge (Metamorphosis Consulting),CapSoul,https://revolutionuc2024.devpost.com/submissions/484366-capsoul,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 12:50:32,"Inspiration

Overconsumption in the fashion industry has reached alarming levels, contributing to environmental degradation and overflowing closets. In response, our capsule wardrobe app provides a sustainable solution. By offering curated collections of timeless pieces, users can break free from excess, minimize waste, and define their personal style with ease.

What it does

Our app revolutionizes wardrobe management by allowing users to effortlessly upload their articles of clothing into their digital wardrobe. The app generates a personalized ""outfit of the day"" based on the user's preferences and style. If the outfit isn't quite right, the app regenerates new outfit options until the perfect look is achieved. Additionally, our app features an environmental page that provides users with personalized statistics on their fashion consumption habits, empowering them to make more sustainable choices. Furthermore, we offer a comprehensive fabric care guide to help users prolong the lifespan of their garments and reduce environmental impact.

How we built it

The Wardrobe page was primarily developed using Object-Oriented Programming (OOP) principles. We designed a Wardrobe class and instantiated objects capable of interacting seamlessly with the wardrobe, facilitating the effortless addition of various clothing items. Additionally, we implemented functions enabling users to add, delete, and locally store clothes within the wardrobe interface.

Challenges we ran into

As a team of four working with React Native and TypeScript, we encountered several challenges throughout our development process. Firstly, integrating React Native with TypeScript presented a learning curve, as we navigated the nuances of type definitions and ensuring compatibility between the two technologies.

Accomplishments that we're proud of

In our team, we had no prior knowledge of creating apps. However, in under 24 hours we were able to create a fully functional capsule wardrobe. 

What we learned

In this project, we had no prior experience in React Native or TypeScript presented a steep learning curve for our team. Throughout the development process, we gained valuable insights and skills that will undoubtedly shape our future endeavors. We learned the fundamentals of React Native, mastering its components, navigation, and state management. 

What's next for CapSoul

We aim to promote sustainability further by integrating a marketplace feature, where users can buy, sell, or exchange pre-loved clothing items within the community. This not only encourages mindful consumption but also fosters a culture of circular fashion, reducing waste and extending the lifespan of garments
",https://github.com/brown5lc/CapSoul,https://youtu.be/4qaPNC1RyJY,"react-native, typescript, javascript, react, expo.io, android-studio",,University of Cincinnati,3,N/A,The University of Cincinnati,"We had a great time learning how to develop an app using React Native! We used Expo, React Native, TypeScript, CSS, and HTML, to make a great app that helps people reduce their environmental impact!",""
Best Design Hack,Paisa,https://revolutionuc2024.devpost.com/submissions/484372-paisa,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:01:38,"Inspiration



When you're grappling with a hefty grocery bill and the thought of dividing it seems like a headache, that's when our project steps in with empathy and understanding.

What it does

Paisa is an OCR-powered receipt buddy for seamless expense splitting.

How we built it


User uploads the receipt image on React based frontend which passes over the image to Flask backend.
AI algorithms parse the receipt into a structured JSON format, extracting item details , prices and other useful information. We are leveraging Google Gemini for this generation with custom engineered query prompt.
Once the JSON is received the users can then assign each item to their friends with whom they shared it.
The app calculates the amount owed by each person, streamlining expense sharing.


Challenges we ran into


Searching for the perfect AI model for OCR and JSON generation, tailored to our unique needs.
Unfortunately, the prompt failed to produce the correct JSON format, leading to backend API complications.
Designing a sleek receipt UI with subtle cues, making it intuitive for users to tag people effortlessly.\


Accomplishments that we're proud of


Fast and portable solution to split expenses.
Leveraging latest Google Gemini model for OCR and text generation.
App like this can solve daily expense splitting problems for many individuals(probably prevent many fights too).


What we learned


Prompt Engineering 
OCR Process
Connecting to an LLM model from backend and passing data over to frontend.
Always git commit !!! (we nearly lost a file due to laptop shutdown)


What's next for Paisa


Mobile App: Develop a mobile application for convenient receipt uploading and expense management on the go.
Integration with Payment Platforms: Integrate with payment platforms for seamless settlement of shared expenses.
Smart Suggestions: Implement AI-powered suggestions for item assignment based on past spending patterns.
Expense Insights: Provide insights and analytics on spending patterns to help users manage their finances better.
More UI enhancements like user management, expense tracking, expense editing features etc.

","https://paisa-frontend.onrender.com/, https://github.com/AtharvaPingale/paisa-backend, https://github.com/jayzjayesh/dctassist",https://youtu.be/8D5ifZ9j1MU,"react, flask, llm, gemini, gen, ai",,University of Cincinnati,1,230-5,University of Cincinnati,"google-pro-vision, an Generation AI for images",""
"Best ""Useless"" Hack",Paisa,https://revolutionuc2024.devpost.com/submissions/484372-paisa,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:01:38,"Inspiration



When you're grappling with a hefty grocery bill and the thought of dividing it seems like a headache, that's when our project steps in with empathy and understanding.

What it does

Paisa is an OCR-powered receipt buddy for seamless expense splitting.

How we built it


User uploads the receipt image on React based frontend which passes over the image to Flask backend.
AI algorithms parse the receipt into a structured JSON format, extracting item details , prices and other useful information. We are leveraging Google Gemini for this generation with custom engineered query prompt.
Once the JSON is received the users can then assign each item to their friends with whom they shared it.
The app calculates the amount owed by each person, streamlining expense sharing.


Challenges we ran into


Searching for the perfect AI model for OCR and JSON generation, tailored to our unique needs.
Unfortunately, the prompt failed to produce the correct JSON format, leading to backend API complications.
Designing a sleek receipt UI with subtle cues, making it intuitive for users to tag people effortlessly.\


Accomplishments that we're proud of


Fast and portable solution to split expenses.
Leveraging latest Google Gemini model for OCR and text generation.
App like this can solve daily expense splitting problems for many individuals(probably prevent many fights too).


What we learned


Prompt Engineering 
OCR Process
Connecting to an LLM model from backend and passing data over to frontend.
Always git commit !!! (we nearly lost a file due to laptop shutdown)


What's next for Paisa


Mobile App: Develop a mobile application for convenient receipt uploading and expense management on the go.
Integration with Payment Platforms: Integrate with payment platforms for seamless settlement of shared expenses.
Smart Suggestions: Implement AI-powered suggestions for item assignment based on past spending patterns.
Expense Insights: Provide insights and analytics on spending patterns to help users manage their finances better.
More UI enhancements like user management, expense tracking, expense editing features etc.

","https://paisa-frontend.onrender.com/, https://github.com/AtharvaPingale/paisa-backend, https://github.com/jayzjayesh/dctassist",https://youtu.be/8D5ifZ9j1MU,"react, flask, llm, gemini, gen, ai",,University of Cincinnati,1,230-5,University of Cincinnati,"google-pro-vision, an Generation AI for images",""
EnableUC Challenge,Paisa,https://revolutionuc2024.devpost.com/submissions/484372-paisa,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:01:38,"Inspiration



When you're grappling with a hefty grocery bill and the thought of dividing it seems like a headache, that's when our project steps in with empathy and understanding.

What it does

Paisa is an OCR-powered receipt buddy for seamless expense splitting.

How we built it


User uploads the receipt image on React based frontend which passes over the image to Flask backend.
AI algorithms parse the receipt into a structured JSON format, extracting item details , prices and other useful information. We are leveraging Google Gemini for this generation with custom engineered query prompt.
Once the JSON is received the users can then assign each item to their friends with whom they shared it.
The app calculates the amount owed by each person, streamlining expense sharing.


Challenges we ran into


Searching for the perfect AI model for OCR and JSON generation, tailored to our unique needs.
Unfortunately, the prompt failed to produce the correct JSON format, leading to backend API complications.
Designing a sleek receipt UI with subtle cues, making it intuitive for users to tag people effortlessly.\


Accomplishments that we're proud of


Fast and portable solution to split expenses.
Leveraging latest Google Gemini model for OCR and text generation.
App like this can solve daily expense splitting problems for many individuals(probably prevent many fights too).


What we learned


Prompt Engineering 
OCR Process
Connecting to an LLM model from backend and passing data over to frontend.
Always git commit !!! (we nearly lost a file due to laptop shutdown)


What's next for Paisa


Mobile App: Develop a mobile application for convenient receipt uploading and expense management on the go.
Integration with Payment Platforms: Integrate with payment platforms for seamless settlement of shared expenses.
Smart Suggestions: Implement AI-powered suggestions for item assignment based on past spending patterns.
Expense Insights: Provide insights and analytics on spending patterns to help users manage their finances better.
More UI enhancements like user management, expense tracking, expense editing features etc.

","https://paisa-frontend.onrender.com/, https://github.com/AtharvaPingale/paisa-backend, https://github.com/jayzjayesh/dctassist",https://youtu.be/8D5ifZ9j1MU,"react, flask, llm, gemini, gen, ai",,University of Cincinnati,1,230-5,University of Cincinnati,"google-pro-vision, an Generation AI for images",""
Best Implementation of an LLM or Other Generative AI Model (CincyTech),Paisa,https://revolutionuc2024.devpost.com/submissions/484372-paisa,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:01:38,"Inspiration



When you're grappling with a hefty grocery bill and the thought of dividing it seems like a headache, that's when our project steps in with empathy and understanding.

What it does

Paisa is an OCR-powered receipt buddy for seamless expense splitting.

How we built it


User uploads the receipt image on React based frontend which passes over the image to Flask backend.
AI algorithms parse the receipt into a structured JSON format, extracting item details , prices and other useful information. We are leveraging Google Gemini for this generation with custom engineered query prompt.
Once the JSON is received the users can then assign each item to their friends with whom they shared it.
The app calculates the amount owed by each person, streamlining expense sharing.


Challenges we ran into


Searching for the perfect AI model for OCR and JSON generation, tailored to our unique needs.
Unfortunately, the prompt failed to produce the correct JSON format, leading to backend API complications.
Designing a sleek receipt UI with subtle cues, making it intuitive for users to tag people effortlessly.\


Accomplishments that we're proud of


Fast and portable solution to split expenses.
Leveraging latest Google Gemini model for OCR and text generation.
App like this can solve daily expense splitting problems for many individuals(probably prevent many fights too).


What we learned


Prompt Engineering 
OCR Process
Connecting to an LLM model from backend and passing data over to frontend.
Always git commit !!! (we nearly lost a file due to laptop shutdown)


What's next for Paisa


Mobile App: Develop a mobile application for convenient receipt uploading and expense management on the go.
Integration with Payment Platforms: Integrate with payment platforms for seamless settlement of shared expenses.
Smart Suggestions: Implement AI-powered suggestions for item assignment based on past spending patterns.
Expense Insights: Provide insights and analytics on spending patterns to help users manage their finances better.
More UI enhancements like user management, expense tracking, expense editing features etc.

","https://paisa-frontend.onrender.com/, https://github.com/AtharvaPingale/paisa-backend, https://github.com/jayzjayesh/dctassist",https://youtu.be/8D5ifZ9j1MU,"react, flask, llm, gemini, gen, ai",,University of Cincinnati,1,230-5,University of Cincinnati,"google-pro-vision, an Generation AI for images",""
Best Educational Hack,GRAID,https://revolutionuc2024.devpost.com/submissions/484374-graid,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:05:32,"Inspiration

As experienced TAs and tutors for our university's Computer Science department, my group and I understand firsthand the challenges of grading projects and providing comprehensive feedback. Spending hours deciphering and debugging walls of code can be not only time-consuming but also mentally taxing. Recognizing the need for a more efficient and accurate grading solution, we developed our platform. GRAID streamlines the grading process, leveraging AI technology to provide precise feedback and suggestions, saving valuable time for both educators and students. With GRAID, we aim to revolutionize the way coding projects are assessed, making the learning experience more effective and rewarding for all involved.

What it does

GRAID is a state-of-the-art platform revolutionizing the grading process for classes with its advanced features. In addition to streamlining the grading process through AI technology, GRAID incorporates a sophisticated AI webcam proctoring feature. This feature ensures exam integrity by monitoring students' activities during exams, providing a secure and reliable environment for assessment. With GRAID, educators can trust that their exams are conducted with integrity while saving valuable time previously spent on manual proctoring.
GRAID serves as a robust competitor to platforms like Canvas by offering a comprehensive solution for students and graders alike. Not only does GRAID facilitate the seamless submission and grading of assignments, but it also provides a platform for students and graders to communicate effectively through messages and discussion posts. What sets GRAID apart is its integration of advanced AI-powered features, which streamline the grading process and enhance the overall learning experience. With GRAID, users can expect efficient assignment management coupled with intelligent automation, making it a game-changer in the realm of educational technology.

How we built it

GRAID stands at the forefront of educational technology, boasting a robust foundation developed with the Flutter framework for unparalleled cross-platform accessibility. What sets GRAID apart is its innovative use of OpenAI API to offer advanced AI-powered features, including streamlined grading assistance and personalized feedback. The platform uses a custom model trained using MediaPipe Face Mesh technology, allowing for its AI webcam proctor to accurately flag suspicious activity. This sophisticated technology ensures the highest standards of exam integrity by precisely monitoring students' facial features during coding exams. GRAID's integration of Flutter, OpenAI API, and MediaPipe Face Mesh enhances its capacity to provide a secure, reliable, and user-friendly environment for both educators and students, marking a significant stride forward in the landscape of educational technology.

Challenges we ran into

The platform utilizes a custom model trained using MediaPipe Face Mesh, enabling its AI webcam proctor to accurately flag suspicious activity during exams. However, a notable challenge we encountered during development was effectively handling edge cases in training the AI proctor. Despite this challenge, our team successfully navigated through these complexities to ensure the proctor's reliability and accuracy.

Accomplishments that we're proud of

GRAID is not just a solution to a common problem faced in academic settings; it's a personal triumph for our team. As former TAs and tutors, we understand the frustration of time-consuming grading processes. This personal connection drives our pride in developing a platform that not only streamlines grading and offers accurate feedback but also features a clean and professional UI, despite our initial lack of experience in AI model training. GRAID represents our commitment to solving real-world challenges that impact educators and students alike.

What we learned

Through the development of GRAID, we gained invaluable insights into the complexities of training AI models and the importance of meticulous planning and efficient delegation in managing large-scale projects within tight deadlines. Despite our initial lack of experience in AI model training, we navigated the learning curve with determination, gaining a deeper understanding of the considerations involved in model development. Additionally, GRAID served as a catalyst for honing our abilities to plan and delegate tasks effectively, ensuring the successful execution of a comprehensive solution to a pressing problem in the academic realm.

What's next for GRAID

In our future plans for GRAID, while the platform currently focuses on streamlining the grading process for coding assignments, we envision expanding its capabilities to accommodate a wider range of course materials and assignments. While it theoretically works with any type of assignment, our initial design was tailored specifically with coding assignments in mind. Moving forward, we are committed to enhancing GRAID to cater to diverse academic disciplines and assignment types. Additionally, we aim to enrich the personal feedback provided to students by incorporating custom learning modules and offering unique additional resources tailored to their specific needs, empowering them to excel in their studies and prepare effectively for upcoming exams. In order to reduce the amount of expensive API calls, alternative methods can be used to analyze submissions, including prompt optimizing/engineering.
",https://github.com/danielgof/revolutionuc2024,https://youtu.be/RxniVxNvl3M,"flutter, dart, openai, mediapipe, python",,Ohio State University,2,220-41,The Ohio State University,Our team found the use of Auth0 to be much more complex than we thought due to unforseen issues with Flutter and dependencies.,graider.tech
Best Implementation of an LLM or Other Generative AI Model (CincyTech),GRAID,https://revolutionuc2024.devpost.com/submissions/484374-graid,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:05:32,"Inspiration

As experienced TAs and tutors for our university's Computer Science department, my group and I understand firsthand the challenges of grading projects and providing comprehensive feedback. Spending hours deciphering and debugging walls of code can be not only time-consuming but also mentally taxing. Recognizing the need for a more efficient and accurate grading solution, we developed our platform. GRAID streamlines the grading process, leveraging AI technology to provide precise feedback and suggestions, saving valuable time for both educators and students. With GRAID, we aim to revolutionize the way coding projects are assessed, making the learning experience more effective and rewarding for all involved.

What it does

GRAID is a state-of-the-art platform revolutionizing the grading process for classes with its advanced features. In addition to streamlining the grading process through AI technology, GRAID incorporates a sophisticated AI webcam proctoring feature. This feature ensures exam integrity by monitoring students' activities during exams, providing a secure and reliable environment for assessment. With GRAID, educators can trust that their exams are conducted with integrity while saving valuable time previously spent on manual proctoring.
GRAID serves as a robust competitor to platforms like Canvas by offering a comprehensive solution for students and graders alike. Not only does GRAID facilitate the seamless submission and grading of assignments, but it also provides a platform for students and graders to communicate effectively through messages and discussion posts. What sets GRAID apart is its integration of advanced AI-powered features, which streamline the grading process and enhance the overall learning experience. With GRAID, users can expect efficient assignment management coupled with intelligent automation, making it a game-changer in the realm of educational technology.

How we built it

GRAID stands at the forefront of educational technology, boasting a robust foundation developed with the Flutter framework for unparalleled cross-platform accessibility. What sets GRAID apart is its innovative use of OpenAI API to offer advanced AI-powered features, including streamlined grading assistance and personalized feedback. The platform uses a custom model trained using MediaPipe Face Mesh technology, allowing for its AI webcam proctor to accurately flag suspicious activity. This sophisticated technology ensures the highest standards of exam integrity by precisely monitoring students' facial features during coding exams. GRAID's integration of Flutter, OpenAI API, and MediaPipe Face Mesh enhances its capacity to provide a secure, reliable, and user-friendly environment for both educators and students, marking a significant stride forward in the landscape of educational technology.

Challenges we ran into

The platform utilizes a custom model trained using MediaPipe Face Mesh, enabling its AI webcam proctor to accurately flag suspicious activity during exams. However, a notable challenge we encountered during development was effectively handling edge cases in training the AI proctor. Despite this challenge, our team successfully navigated through these complexities to ensure the proctor's reliability and accuracy.

Accomplishments that we're proud of

GRAID is not just a solution to a common problem faced in academic settings; it's a personal triumph for our team. As former TAs and tutors, we understand the frustration of time-consuming grading processes. This personal connection drives our pride in developing a platform that not only streamlines grading and offers accurate feedback but also features a clean and professional UI, despite our initial lack of experience in AI model training. GRAID represents our commitment to solving real-world challenges that impact educators and students alike.

What we learned

Through the development of GRAID, we gained invaluable insights into the complexities of training AI models and the importance of meticulous planning and efficient delegation in managing large-scale projects within tight deadlines. Despite our initial lack of experience in AI model training, we navigated the learning curve with determination, gaining a deeper understanding of the considerations involved in model development. Additionally, GRAID served as a catalyst for honing our abilities to plan and delegate tasks effectively, ensuring the successful execution of a comprehensive solution to a pressing problem in the academic realm.

What's next for GRAID

In our future plans for GRAID, while the platform currently focuses on streamlining the grading process for coding assignments, we envision expanding its capabilities to accommodate a wider range of course materials and assignments. While it theoretically works with any type of assignment, our initial design was tailored specifically with coding assignments in mind. Moving forward, we are committed to enhancing GRAID to cater to diverse academic disciplines and assignment types. Additionally, we aim to enrich the personal feedback provided to students by incorporating custom learning modules and offering unique additional resources tailored to their specific needs, empowering them to excel in their studies and prepare effectively for upcoming exams. In order to reduce the amount of expensive API calls, alternative methods can be used to analyze submissions, including prompt optimizing/engineering.
",https://github.com/danielgof/revolutionuc2024,https://youtu.be/RxniVxNvl3M,"flutter, dart, openai, mediapipe, python",,Ohio State University,2,220-41,The Ohio State University,Our team found the use of Auth0 to be much more complex than we thought due to unforseen issues with Flutter and dependencies.,graider.tech
Best Product Market Fit (Center for Entrepreneurship),GRAID,https://revolutionuc2024.devpost.com/submissions/484374-graid,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:05:32,"Inspiration

As experienced TAs and tutors for our university's Computer Science department, my group and I understand firsthand the challenges of grading projects and providing comprehensive feedback. Spending hours deciphering and debugging walls of code can be not only time-consuming but also mentally taxing. Recognizing the need for a more efficient and accurate grading solution, we developed our platform. GRAID streamlines the grading process, leveraging AI technology to provide precise feedback and suggestions, saving valuable time for both educators and students. With GRAID, we aim to revolutionize the way coding projects are assessed, making the learning experience more effective and rewarding for all involved.

What it does

GRAID is a state-of-the-art platform revolutionizing the grading process for classes with its advanced features. In addition to streamlining the grading process through AI technology, GRAID incorporates a sophisticated AI webcam proctoring feature. This feature ensures exam integrity by monitoring students' activities during exams, providing a secure and reliable environment for assessment. With GRAID, educators can trust that their exams are conducted with integrity while saving valuable time previously spent on manual proctoring.
GRAID serves as a robust competitor to platforms like Canvas by offering a comprehensive solution for students and graders alike. Not only does GRAID facilitate the seamless submission and grading of assignments, but it also provides a platform for students and graders to communicate effectively through messages and discussion posts. What sets GRAID apart is its integration of advanced AI-powered features, which streamline the grading process and enhance the overall learning experience. With GRAID, users can expect efficient assignment management coupled with intelligent automation, making it a game-changer in the realm of educational technology.

How we built it

GRAID stands at the forefront of educational technology, boasting a robust foundation developed with the Flutter framework for unparalleled cross-platform accessibility. What sets GRAID apart is its innovative use of OpenAI API to offer advanced AI-powered features, including streamlined grading assistance and personalized feedback. The platform uses a custom model trained using MediaPipe Face Mesh technology, allowing for its AI webcam proctor to accurately flag suspicious activity. This sophisticated technology ensures the highest standards of exam integrity by precisely monitoring students' facial features during coding exams. GRAID's integration of Flutter, OpenAI API, and MediaPipe Face Mesh enhances its capacity to provide a secure, reliable, and user-friendly environment for both educators and students, marking a significant stride forward in the landscape of educational technology.

Challenges we ran into

The platform utilizes a custom model trained using MediaPipe Face Mesh, enabling its AI webcam proctor to accurately flag suspicious activity during exams. However, a notable challenge we encountered during development was effectively handling edge cases in training the AI proctor. Despite this challenge, our team successfully navigated through these complexities to ensure the proctor's reliability and accuracy.

Accomplishments that we're proud of

GRAID is not just a solution to a common problem faced in academic settings; it's a personal triumph for our team. As former TAs and tutors, we understand the frustration of time-consuming grading processes. This personal connection drives our pride in developing a platform that not only streamlines grading and offers accurate feedback but also features a clean and professional UI, despite our initial lack of experience in AI model training. GRAID represents our commitment to solving real-world challenges that impact educators and students alike.

What we learned

Through the development of GRAID, we gained invaluable insights into the complexities of training AI models and the importance of meticulous planning and efficient delegation in managing large-scale projects within tight deadlines. Despite our initial lack of experience in AI model training, we navigated the learning curve with determination, gaining a deeper understanding of the considerations involved in model development. Additionally, GRAID served as a catalyst for honing our abilities to plan and delegate tasks effectively, ensuring the successful execution of a comprehensive solution to a pressing problem in the academic realm.

What's next for GRAID

In our future plans for GRAID, while the platform currently focuses on streamlining the grading process for coding assignments, we envision expanding its capabilities to accommodate a wider range of course materials and assignments. While it theoretically works with any type of assignment, our initial design was tailored specifically with coding assignments in mind. Moving forward, we are committed to enhancing GRAID to cater to diverse academic disciplines and assignment types. Additionally, we aim to enrich the personal feedback provided to students by incorporating custom learning modules and offering unique additional resources tailored to their specific needs, empowering them to excel in their studies and prepare effectively for upcoming exams. In order to reduce the amount of expensive API calls, alternative methods can be used to analyze submissions, including prompt optimizing/engineering.
",https://github.com/danielgof/revolutionuc2024,https://youtu.be/RxniVxNvl3M,"flutter, dart, openai, mediapipe, python",,Ohio State University,2,220-41,The Ohio State University,Our team found the use of Auth0 to be much more complex than we thought due to unforseen issues with Flutter and dependencies.,graider.tech
Best .Tech Domain Name,GRAID,https://revolutionuc2024.devpost.com/submissions/484374-graid,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:05:32,"Inspiration

As experienced TAs and tutors for our university's Computer Science department, my group and I understand firsthand the challenges of grading projects and providing comprehensive feedback. Spending hours deciphering and debugging walls of code can be not only time-consuming but also mentally taxing. Recognizing the need for a more efficient and accurate grading solution, we developed our platform. GRAID streamlines the grading process, leveraging AI technology to provide precise feedback and suggestions, saving valuable time for both educators and students. With GRAID, we aim to revolutionize the way coding projects are assessed, making the learning experience more effective and rewarding for all involved.

What it does

GRAID is a state-of-the-art platform revolutionizing the grading process for classes with its advanced features. In addition to streamlining the grading process through AI technology, GRAID incorporates a sophisticated AI webcam proctoring feature. This feature ensures exam integrity by monitoring students' activities during exams, providing a secure and reliable environment for assessment. With GRAID, educators can trust that their exams are conducted with integrity while saving valuable time previously spent on manual proctoring.
GRAID serves as a robust competitor to platforms like Canvas by offering a comprehensive solution for students and graders alike. Not only does GRAID facilitate the seamless submission and grading of assignments, but it also provides a platform for students and graders to communicate effectively through messages and discussion posts. What sets GRAID apart is its integration of advanced AI-powered features, which streamline the grading process and enhance the overall learning experience. With GRAID, users can expect efficient assignment management coupled with intelligent automation, making it a game-changer in the realm of educational technology.

How we built it

GRAID stands at the forefront of educational technology, boasting a robust foundation developed with the Flutter framework for unparalleled cross-platform accessibility. What sets GRAID apart is its innovative use of OpenAI API to offer advanced AI-powered features, including streamlined grading assistance and personalized feedback. The platform uses a custom model trained using MediaPipe Face Mesh technology, allowing for its AI webcam proctor to accurately flag suspicious activity. This sophisticated technology ensures the highest standards of exam integrity by precisely monitoring students' facial features during coding exams. GRAID's integration of Flutter, OpenAI API, and MediaPipe Face Mesh enhances its capacity to provide a secure, reliable, and user-friendly environment for both educators and students, marking a significant stride forward in the landscape of educational technology.

Challenges we ran into

The platform utilizes a custom model trained using MediaPipe Face Mesh, enabling its AI webcam proctor to accurately flag suspicious activity during exams. However, a notable challenge we encountered during development was effectively handling edge cases in training the AI proctor. Despite this challenge, our team successfully navigated through these complexities to ensure the proctor's reliability and accuracy.

Accomplishments that we're proud of

GRAID is not just a solution to a common problem faced in academic settings; it's a personal triumph for our team. As former TAs and tutors, we understand the frustration of time-consuming grading processes. This personal connection drives our pride in developing a platform that not only streamlines grading and offers accurate feedback but also features a clean and professional UI, despite our initial lack of experience in AI model training. GRAID represents our commitment to solving real-world challenges that impact educators and students alike.

What we learned

Through the development of GRAID, we gained invaluable insights into the complexities of training AI models and the importance of meticulous planning and efficient delegation in managing large-scale projects within tight deadlines. Despite our initial lack of experience in AI model training, we navigated the learning curve with determination, gaining a deeper understanding of the considerations involved in model development. Additionally, GRAID served as a catalyst for honing our abilities to plan and delegate tasks effectively, ensuring the successful execution of a comprehensive solution to a pressing problem in the academic realm.

What's next for GRAID

In our future plans for GRAID, while the platform currently focuses on streamlining the grading process for coding assignments, we envision expanding its capabilities to accommodate a wider range of course materials and assignments. While it theoretically works with any type of assignment, our initial design was tailored specifically with coding assignments in mind. Moving forward, we are committed to enhancing GRAID to cater to diverse academic disciplines and assignment types. Additionally, we aim to enrich the personal feedback provided to students by incorporating custom learning modules and offering unique additional resources tailored to their specific needs, empowering them to excel in their studies and prepare effectively for upcoming exams. In order to reduce the amount of expensive API calls, alternative methods can be used to analyze submissions, including prompt optimizing/engineering.
",https://github.com/danielgof/revolutionuc2024,https://youtu.be/RxniVxNvl3M,"flutter, dart, openai, mediapipe, python",,Ohio State University,2,220-41,The Ohio State University,Our team found the use of Auth0 to be much more complex than we thought due to unforseen issues with Flutter and dependencies.,graider.tech
"",Untitled,"",Draft,Pending,Manage team,02/24/2024 13:28:14,"","",,"",,University of Cincinnati,0,"","","",""
Best Use of Postgres (Tembo),Datox,https://revolutionuc2024.devpost.com/submissions/484388-datox,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:36:58,"Inspiration

Countless times, we have realized just how helpful AI could be to our projects. Yet more often than not, we have to drop our plans because they would require specific data that seemed impossible to find  online. For instance, at one point I was in great need of segmentation data on old geographic maps. Or another time, we had to abandon an otherwise great project just because of a lack of data regarding  financial advice. Due to these frustrating concerns, we have made a platform which streamlines the data acquisition process like never before.

What it does

Datox allows customers to get their data needs fulfilled by countless freelancers on the site. For most complex data needs, this platform would be perfect as it reduces the complexity of this task by tenfold for the customers.

How we built it

We use Next.js and Tailwind to produce the main website of this platform. As Data is at the very core of Datox, we needed to ensure unshakable database integrity. With this in mind, we settled upon PostgreSQL. Furthermore, aside from the main website, we employed a Python API to do most of the complex file handling tasks.

Challenges we ran into

The data management in general was a complex task. Since it was such a core functionality, we simply could not have created a half-baked feature. The reason it was challenging was in no small part because of differences between production and deployment environments.
Due to this, deploying our platform took unexpectedly long. Though we have experience deploying before, the considerable storage requirements of this app made this challenging on free-tier hosting providers.

Accomplishments that we're proud of

Deciding to use PostgreSQL was an improvised decision, yet we managed to learn it sufficiently well. Furthermore, we are proud that we were able to get the first version of our app fully made and deployed, as often time constraints can force an incomplete product. Finally, we are happy with the execution of our front-end.

What we learned

We have definitely learned to work with databases and file systems much better as we needed to ensure that this system is robust. Furthermore, there were many different components to this platform, and we had to distribute the work amongst ourselves. However when merging all of our code, we realized the value of being in sync. In addition, we will certainly keep in mind for future reference how unpredictable deployments can be, as that took up a rather high percentage of our time.

Market Research

We wanted to conduct some Market Research to see how our project might fare in the real world. We got in touch with representatives from Epic Systems and Cobalt Robotics and asked for their opinion on the viability and usefulness of this project. They both expressed interest in the idea. The representative from Cobalt stated that Datox could resolve problems by taking the burden of labelling off of engineers and could be popular with freelancers looking for a ""gig"" job. The representative from Epic Systems said that if challenges like labelling verification could be overcome, the platform could improve efficiency with its centralization.

What's next for Datox

The current era witnesses a rapid expansion in the AI field, and in this context software such as Datox will be crucial in facilitating the pursuit. Therefore, there is definitely a large opportunity for Datox, and upon doing some research, this has become ever more clear. According to this study ,  about 96 % of enterprises encounter data quality and labelling challenges. Furthermore, it even states that teams that outsource data labeling get into production faster. Therefore, it is clear that the industry needs more effective solutions to tackle this challenge, and Datox will do just that by making it easier than ever to outsource labeling and maintain its quality.
 By enabling customizable payouts, Datox operates on Laissez-faire economics, converging towards market equilibrium, ensuring competitiveness and attractiveness for both freelancers and customers. Despite taking a small transaction cut for profitability, Datox will remain stable due to projected growth in the freelance market (â‰ˆ16%) which will offset for the marginal dip in supply of freelancers caused by the transaction cut. Consequently, Datox appears poised for success as a stable, thriving, and profitable product.
",https://github.com/pradhamk/Datox,https://youtu.be/YtZc5gj5K2I,"next.js, python, flask, javascript, postgresql, ferretdb, tailwind",,"Churchill High School, Michigan State University",2,Lobby2-26,Churchill High School,"PostgressDB has rather powerful analytics compared to what we have used before, and is a reason we want to keep using it. Next.js can be frustrating at times, but it is so powerful because it can basically do a lot of front end and back end work. Python seems to be perfect for APIs. It simply works faster, which allows us to dedicate more time to the central website. Tailwind honestly did a lot of the heavy lifting in terms of the css.",Datox.tech
Best Product Market Fit (Center for Entrepreneurship),Datox,https://revolutionuc2024.devpost.com/submissions/484388-datox,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 13:36:58,"Inspiration

Countless times, we have realized just how helpful AI could be to our projects. Yet more often than not, we have to drop our plans because they would require specific data that seemed impossible to find  online. For instance, at one point I was in great need of segmentation data on old geographic maps. Or another time, we had to abandon an otherwise great project just because of a lack of data regarding  financial advice. Due to these frustrating concerns, we have made a platform which streamlines the data acquisition process like never before.

What it does

Datox allows customers to get their data needs fulfilled by countless freelancers on the site. For most complex data needs, this platform would be perfect as it reduces the complexity of this task by tenfold for the customers.

How we built it

We use Next.js and Tailwind to produce the main website of this platform. As Data is at the very core of Datox, we needed to ensure unshakable database integrity. With this in mind, we settled upon PostgreSQL. Furthermore, aside from the main website, we employed a Python API to do most of the complex file handling tasks.

Challenges we ran into

The data management in general was a complex task. Since it was such a core functionality, we simply could not have created a half-baked feature. The reason it was challenging was in no small part because of differences between production and deployment environments.
Due to this, deploying our platform took unexpectedly long. Though we have experience deploying before, the considerable storage requirements of this app made this challenging on free-tier hosting providers.

Accomplishments that we're proud of

Deciding to use PostgreSQL was an improvised decision, yet we managed to learn it sufficiently well. Furthermore, we are proud that we were able to get the first version of our app fully made and deployed, as often time constraints can force an incomplete product. Finally, we are happy with the execution of our front-end.

What we learned

We have definitely learned to work with databases and file systems much better as we needed to ensure that this system is robust. Furthermore, there were many different components to this platform, and we had to distribute the work amongst ourselves. However when merging all of our code, we realized the value of being in sync. In addition, we will certainly keep in mind for future reference how unpredictable deployments can be, as that took up a rather high percentage of our time.

Market Research

We wanted to conduct some Market Research to see how our project might fare in the real world. We got in touch with representatives from Epic Systems and Cobalt Robotics and asked for their opinion on the viability and usefulness of this project. They both expressed interest in the idea. The representative from Cobalt stated that Datox could resolve problems by taking the burden of labelling off of engineers and could be popular with freelancers looking for a ""gig"" job. The representative from Epic Systems said that if challenges like labelling verification could be overcome, the platform could improve efficiency with its centralization.

What's next for Datox

The current era witnesses a rapid expansion in the AI field, and in this context software such as Datox will be crucial in facilitating the pursuit. Therefore, there is definitely a large opportunity for Datox, and upon doing some research, this has become ever more clear. According to this study ,  about 96 % of enterprises encounter data quality and labelling challenges. Furthermore, it even states that teams that outsource data labeling get into production faster. Therefore, it is clear that the industry needs more effective solutions to tackle this challenge, and Datox will do just that by making it easier than ever to outsource labeling and maintain its quality.
 By enabling customizable payouts, Datox operates on Laissez-faire economics, converging towards market equilibrium, ensuring competitiveness and attractiveness for both freelancers and customers. Despite taking a small transaction cut for profitability, Datox will remain stable due to projected growth in the freelance market (â‰ˆ16%) which will offset for the marginal dip in supply of freelancers caused by the transaction cut. Consequently, Datox appears poised for success as a stable, thriving, and profitable product.
",https://github.com/pradhamk/Datox,https://youtu.be/YtZc5gj5K2I,"next.js, python, flask, javascript, postgresql, ferretdb, tailwind",,"Churchill High School, Michigan State University",2,Lobby2-26,Churchill High School,"PostgressDB has rather powerful analytics compared to what we have used before, and is a reason we want to keep using it. Next.js can be frustrating at times, but it is so powerful because it can basically do a lot of front end and back end work. Python seems to be perfect for APIs. It simply works faster, which allows us to dedicate more time to the central website. Tailwind honestly did a lot of the heavy lifting in terms of the css.",Datox.tech
"",Untitled,"",Draft,Pending,Manage team,02/24/2024 13:51:40,"","",,"",,University of Cincinnati,1,"","","",""
"",Medpace Future,https://revolutionuc2024.devpost.com/submissions/484413-medpace-future,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:34:03,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Medpace Future

Test
","",https://www.youtube.com/watch?v=F-zLal9vapM,"servicenow, javascript, auth0, html, css",,University of Cincinnati,0,Lobby2 33,University of Cincinnati,I had an unique experience here working on the Medpace challenge among the community of developers. I used Auth0 as an identity provider for my web application.,herestofuture.tech
Best Social Impact Hack,Super Awesome Shiba Inu Website,https://revolutionuc2024.devpost.com/submissions/484416-super-awesome-shiba-inu-website,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:38:01,"Inspiration

Our inspiration came from a friend who created an API to generate new pictures of Shiba Inus in which we wanted to incorporate into our project. Since we are first-year students and had no previous experience using HTML to create websites, we set our original goal pretty low: add the API of dog images to the page. Once we accomplished that goal a lot faster than we anticipated, we were able to expand our website's features by incorporating more JavaScript and the use of more functions.

What it does

Our website allows you to generate new pictures of Shiba Inus till your heart's desire. Your favorite dog will bless you with a variety of inspiring phrases. Not enough? Kick it up a notch by changing the mode to fit your style!

How we built it

We built this website using WebStorm which is an application neither of us have used before. Using GitHub, we were able to work and learn different aspects of the new language and application then merge our work together.

Challenges we ran into

The biggest challenge was fetching the data from a website and connecting it to a button on our page to shuffle through each generated photo of a Shiba Inu.

Accomplishments that we're proud of

We're proud that we were able to self-teach ourselves how to use new programming languages as well as problem shoot issues on our own within 24 hours.

What we learned

We learned the basics of HTML, CSS, and JavaScript and how to use them in accordance with each other. We also learned how to use the new application with the help of Github and Git

What's next for Super Awesome Shiba Inu Website

The addition of more inspirational messages along with more modes to choose from. There will also be an updated look to give a more modern and sleeker finished look.

NOTE: In the video we weren't able to get the video to display the button due to the odd aspect ratio on our laptop.
",http://pawspirational.tech/,https://youtu.be/M7WfFFoNQuM,"html, css, javascript, webstorm",,University of Cincinnati,1,220-38,University of Cincinnati,"We're first year students and we didn't have much knowledge about web development. We decided to learn HTML, CSS, and JavaScript. We had a lot of fun over the event especially just making a website since it's something we've done for the first time!",pawspirational.tech
"Best ""Useless"" Hack",Super Awesome Shiba Inu Website,https://revolutionuc2024.devpost.com/submissions/484416-super-awesome-shiba-inu-website,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:38:01,"Inspiration

Our inspiration came from a friend who created an API to generate new pictures of Shiba Inus in which we wanted to incorporate into our project. Since we are first-year students and had no previous experience using HTML to create websites, we set our original goal pretty low: add the API of dog images to the page. Once we accomplished that goal a lot faster than we anticipated, we were able to expand our website's features by incorporating more JavaScript and the use of more functions.

What it does

Our website allows you to generate new pictures of Shiba Inus till your heart's desire. Your favorite dog will bless you with a variety of inspiring phrases. Not enough? Kick it up a notch by changing the mode to fit your style!

How we built it

We built this website using WebStorm which is an application neither of us have used before. Using GitHub, we were able to work and learn different aspects of the new language and application then merge our work together.

Challenges we ran into

The biggest challenge was fetching the data from a website and connecting it to a button on our page to shuffle through each generated photo of a Shiba Inu.

Accomplishments that we're proud of

We're proud that we were able to self-teach ourselves how to use new programming languages as well as problem shoot issues on our own within 24 hours.

What we learned

We learned the basics of HTML, CSS, and JavaScript and how to use them in accordance with each other. We also learned how to use the new application with the help of Github and Git

What's next for Super Awesome Shiba Inu Website

The addition of more inspirational messages along with more modes to choose from. There will also be an updated look to give a more modern and sleeker finished look.

NOTE: In the video we weren't able to get the video to display the button due to the odd aspect ratio on our laptop.
",http://pawspirational.tech/,https://youtu.be/M7WfFFoNQuM,"html, css, javascript, webstorm",,University of Cincinnati,1,220-38,University of Cincinnati,"We're first year students and we didn't have much knowledge about web development. We decided to learn HTML, CSS, and JavaScript. We had a lot of fun over the event especially just making a website since it's something we've done for the first time!",pawspirational.tech
Best .Tech Domain Name,Super Awesome Shiba Inu Website,https://revolutionuc2024.devpost.com/submissions/484416-super-awesome-shiba-inu-website,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:38:01,"Inspiration

Our inspiration came from a friend who created an API to generate new pictures of Shiba Inus in which we wanted to incorporate into our project. Since we are first-year students and had no previous experience using HTML to create websites, we set our original goal pretty low: add the API of dog images to the page. Once we accomplished that goal a lot faster than we anticipated, we were able to expand our website's features by incorporating more JavaScript and the use of more functions.

What it does

Our website allows you to generate new pictures of Shiba Inus till your heart's desire. Your favorite dog will bless you with a variety of inspiring phrases. Not enough? Kick it up a notch by changing the mode to fit your style!

How we built it

We built this website using WebStorm which is an application neither of us have used before. Using GitHub, we were able to work and learn different aspects of the new language and application then merge our work together.

Challenges we ran into

The biggest challenge was fetching the data from a website and connecting it to a button on our page to shuffle through each generated photo of a Shiba Inu.

Accomplishments that we're proud of

We're proud that we were able to self-teach ourselves how to use new programming languages as well as problem shoot issues on our own within 24 hours.

What we learned

We learned the basics of HTML, CSS, and JavaScript and how to use them in accordance with each other. We also learned how to use the new application with the help of Github and Git

What's next for Super Awesome Shiba Inu Website

The addition of more inspirational messages along with more modes to choose from. There will also be an updated look to give a more modern and sleeker finished look.

NOTE: In the video we weren't able to get the video to display the button due to the odd aspect ratio on our laptop.
",http://pawspirational.tech/,https://youtu.be/M7WfFFoNQuM,"html, css, javascript, webstorm",,University of Cincinnati,1,220-38,University of Cincinnati,"We're first year students and we didn't have much knowledge about web development. We decided to learn HTML, CSS, and JavaScript. We had a lot of fun over the event especially just making a website since it's something we've done for the first time!",pawspirational.tech
Best Educational Hack,Academath,https://revolutionuc2024.devpost.com/submissions/484417-academath,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:39:06,"Inspiration As students who have previously struggled with learning the beginning concepts of calculus, we wanted to create a platform that would alleviate this frequent steep learning curve among newer learners.

What it does This platform was intended to prompt the user about the different beginning topics that are taught in calculus. These topics are limits, derivatives, integrals, and Riemann Sums. The online learning platform prompts the user questions related to the different topics mentioned above, and generates questions depending on the difficulty of the user's choosing. If the user completes a certain number of questions, they are rewarded with either a bronze, silver, gold or platinum level, depending on the difficulty of their choosing, with bronze being the lowest difficulty, and platinum being the highest difficulty.

How we built it There are multiple layers to the learning platform. Starting with the ""back-end"" side of the platform. For this layer of the learning website, we used python to prompt the user the section they wish to learn about, and choose their difficulty.  We primarily used GitHub Pages to run the web service, and used a .tech domain. Primarily, the was made through JavaScript, CSS, and HTML, along with PyScript.

Challenges we ran into While designing and building our learning platform, we ran into a lot of issues concerning the connection between the ""front-end"" and ""back-end"" layer of our learning platform. Due the variety of different languages used for the ""front-end"" and ""back-end"" of our learning platform, there were various number of issues concerning the conversion of code. For instance, because our ""back-end"" was coded using javascript and python, while the ""front-end"" utilized languages such as HTML and CSS, the translation and communication between the languages was difficult and confusing. Py-script was used to facilitate connection between these various languages, however, due to our lack of expertise in the said language, it lengthened the design process.

Accomplishments that we're proud of Launching the website with the use of GitHub and familiarizing ourselves with GitHub.

What we learned We learned how to py-script, GitHub, and the connections domain names have to GitHub.

What's next for Academath Fine tuning the website, which includes the actual ""Play"" function of the website. Learning and getting familiarized with GitHub and py-script in order to improve the efficiency and accuracy of the website.
",https://academath.tech/,https://youtu.be/lihwBNhlZ9I,"html, css, py-script, python, .tech, javascript",,University of Cincinnati,3,267,University of Cincinnati,"We used GitHub's website hosting service GitHub Pages. Since we did not have very in depth knowledge in GitHub, it was a great learning experience to get familiar with repositories and useful terminal commands. It was also a constructive experience learning to register a .tech domain and link it with our HTML and CSS code.",https://academath.tech/
Best .Tech Domain Name,Academath,https://revolutionuc2024.devpost.com/submissions/484417-academath,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 14:39:06,"Inspiration As students who have previously struggled with learning the beginning concepts of calculus, we wanted to create a platform that would alleviate this frequent steep learning curve among newer learners.

What it does This platform was intended to prompt the user about the different beginning topics that are taught in calculus. These topics are limits, derivatives, integrals, and Riemann Sums. The online learning platform prompts the user questions related to the different topics mentioned above, and generates questions depending on the difficulty of the user's choosing. If the user completes a certain number of questions, they are rewarded with either a bronze, silver, gold or platinum level, depending on the difficulty of their choosing, with bronze being the lowest difficulty, and platinum being the highest difficulty.

How we built it There are multiple layers to the learning platform. Starting with the ""back-end"" side of the platform. For this layer of the learning website, we used python to prompt the user the section they wish to learn about, and choose their difficulty.  We primarily used GitHub Pages to run the web service, and used a .tech domain. Primarily, the was made through JavaScript, CSS, and HTML, along with PyScript.

Challenges we ran into While designing and building our learning platform, we ran into a lot of issues concerning the connection between the ""front-end"" and ""back-end"" layer of our learning platform. Due the variety of different languages used for the ""front-end"" and ""back-end"" of our learning platform, there were various number of issues concerning the conversion of code. For instance, because our ""back-end"" was coded using javascript and python, while the ""front-end"" utilized languages such as HTML and CSS, the translation and communication between the languages was difficult and confusing. Py-script was used to facilitate connection between these various languages, however, due to our lack of expertise in the said language, it lengthened the design process.

Accomplishments that we're proud of Launching the website with the use of GitHub and familiarizing ourselves with GitHub.

What we learned We learned how to py-script, GitHub, and the connections domain names have to GitHub.

What's next for Academath Fine tuning the website, which includes the actual ""Play"" function of the website. Learning and getting familiarized with GitHub and py-script in order to improve the efficiency and accuracy of the website.
",https://academath.tech/,https://youtu.be/lihwBNhlZ9I,"html, css, py-script, python, .tech, javascript",,University of Cincinnati,3,267,University of Cincinnati,"We used GitHub's website hosting service GitHub Pages. Since we did not have very in depth knowledge in GitHub, it was a great learning experience to get familiar with repositories and useful terminal commands. It was also a constructive experience learning to register a .tech domain and link it with our HTML and CSS code.",https://academath.tech/
"",Collaborative Design,"",Draft,Pending,Project overview,02/24/2024 14:40:06,"","",,"",,University of Cincinnati,0,"","","",""
Best Design Hack,CloseTalk,https://revolutionuc2024.devpost.com/submissions/484428-closetalk,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:02:26,"Inspiration

We have often found ourselves waiting in long lines for our favorite movies or at the airport. Wouldn't it be fun to complain about it together anonymously. The inspiration for our app comes from the desire to foster connections among people in proximity without compromising their privacy. In today's digital age, where sharing personal information online can lead to privacy concerns, our solution offers a safe haven. It's designed for individuals who want to engage in conversations, share ideas, or collaborate on projects without the need to exchange phone numbers or social media profiles. This app is a testament to the belief that privacy and connectivity can coexist, providing a platform for users to connect on their terms, whether for leisure or professional purposes.

What it does

Our innovative app seamlessly connects individuals in close proximity without the need for exchanging personal contact details. Utilizing Bluetooth technology and NearBy protocol, it creates a secure and anonymous network where users can engage in conversations, share ideas, or collaborate on various projects.  *This also means that our app can function completely without an Internet connection! * The essence of the app lies in its ability to maintain user anonymity, making it an ideal platform for those who are cautious about privacy yet eager to connect with others nearby. It has also use-cases for people suffering from severe Agoraphobia (social anxiety) and enables them with a platform that gently navigate social connections

How we built it

We have used Flutter to build a cross platform app which could run natively on Android and iOS. We used Hive which is on-device database, to store the chat related information on the device of the user. We thus, eliminate the need of backend server and we are not storing any chat details on the cloud. Furthermore our data is encrypted by AES256 enabling further security on our application. We use NearBy Protocol to establish and facilitate communications between the devices.

Challenges we ran into

Our biggest challenge was the learning curve for Flutter. Most of our team was experienced with Web Development, so switching to Mobile Development was a bit daunting but a fun experience. We faced some issues while gettting the NearBy protocol to work for real devices

Accomplishments that we're proud of

We are really proud of the UI designs we created and the seamless flow integration we created for different screens. We are super proud of how we were able to deliver an end to end running app. We followed strict guidelines over the structure and quality of the code. 

What we learned

This Hackathon really helped us learn a lot about Flutter and Mobile App Development in general. It also gave us a good experience of collaborating as a team and brainstorming ideas. 

What's next for CloseTalk

Our next step is to create Global Chatroom for people to create groups and converse. We are also planning to design a notification screen for seeing past connects that come in range yet again.
",https://github.com/RyanDsilva/closetalk,https://vimeo.com/916443181?share=copy,"flutter, hive, bluetooth, wifi, encrypted-storage",,"other, Purdue University",3,245-11,Purdue University,The tech stack that we focussed for our development was Flutter. We were able to develop both iOS and Android apps through a single code base. We used NearBy Connections protocol for setting up the communication between the sender and receiver. We edited this response for more custom and fined grained control over the application. We feel the native support that flutter provides coupled with the strong community support really makes this framework one of the best in the industry for the domain of cross platform development.,""
Best Social Impact Hack,CloseTalk,https://revolutionuc2024.devpost.com/submissions/484428-closetalk,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:02:26,"Inspiration

We have often found ourselves waiting in long lines for our favorite movies or at the airport. Wouldn't it be fun to complain about it together anonymously. The inspiration for our app comes from the desire to foster connections among people in proximity without compromising their privacy. In today's digital age, where sharing personal information online can lead to privacy concerns, our solution offers a safe haven. It's designed for individuals who want to engage in conversations, share ideas, or collaborate on projects without the need to exchange phone numbers or social media profiles. This app is a testament to the belief that privacy and connectivity can coexist, providing a platform for users to connect on their terms, whether for leisure or professional purposes.

What it does

Our innovative app seamlessly connects individuals in close proximity without the need for exchanging personal contact details. Utilizing Bluetooth technology and NearBy protocol, it creates a secure and anonymous network where users can engage in conversations, share ideas, or collaborate on various projects.  *This also means that our app can function completely without an Internet connection! * The essence of the app lies in its ability to maintain user anonymity, making it an ideal platform for those who are cautious about privacy yet eager to connect with others nearby. It has also use-cases for people suffering from severe Agoraphobia (social anxiety) and enables them with a platform that gently navigate social connections

How we built it

We have used Flutter to build a cross platform app which could run natively on Android and iOS. We used Hive which is on-device database, to store the chat related information on the device of the user. We thus, eliminate the need of backend server and we are not storing any chat details on the cloud. Furthermore our data is encrypted by AES256 enabling further security on our application. We use NearBy Protocol to establish and facilitate communications between the devices.

Challenges we ran into

Our biggest challenge was the learning curve for Flutter. Most of our team was experienced with Web Development, so switching to Mobile Development was a bit daunting but a fun experience. We faced some issues while gettting the NearBy protocol to work for real devices

Accomplishments that we're proud of

We are really proud of the UI designs we created and the seamless flow integration we created for different screens. We are super proud of how we were able to deliver an end to end running app. We followed strict guidelines over the structure and quality of the code. 

What we learned

This Hackathon really helped us learn a lot about Flutter and Mobile App Development in general. It also gave us a good experience of collaborating as a team and brainstorming ideas. 

What's next for CloseTalk

Our next step is to create Global Chatroom for people to create groups and converse. We are also planning to design a notification screen for seeing past connects that come in range yet again.
",https://github.com/RyanDsilva/closetalk,https://vimeo.com/916443181?share=copy,"flutter, hive, bluetooth, wifi, encrypted-storage",,"other, Purdue University",3,245-11,Purdue University,The tech stack that we focussed for our development was Flutter. We were able to develop both iOS and Android apps through a single code base. We used NearBy Connections protocol for setting up the communication between the sender and receiver. We edited this response for more custom and fined grained control over the application. We feel the native support that flutter provides coupled with the strong community support really makes this framework one of the best in the industry for the domain of cross platform development.,""
"Best ""Useless"" Hack",CloseTalk,https://revolutionuc2024.devpost.com/submissions/484428-closetalk,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:02:26,"Inspiration

We have often found ourselves waiting in long lines for our favorite movies or at the airport. Wouldn't it be fun to complain about it together anonymously. The inspiration for our app comes from the desire to foster connections among people in proximity without compromising their privacy. In today's digital age, where sharing personal information online can lead to privacy concerns, our solution offers a safe haven. It's designed for individuals who want to engage in conversations, share ideas, or collaborate on projects without the need to exchange phone numbers or social media profiles. This app is a testament to the belief that privacy and connectivity can coexist, providing a platform for users to connect on their terms, whether for leisure or professional purposes.

What it does

Our innovative app seamlessly connects individuals in close proximity without the need for exchanging personal contact details. Utilizing Bluetooth technology and NearBy protocol, it creates a secure and anonymous network where users can engage in conversations, share ideas, or collaborate on various projects.  *This also means that our app can function completely without an Internet connection! * The essence of the app lies in its ability to maintain user anonymity, making it an ideal platform for those who are cautious about privacy yet eager to connect with others nearby. It has also use-cases for people suffering from severe Agoraphobia (social anxiety) and enables them with a platform that gently navigate social connections

How we built it

We have used Flutter to build a cross platform app which could run natively on Android and iOS. We used Hive which is on-device database, to store the chat related information on the device of the user. We thus, eliminate the need of backend server and we are not storing any chat details on the cloud. Furthermore our data is encrypted by AES256 enabling further security on our application. We use NearBy Protocol to establish and facilitate communications between the devices.

Challenges we ran into

Our biggest challenge was the learning curve for Flutter. Most of our team was experienced with Web Development, so switching to Mobile Development was a bit daunting but a fun experience. We faced some issues while gettting the NearBy protocol to work for real devices

Accomplishments that we're proud of

We are really proud of the UI designs we created and the seamless flow integration we created for different screens. We are super proud of how we were able to deliver an end to end running app. We followed strict guidelines over the structure and quality of the code. 

What we learned

This Hackathon really helped us learn a lot about Flutter and Mobile App Development in general. It also gave us a good experience of collaborating as a team and brainstorming ideas. 

What's next for CloseTalk

Our next step is to create Global Chatroom for people to create groups and converse. We are also planning to design a notification screen for seeing past connects that come in range yet again.
",https://github.com/RyanDsilva/closetalk,https://vimeo.com/916443181?share=copy,"flutter, hive, bluetooth, wifi, encrypted-storage",,"other, Purdue University",3,245-11,Purdue University,The tech stack that we focussed for our development was Flutter. We were able to develop both iOS and Android apps through a single code base. We used NearBy Connections protocol for setting up the communication between the sender and receiver. We edited this response for more custom and fined grained control over the application. We feel the native support that flutter provides coupled with the strong community support really makes this framework one of the best in the industry for the domain of cross platform development.,""
Best Educational Hack,SafeSpace,https://revolutionuc2024.devpost.com/submissions/484451-safespace,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:31:03,"Inspiration

My best friend spent 13 years of her life in an abusive home, where she had no ability to escape or leave because of financial restrictions. When she opened up to me about her experiences, I was devastated that something could happen to someone I loved so much, but had no control over. This app was an idea that we came up with to make sure that nothing even similar would happen to anyone else - this app is our measure taken toward making sure that we are able to properly communicate and provide survivors with the resources they need.

What it does

The app has 6 different functionalities - It has the ability to be able to anonymously report any crime or violent action to all police stations and hospitals within a 5 mile radius of the User's current location. Another view has all resources the User could possibly need in order to seek help or any next steps in order to get help or advice for their situation. Our app also has a functional ChatBot that responds to prompts issued by the User and provides them with 24/7 access to this resource in case their access to other resources are taken away in their situations. It also gives the User access to a map that doesn't track their history or keep a copy of it and provides tailored results of important landmarks or areas they can seek refuge from their abuser(s). Another View is the option to create a personalized plan for safety with predetermined prompts and the ability to store and re-visit their responses. The last feature that the app has is to document any evidence or record of events that took place and when they did in order to keep a paper-less, untraceable log of events to re-visit if needed later.

How we built it

I made this app using XCode and used Swift UI as a programming language in order to create an interactable User Interface that is simple enough for even a child to handle, if needed.

Challenges we ran into

I had issues figuring out how to request the location of the User because it was not working, and crashed the whole program multiple times, but after sitting for a couple of hours and working through the bugs, I was finally able to code all situations of whether the location request was accepted or denied.

Accomplishments that we're proud of

I am extremely proud of 2 things - first, the ChatBot, because it took hours getting the responses and layout to look perfect and I was extremely relieved when I finally found the solution! And my favorite feature is the apps ability to seem like a regular Makeup app, but once opened and the first view bypassed, then the real functionality of the app is shown.

What we learned

This project helped me learn how many people are so affected by such a horrible situation, and how an app with collated resources can help them realize the steps needed to be taken to their eventual freedom so they don't feel stuck in their horrible situations.

What's next for SafeSpace

I want to be able to make the ChatBot fully functional and allow Users' to be able to ask any questions that also aren't related just to their safety in order for them to get another opinion.
",https://github.com/gaurajha/Sephora.git,https://www.youtube.com/watch?v=Nypq_3IfBAk,"jsondecoder, jsonencoder, swift, swiftui, uikit, urlsession, xcode",,Lynbrook High School,0,232-2,De Anza College,It was so fun and exciting!,""
Best Design Hack,SafeSpace,https://revolutionuc2024.devpost.com/submissions/484451-safespace,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:31:03,"Inspiration

My best friend spent 13 years of her life in an abusive home, where she had no ability to escape or leave because of financial restrictions. When she opened up to me about her experiences, I was devastated that something could happen to someone I loved so much, but had no control over. This app was an idea that we came up with to make sure that nothing even similar would happen to anyone else - this app is our measure taken toward making sure that we are able to properly communicate and provide survivors with the resources they need.

What it does

The app has 6 different functionalities - It has the ability to be able to anonymously report any crime or violent action to all police stations and hospitals within a 5 mile radius of the User's current location. Another view has all resources the User could possibly need in order to seek help or any next steps in order to get help or advice for their situation. Our app also has a functional ChatBot that responds to prompts issued by the User and provides them with 24/7 access to this resource in case their access to other resources are taken away in their situations. It also gives the User access to a map that doesn't track their history or keep a copy of it and provides tailored results of important landmarks or areas they can seek refuge from their abuser(s). Another View is the option to create a personalized plan for safety with predetermined prompts and the ability to store and re-visit their responses. The last feature that the app has is to document any evidence or record of events that took place and when they did in order to keep a paper-less, untraceable log of events to re-visit if needed later.

How we built it

I made this app using XCode and used Swift UI as a programming language in order to create an interactable User Interface that is simple enough for even a child to handle, if needed.

Challenges we ran into

I had issues figuring out how to request the location of the User because it was not working, and crashed the whole program multiple times, but after sitting for a couple of hours and working through the bugs, I was finally able to code all situations of whether the location request was accepted or denied.

Accomplishments that we're proud of

I am extremely proud of 2 things - first, the ChatBot, because it took hours getting the responses and layout to look perfect and I was extremely relieved when I finally found the solution! And my favorite feature is the apps ability to seem like a regular Makeup app, but once opened and the first view bypassed, then the real functionality of the app is shown.

What we learned

This project helped me learn how many people are so affected by such a horrible situation, and how an app with collated resources can help them realize the steps needed to be taken to their eventual freedom so they don't feel stuck in their horrible situations.

What's next for SafeSpace

I want to be able to make the ChatBot fully functional and allow Users' to be able to ask any questions that also aren't related just to their safety in order for them to get another opinion.
",https://github.com/gaurajha/Sephora.git,https://www.youtube.com/watch?v=Nypq_3IfBAk,"jsondecoder, jsonencoder, swift, swiftui, uikit, urlsession, xcode",,Lynbrook High School,0,232-2,De Anza College,It was so fun and exciting!,""
Best Social Impact Hack,SafeSpace,https://revolutionuc2024.devpost.com/submissions/484451-safespace,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:31:03,"Inspiration

My best friend spent 13 years of her life in an abusive home, where she had no ability to escape or leave because of financial restrictions. When she opened up to me about her experiences, I was devastated that something could happen to someone I loved so much, but had no control over. This app was an idea that we came up with to make sure that nothing even similar would happen to anyone else - this app is our measure taken toward making sure that we are able to properly communicate and provide survivors with the resources they need.

What it does

The app has 6 different functionalities - It has the ability to be able to anonymously report any crime or violent action to all police stations and hospitals within a 5 mile radius of the User's current location. Another view has all resources the User could possibly need in order to seek help or any next steps in order to get help or advice for their situation. Our app also has a functional ChatBot that responds to prompts issued by the User and provides them with 24/7 access to this resource in case their access to other resources are taken away in their situations. It also gives the User access to a map that doesn't track their history or keep a copy of it and provides tailored results of important landmarks or areas they can seek refuge from their abuser(s). Another View is the option to create a personalized plan for safety with predetermined prompts and the ability to store and re-visit their responses. The last feature that the app has is to document any evidence or record of events that took place and when they did in order to keep a paper-less, untraceable log of events to re-visit if needed later.

How we built it

I made this app using XCode and used Swift UI as a programming language in order to create an interactable User Interface that is simple enough for even a child to handle, if needed.

Challenges we ran into

I had issues figuring out how to request the location of the User because it was not working, and crashed the whole program multiple times, but after sitting for a couple of hours and working through the bugs, I was finally able to code all situations of whether the location request was accepted or denied.

Accomplishments that we're proud of

I am extremely proud of 2 things - first, the ChatBot, because it took hours getting the responses and layout to look perfect and I was extremely relieved when I finally found the solution! And my favorite feature is the apps ability to seem like a regular Makeup app, but once opened and the first view bypassed, then the real functionality of the app is shown.

What we learned

This project helped me learn how many people are so affected by such a horrible situation, and how an app with collated resources can help them realize the steps needed to be taken to their eventual freedom so they don't feel stuck in their horrible situations.

What's next for SafeSpace

I want to be able to make the ChatBot fully functional and allow Users' to be able to ask any questions that also aren't related just to their safety in order for them to get another opinion.
",https://github.com/gaurajha/Sephora.git,https://www.youtube.com/watch?v=Nypq_3IfBAk,"jsondecoder, jsonencoder, swift, swiftui, uikit, urlsession, xcode",,Lynbrook High School,0,232-2,De Anza College,It was so fun and exciting!,""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),SafeSpace,https://revolutionuc2024.devpost.com/submissions/484451-safespace,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:31:03,"Inspiration

My best friend spent 13 years of her life in an abusive home, where she had no ability to escape or leave because of financial restrictions. When she opened up to me about her experiences, I was devastated that something could happen to someone I loved so much, but had no control over. This app was an idea that we came up with to make sure that nothing even similar would happen to anyone else - this app is our measure taken toward making sure that we are able to properly communicate and provide survivors with the resources they need.

What it does

The app has 6 different functionalities - It has the ability to be able to anonymously report any crime or violent action to all police stations and hospitals within a 5 mile radius of the User's current location. Another view has all resources the User could possibly need in order to seek help or any next steps in order to get help or advice for their situation. Our app also has a functional ChatBot that responds to prompts issued by the User and provides them with 24/7 access to this resource in case their access to other resources are taken away in their situations. It also gives the User access to a map that doesn't track their history or keep a copy of it and provides tailored results of important landmarks or areas they can seek refuge from their abuser(s). Another View is the option to create a personalized plan for safety with predetermined prompts and the ability to store and re-visit their responses. The last feature that the app has is to document any evidence or record of events that took place and when they did in order to keep a paper-less, untraceable log of events to re-visit if needed later.

How we built it

I made this app using XCode and used Swift UI as a programming language in order to create an interactable User Interface that is simple enough for even a child to handle, if needed.

Challenges we ran into

I had issues figuring out how to request the location of the User because it was not working, and crashed the whole program multiple times, but after sitting for a couple of hours and working through the bugs, I was finally able to code all situations of whether the location request was accepted or denied.

Accomplishments that we're proud of

I am extremely proud of 2 things - first, the ChatBot, because it took hours getting the responses and layout to look perfect and I was extremely relieved when I finally found the solution! And my favorite feature is the apps ability to seem like a regular Makeup app, but once opened and the first view bypassed, then the real functionality of the app is shown.

What we learned

This project helped me learn how many people are so affected by such a horrible situation, and how an app with collated resources can help them realize the steps needed to be taken to their eventual freedom so they don't feel stuck in their horrible situations.

What's next for SafeSpace

I want to be able to make the ChatBot fully functional and allow Users' to be able to ask any questions that also aren't related just to their safety in order for them to get another opinion.
",https://github.com/gaurajha/Sephora.git,https://www.youtube.com/watch?v=Nypq_3IfBAk,"jsondecoder, jsonencoder, swift, swiftui, uikit, urlsession, xcode",,Lynbrook High School,0,232-2,De Anza College,It was so fun and exciting!,""
EnableUC Challenge,SafeSpace,https://revolutionuc2024.devpost.com/submissions/484451-safespace,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 15:31:03,"Inspiration

My best friend spent 13 years of her life in an abusive home, where she had no ability to escape or leave because of financial restrictions. When she opened up to me about her experiences, I was devastated that something could happen to someone I loved so much, but had no control over. This app was an idea that we came up with to make sure that nothing even similar would happen to anyone else - this app is our measure taken toward making sure that we are able to properly communicate and provide survivors with the resources they need.

What it does

The app has 6 different functionalities - It has the ability to be able to anonymously report any crime or violent action to all police stations and hospitals within a 5 mile radius of the User's current location. Another view has all resources the User could possibly need in order to seek help or any next steps in order to get help or advice for their situation. Our app also has a functional ChatBot that responds to prompts issued by the User and provides them with 24/7 access to this resource in case their access to other resources are taken away in their situations. It also gives the User access to a map that doesn't track their history or keep a copy of it and provides tailored results of important landmarks or areas they can seek refuge from their abuser(s). Another View is the option to create a personalized plan for safety with predetermined prompts and the ability to store and re-visit their responses. The last feature that the app has is to document any evidence or record of events that took place and when they did in order to keep a paper-less, untraceable log of events to re-visit if needed later.

How we built it

I made this app using XCode and used Swift UI as a programming language in order to create an interactable User Interface that is simple enough for even a child to handle, if needed.

Challenges we ran into

I had issues figuring out how to request the location of the User because it was not working, and crashed the whole program multiple times, but after sitting for a couple of hours and working through the bugs, I was finally able to code all situations of whether the location request was accepted or denied.

Accomplishments that we're proud of

I am extremely proud of 2 things - first, the ChatBot, because it took hours getting the responses and layout to look perfect and I was extremely relieved when I finally found the solution! And my favorite feature is the apps ability to seem like a regular Makeup app, but once opened and the first view bypassed, then the real functionality of the app is shown.

What we learned

This project helped me learn how many people are so affected by such a horrible situation, and how an app with collated resources can help them realize the steps needed to be taken to their eventual freedom so they don't feel stuck in their horrible situations.

What's next for SafeSpace

I want to be able to make the ChatBot fully functional and allow Users' to be able to ask any questions that also aren't related just to their safety in order for them to get another opinion.
",https://github.com/gaurajha/Sephora.git,https://www.youtube.com/watch?v=Nypq_3IfBAk,"jsondecoder, jsonencoder, swift, swiftui, uikit, urlsession, xcode",,Lynbrook High School,0,232-2,De Anza College,It was so fun and exciting!,""
Best Design Hack,Scribble Beasts,https://revolutionuc2024.devpost.com/submissions/484480-scribble-beasts,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:11:38,"Inspiration

I orginally made this as an analog drawing game for a Game Design class at UC. I had a lot of fun making a playtesting this game. With all the positive feedback it got, I wanted to make it into a digital game akin to Jackbox.tv

What it does

Hosts a server to play Scribble Beasts

How we built it

Scribble Beasts relies heavily on websockets to transfer information between clients.
Node.js hosts the backend, managing websocket calls within.

Challenges we ran into

I had never used Websockets before and found it a great challenge. I am now very knowledgable about the ins and outs of setting up a node.js backend as well.

Accomplishments that we're proud of

Getting a working room system with clean form validation.

What we learned

How to set up client-server infastructure centered around websockets.

What's next for Scribble Beasts

Completing all rounds of the game and making it a fully playable copy of the analog.
","https://replit.com/@Jasmine-Mogadam/scribble-beasts-1, https://github.com/Jasmine-Mogadam/scribble-beasts",https://youtu.be/aK24X3BRb08,"node.js, html5, html, css, scss, websockets",,University of Cincinnati,0,Lobby 2-23,University of Cincinnati,"Websockets, Node.js",""
"Best ""Useless"" Hack",Scribble Beasts,https://revolutionuc2024.devpost.com/submissions/484480-scribble-beasts,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:11:38,"Inspiration

I orginally made this as an analog drawing game for a Game Design class at UC. I had a lot of fun making a playtesting this game. With all the positive feedback it got, I wanted to make it into a digital game akin to Jackbox.tv

What it does

Hosts a server to play Scribble Beasts

How we built it

Scribble Beasts relies heavily on websockets to transfer information between clients.
Node.js hosts the backend, managing websocket calls within.

Challenges we ran into

I had never used Websockets before and found it a great challenge. I am now very knowledgable about the ins and outs of setting up a node.js backend as well.

Accomplishments that we're proud of

Getting a working room system with clean form validation.

What we learned

How to set up client-server infastructure centered around websockets.

What's next for Scribble Beasts

Completing all rounds of the game and making it a fully playable copy of the analog.
","https://replit.com/@Jasmine-Mogadam/scribble-beasts-1, https://github.com/Jasmine-Mogadam/scribble-beasts",https://youtu.be/aK24X3BRb08,"node.js, html5, html, css, scss, websockets",,University of Cincinnati,0,Lobby 2-23,University of Cincinnati,"Websockets, Node.js",""
"Best ""Useless"" Hack",Audio Visualizer,https://revolutionuc2024.devpost.com/submissions/484489-audio-visualizer,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:30:05,"Inspiration

I think Windows XP's audio visualizer built into Windows Media Player is the coolest thing ever.

What it does

My audio visualizer will provide a set of different visualizations for any audio file in most codecs (with the notable exception of MP3). Currently, I have a visualization that shows the volume of frequencies, and an oscilloscope visualization.

How we built it

I like to torture myself with the C programming language for fun. This application is written in C using FFTW3 (which this is my first time using) and Allegro 5 (which I use to simplify audio loading and graphics drawing).

Challenges we ran into

I did not know anything about the Fourier transform, which is necessary to transform audio from the time-domain to the frequency domain.

Accomplishments that we're proud of

I learned enough about the Fourier transform to get started.

What we learned

Signal processing should be a required topic for computer science students! 

What's next for Audio Visualizer

I will work out full effects...
",https://github.com/chruffins/audio-visualizer,https://youtu.be/Ij7Nya-xG_U,"c, fftw, allegro5",,University of Cincinnati,0,N/A (I'm currently home right now.),University of Cincinnati,"FFTW - Very convenient FFT library!
Allegro 5 - My beloved game programming library...",""
Best Educational Hack,PhishEye,https://revolutionuc2024.devpost.com/submissions/484490-phisheye,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:34:57,"Inspiration

Phishing attacks are one of the most common reasons for data breaches across multiple industries. Phishing attacks primarily try to exploit human error. We wanted to explore a possible solution by utilizing breakthrough AI technology to both detect phishing attempts with higher accuracy than the human eye and educate internet users for further prevention. 

What it does

PhishEye will leverage existing detection systems and AI learning to catch even the smallest signs of phishing in e-mails. On top of that, the AI would warn the user of what it detected with both visual indicators and explanation of why it flagged that part of the e-mail. Because of how common and dangerous phishing attacks are, we want to implement an educational aspect to inform users of the dangers that may go unnoticed when using their e-mail. That way, they can become more aware of phishing attempts on themselves and others. We hope that with further development and widespread implementation that we can shift the cyber kill chain further towards the point of origin and promote a higher level of phishing-awareness across the internet. 

How we are building it

We created an API that extracts the source code of an e-mail for AI analysis. We then plan to train an AI model with both safe and dangerous e-mails so it can decipher whether an e-mail is safe and what signs to look for and flag as dangerous. The training process would be carefully curated to ensure that the AI learns and develops instead of just processing data as well as ensuring that bad habits don't form as, much like humans, bad habits die hard. This AI would then highlight pieces of the e-mail that were flagged as dangerous and give a brief description as to why it flagged the information. The interface would be user-friendly and easily legible providing accessibility for all possible users.

Challenges we have ran into

As a group, we started this endeavor highly inexperienced with AI technology, as is most of the world. We also had little experience with APIs aside from base level knowledge. While we couldn't fully develop the full AI system due to time constraints, we still wanted to challenge ourselves and develop a proof of concept for a solution to a problem we were truly passionate about. By leveraging the power of AI and incorporating it with concepts we were familiar with, we came up with a clear roadmap that gives a sneak peek at the future of phishing prevention.

Accomplishments that we're proud of so far

We successfully created an API that extracts the source code of selected e-mails and returns that data as plaintext to be utilized for training an AI model. We also came up with some of the business aspects of this concept such as a logo and website branding, including getting our own domain to utilize for a website. We are also proud of the effort each of us have put towards PhishEye and how it has turned out in the limited time we have at RevolutionUC. 

What we have learned

First and foremost, we learned how powerful AI can be in aiding with the development process and got a sneak peek at how it can be used to develop the future of the world around us. Through our utilization and witnessing others utilize the same technology, we have a better concept of what AI does and can do for the world. We also got a great insight as to how APIs interact with other applications and how, when implemented correctly, they can power some of the most useful and revolutionary systems of today. We also learned how quickly an idea can develop into a reality with the right mindset. Going from limited knowledge of the technologies behind our product, to having a proof of concept with an API demo within the span of 24 hours is something we never thought we could do prior to RevolutionUC. However, we set our minds and our bodies to our concept and it really came out as something we are proud of. Development of new and exciting concepts like PhishEye is extremely fun and gave us confidence and desire to further develop concepts as possible business ventures in the future. 

What's next for PhishEye

We plan on fully developing this concept through training of the AI model with phishing examples ranging from common, easy to spot phishing, to indistinguishable from legitimate messages. Hopefully, through careful training and consistent results, we will be able to present the fully-fledged PhishEye AI to major e-mail services such as Gmail and Outlook (Google and Microsoft). We also want to make this design accessible to all internet mail services so everyone can utilize this technology. We want to ensure as many people are able to utilize this revolutionary technology as possible and we will strive to produce and upkeep the best end-product we can. Through PhishEye, the future of internet security looks_ picture perfect.
","",https://youtu.be/ZCDxatl0rig,"chatgpt, python, google-cloud, visual-studio, canva, wix, get.tech, gmail, trinket, chrome-developer-tools",,University of Cincinnati,2,Lobby2-20,University of Cincinnati,"ChatGPT - This weekend we, along with many other groups, utilized ChatGPT to aid us in our project. It opened our eyes to how powerful of a tool AI is and how it can be used to develop things we could have never imagined. It also was reliable as it gave our group a lot of information and helped fix some of our code when we couldn't figure it out. We are excited to see what the future holds with AI and hope that we can be a part of it!",phisheye.tech
Best Implementation of an LLM or Other Generative AI Model (CincyTech),PhishEye,https://revolutionuc2024.devpost.com/submissions/484490-phisheye,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:34:57,"Inspiration

Phishing attacks are one of the most common reasons for data breaches across multiple industries. Phishing attacks primarily try to exploit human error. We wanted to explore a possible solution by utilizing breakthrough AI technology to both detect phishing attempts with higher accuracy than the human eye and educate internet users for further prevention. 

What it does

PhishEye will leverage existing detection systems and AI learning to catch even the smallest signs of phishing in e-mails. On top of that, the AI would warn the user of what it detected with both visual indicators and explanation of why it flagged that part of the e-mail. Because of how common and dangerous phishing attacks are, we want to implement an educational aspect to inform users of the dangers that may go unnoticed when using their e-mail. That way, they can become more aware of phishing attempts on themselves and others. We hope that with further development and widespread implementation that we can shift the cyber kill chain further towards the point of origin and promote a higher level of phishing-awareness across the internet. 

How we are building it

We created an API that extracts the source code of an e-mail for AI analysis. We then plan to train an AI model with both safe and dangerous e-mails so it can decipher whether an e-mail is safe and what signs to look for and flag as dangerous. The training process would be carefully curated to ensure that the AI learns and develops instead of just processing data as well as ensuring that bad habits don't form as, much like humans, bad habits die hard. This AI would then highlight pieces of the e-mail that were flagged as dangerous and give a brief description as to why it flagged the information. The interface would be user-friendly and easily legible providing accessibility for all possible users.

Challenges we have ran into

As a group, we started this endeavor highly inexperienced with AI technology, as is most of the world. We also had little experience with APIs aside from base level knowledge. While we couldn't fully develop the full AI system due to time constraints, we still wanted to challenge ourselves and develop a proof of concept for a solution to a problem we were truly passionate about. By leveraging the power of AI and incorporating it with concepts we were familiar with, we came up with a clear roadmap that gives a sneak peek at the future of phishing prevention.

Accomplishments that we're proud of so far

We successfully created an API that extracts the source code of selected e-mails and returns that data as plaintext to be utilized for training an AI model. We also came up with some of the business aspects of this concept such as a logo and website branding, including getting our own domain to utilize for a website. We are also proud of the effort each of us have put towards PhishEye and how it has turned out in the limited time we have at RevolutionUC. 

What we have learned

First and foremost, we learned how powerful AI can be in aiding with the development process and got a sneak peek at how it can be used to develop the future of the world around us. Through our utilization and witnessing others utilize the same technology, we have a better concept of what AI does and can do for the world. We also got a great insight as to how APIs interact with other applications and how, when implemented correctly, they can power some of the most useful and revolutionary systems of today. We also learned how quickly an idea can develop into a reality with the right mindset. Going from limited knowledge of the technologies behind our product, to having a proof of concept with an API demo within the span of 24 hours is something we never thought we could do prior to RevolutionUC. However, we set our minds and our bodies to our concept and it really came out as something we are proud of. Development of new and exciting concepts like PhishEye is extremely fun and gave us confidence and desire to further develop concepts as possible business ventures in the future. 

What's next for PhishEye

We plan on fully developing this concept through training of the AI model with phishing examples ranging from common, easy to spot phishing, to indistinguishable from legitimate messages. Hopefully, through careful training and consistent results, we will be able to present the fully-fledged PhishEye AI to major e-mail services such as Gmail and Outlook (Google and Microsoft). We also want to make this design accessible to all internet mail services so everyone can utilize this technology. We want to ensure as many people are able to utilize this revolutionary technology as possible and we will strive to produce and upkeep the best end-product we can. Through PhishEye, the future of internet security looks_ picture perfect.
","",https://youtu.be/ZCDxatl0rig,"chatgpt, python, google-cloud, visual-studio, canva, wix, get.tech, gmail, trinket, chrome-developer-tools",,University of Cincinnati,2,Lobby2-20,University of Cincinnati,"ChatGPT - This weekend we, along with many other groups, utilized ChatGPT to aid us in our project. It opened our eyes to how powerful of a tool AI is and how it can be used to develop things we could have never imagined. It also was reliable as it gave our group a lot of information and helped fix some of our code when we couldn't figure it out. We are excited to see what the future holds with AI and hope that we can be a part of it!",phisheye.tech
Best Product Market Fit (Center for Entrepreneurship),PhishEye,https://revolutionuc2024.devpost.com/submissions/484490-phisheye,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:34:57,"Inspiration

Phishing attacks are one of the most common reasons for data breaches across multiple industries. Phishing attacks primarily try to exploit human error. We wanted to explore a possible solution by utilizing breakthrough AI technology to both detect phishing attempts with higher accuracy than the human eye and educate internet users for further prevention. 

What it does

PhishEye will leverage existing detection systems and AI learning to catch even the smallest signs of phishing in e-mails. On top of that, the AI would warn the user of what it detected with both visual indicators and explanation of why it flagged that part of the e-mail. Because of how common and dangerous phishing attacks are, we want to implement an educational aspect to inform users of the dangers that may go unnoticed when using their e-mail. That way, they can become more aware of phishing attempts on themselves and others. We hope that with further development and widespread implementation that we can shift the cyber kill chain further towards the point of origin and promote a higher level of phishing-awareness across the internet. 

How we are building it

We created an API that extracts the source code of an e-mail for AI analysis. We then plan to train an AI model with both safe and dangerous e-mails so it can decipher whether an e-mail is safe and what signs to look for and flag as dangerous. The training process would be carefully curated to ensure that the AI learns and develops instead of just processing data as well as ensuring that bad habits don't form as, much like humans, bad habits die hard. This AI would then highlight pieces of the e-mail that were flagged as dangerous and give a brief description as to why it flagged the information. The interface would be user-friendly and easily legible providing accessibility for all possible users.

Challenges we have ran into

As a group, we started this endeavor highly inexperienced with AI technology, as is most of the world. We also had little experience with APIs aside from base level knowledge. While we couldn't fully develop the full AI system due to time constraints, we still wanted to challenge ourselves and develop a proof of concept for a solution to a problem we were truly passionate about. By leveraging the power of AI and incorporating it with concepts we were familiar with, we came up with a clear roadmap that gives a sneak peek at the future of phishing prevention.

Accomplishments that we're proud of so far

We successfully created an API that extracts the source code of selected e-mails and returns that data as plaintext to be utilized for training an AI model. We also came up with some of the business aspects of this concept such as a logo and website branding, including getting our own domain to utilize for a website. We are also proud of the effort each of us have put towards PhishEye and how it has turned out in the limited time we have at RevolutionUC. 

What we have learned

First and foremost, we learned how powerful AI can be in aiding with the development process and got a sneak peek at how it can be used to develop the future of the world around us. Through our utilization and witnessing others utilize the same technology, we have a better concept of what AI does and can do for the world. We also got a great insight as to how APIs interact with other applications and how, when implemented correctly, they can power some of the most useful and revolutionary systems of today. We also learned how quickly an idea can develop into a reality with the right mindset. Going from limited knowledge of the technologies behind our product, to having a proof of concept with an API demo within the span of 24 hours is something we never thought we could do prior to RevolutionUC. However, we set our minds and our bodies to our concept and it really came out as something we are proud of. Development of new and exciting concepts like PhishEye is extremely fun and gave us confidence and desire to further develop concepts as possible business ventures in the future. 

What's next for PhishEye

We plan on fully developing this concept through training of the AI model with phishing examples ranging from common, easy to spot phishing, to indistinguishable from legitimate messages. Hopefully, through careful training and consistent results, we will be able to present the fully-fledged PhishEye AI to major e-mail services such as Gmail and Outlook (Google and Microsoft). We also want to make this design accessible to all internet mail services so everyone can utilize this technology. We want to ensure as many people are able to utilize this revolutionary technology as possible and we will strive to produce and upkeep the best end-product we can. Through PhishEye, the future of internet security looks_ picture perfect.
","",https://youtu.be/ZCDxatl0rig,"chatgpt, python, google-cloud, visual-studio, canva, wix, get.tech, gmail, trinket, chrome-developer-tools",,University of Cincinnati,2,Lobby2-20,University of Cincinnati,"ChatGPT - This weekend we, along with many other groups, utilized ChatGPT to aid us in our project. It opened our eyes to how powerful of a tool AI is and how it can be used to develop things we could have never imagined. It also was reliable as it gave our group a lot of information and helped fix some of our code when we couldn't figure it out. We are excited to see what the future holds with AI and hope that we can be a part of it!",phisheye.tech
Best .Tech Domain Name,PhishEye,https://revolutionuc2024.devpost.com/submissions/484490-phisheye,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 17:34:57,"Inspiration

Phishing attacks are one of the most common reasons for data breaches across multiple industries. Phishing attacks primarily try to exploit human error. We wanted to explore a possible solution by utilizing breakthrough AI technology to both detect phishing attempts with higher accuracy than the human eye and educate internet users for further prevention. 

What it does

PhishEye will leverage existing detection systems and AI learning to catch even the smallest signs of phishing in e-mails. On top of that, the AI would warn the user of what it detected with both visual indicators and explanation of why it flagged that part of the e-mail. Because of how common and dangerous phishing attacks are, we want to implement an educational aspect to inform users of the dangers that may go unnoticed when using their e-mail. That way, they can become more aware of phishing attempts on themselves and others. We hope that with further development and widespread implementation that we can shift the cyber kill chain further towards the point of origin and promote a higher level of phishing-awareness across the internet. 

How we are building it

We created an API that extracts the source code of an e-mail for AI analysis. We then plan to train an AI model with both safe and dangerous e-mails so it can decipher whether an e-mail is safe and what signs to look for and flag as dangerous. The training process would be carefully curated to ensure that the AI learns and develops instead of just processing data as well as ensuring that bad habits don't form as, much like humans, bad habits die hard. This AI would then highlight pieces of the e-mail that were flagged as dangerous and give a brief description as to why it flagged the information. The interface would be user-friendly and easily legible providing accessibility for all possible users.

Challenges we have ran into

As a group, we started this endeavor highly inexperienced with AI technology, as is most of the world. We also had little experience with APIs aside from base level knowledge. While we couldn't fully develop the full AI system due to time constraints, we still wanted to challenge ourselves and develop a proof of concept for a solution to a problem we were truly passionate about. By leveraging the power of AI and incorporating it with concepts we were familiar with, we came up with a clear roadmap that gives a sneak peek at the future of phishing prevention.

Accomplishments that we're proud of so far

We successfully created an API that extracts the source code of selected e-mails and returns that data as plaintext to be utilized for training an AI model. We also came up with some of the business aspects of this concept such as a logo and website branding, including getting our own domain to utilize for a website. We are also proud of the effort each of us have put towards PhishEye and how it has turned out in the limited time we have at RevolutionUC. 

What we have learned

First and foremost, we learned how powerful AI can be in aiding with the development process and got a sneak peek at how it can be used to develop the future of the world around us. Through our utilization and witnessing others utilize the same technology, we have a better concept of what AI does and can do for the world. We also got a great insight as to how APIs interact with other applications and how, when implemented correctly, they can power some of the most useful and revolutionary systems of today. We also learned how quickly an idea can develop into a reality with the right mindset. Going from limited knowledge of the technologies behind our product, to having a proof of concept with an API demo within the span of 24 hours is something we never thought we could do prior to RevolutionUC. However, we set our minds and our bodies to our concept and it really came out as something we are proud of. Development of new and exciting concepts like PhishEye is extremely fun and gave us confidence and desire to further develop concepts as possible business ventures in the future. 

What's next for PhishEye

We plan on fully developing this concept through training of the AI model with phishing examples ranging from common, easy to spot phishing, to indistinguishable from legitimate messages. Hopefully, through careful training and consistent results, we will be able to present the fully-fledged PhishEye AI to major e-mail services such as Gmail and Outlook (Google and Microsoft). We also want to make this design accessible to all internet mail services so everyone can utilize this technology. We want to ensure as many people are able to utilize this revolutionary technology as possible and we will strive to produce and upkeep the best end-product we can. Through PhishEye, the future of internet security looks_ picture perfect.
","",https://youtu.be/ZCDxatl0rig,"chatgpt, python, google-cloud, visual-studio, canva, wix, get.tech, gmail, trinket, chrome-developer-tools",,University of Cincinnati,2,Lobby2-20,University of Cincinnati,"ChatGPT - This weekend we, along with many other groups, utilized ChatGPT to aid us in our project. It opened our eyes to how powerful of a tool AI is and how it can be used to develop things we could have never imagined. It also was reliable as it gave our group a lot of information and helped fix some of our code when we couldn't figure it out. We are excited to see what the future holds with AI and hope that we can be a part of it!",phisheye.tech
Best Design Hack,Novice Finance,"",Draft,Pending,Additional info,02/24/2024 18:28:18,"Inspiration

In today's technologically advanced society, the business and finance worlds are dominated by 
 wealthy and powerful MNCs with vast capital and technological resources. Lacking similar resources   and factors of production, novice entrepreneurs and lower class citizens have little  opportunity for economic growth and business development. As such, Novice Finance was constructed with the hope of fulfilling UN's goal #8 by providing efficient financial tool to allow lower class citizens and novice entrepreneurs to attain sustainable economic growth through implementing world-class financial tools

What it does

Novice Finance provides four machine learning modules that act as financial tools for burgeoning entrepreneurs and prospective citizens for their financial goals. Currently, the machine learning modules employed are: Startup Success Rate Estimator, Loan Approval Rate Predictor, Default Chance Calculator, and Customer Churn Forecaster
   The Startup Success Rate Estimator captures user input on specific information about a startupâ€™s financial and logistic details to predict the chances of that startupâ€™s success.
   The Loan Approval Rate Predictor utilizes information about an individualâ€™s financial status to determine the chance of that individualâ€™s specific loan amount being approved.
   The Default Chance Calculator requires financial information about an individualâ€™s previous financial transactions and payments to estimate the chance of credit default for the individual in the near future.
   The Customer Churn Forecaster captures input on demographic and financial information about a specific client of a business to forecast the chances of that client exiting the business in the future. 

How we built it

Novice Finance was built through Visual Studio Community and Razor Pages in ASP.NET Core. On the server side, C# was utilized for the implementation of the four machine learning modules, and on the client side, cshtml was used for capturing user input and the overall web design. ML.NET was employed for the creation of the machine learning module frameworks. 
   Collectively, user input on the client side Razor Page is captured through the cshtml forms, and this information is transferred to the ML.NET modules through the server side C# pages. There, the prediction by the machine learning modules is outputted back to the Razor Pages for the users to view the results of our A.I. powered prediction.

Challenges we ran into

One of the major challenges we ran into was figuring out how to transfer user input from the client side html page to the server side C# page, where the machine learning modules were established. We solved this problem by utilizing cshtml instead of html for the client side Razor Pages. Utilizing cshtml enabled us to establish a direct connection between the client side Razor Pages and the server side C# page, thereby allowing for direct transfer of information between the two sources.

Accomplishments that we're proud of

Producing a live and accessible web application that can be used by millions around the world for all their financial needs is the biggest accomplishment that Novice Finance has attained. 

What we learned

One of the major computer science related concepts learned from this project was learning how to construct and implement the ML.NET machine learning modules from Visual Studio Community.  The ML.NET model builder provides a simple, yet powerful framework for constructing machine learning modules using C#. Learning to use ML.NET was a significant stepping stone in our computer science careers, as it enables us to effectively implement artificial intelligence into any CS project.

What's next for Novice Finance

Moving forward, we would like to expand the scope of Novice Finance by incorporating machine learning modules for more financial tools. Possible areas of focus would include Financial & Credit scam detection, product demand prediction, assets management, and financial risk estimation.
   To improve the functionality of our current machine learning modules, we would like to expand the financial databases utilized for the creation of our ML.NET modules, by incorporating financial data from prominent financial institutions. To those ends, we will take necessary steps to obtaining the necessary credentials required, with the hopes that an improved database source would make our prediction more accurate. 
","https://novicefinance.azurewebsites.net/, https://github.com/Varun-Viswapriyan/Novice-Finance.git",https://youtu.be/G8bWnIouPMY,"c#, cshtml, visual, visual-studio",,Olentangy Orange High School,0,Attended remotely online,Olentangy Orange High School,It was a great experience working remotely at this hackathon,""
Best Social Impact Hack,Novice Finance,"",Draft,Pending,Additional info,02/24/2024 18:28:18,"Inspiration

In today's technologically advanced society, the business and finance worlds are dominated by 
 wealthy and powerful MNCs with vast capital and technological resources. Lacking similar resources   and factors of production, novice entrepreneurs and lower class citizens have little  opportunity for economic growth and business development. As such, Novice Finance was constructed with the hope of fulfilling UN's goal #8 by providing efficient financial tool to allow lower class citizens and novice entrepreneurs to attain sustainable economic growth through implementing world-class financial tools

What it does

Novice Finance provides four machine learning modules that act as financial tools for burgeoning entrepreneurs and prospective citizens for their financial goals. Currently, the machine learning modules employed are: Startup Success Rate Estimator, Loan Approval Rate Predictor, Default Chance Calculator, and Customer Churn Forecaster
   The Startup Success Rate Estimator captures user input on specific information about a startupâ€™s financial and logistic details to predict the chances of that startupâ€™s success.
   The Loan Approval Rate Predictor utilizes information about an individualâ€™s financial status to determine the chance of that individualâ€™s specific loan amount being approved.
   The Default Chance Calculator requires financial information about an individualâ€™s previous financial transactions and payments to estimate the chance of credit default for the individual in the near future.
   The Customer Churn Forecaster captures input on demographic and financial information about a specific client of a business to forecast the chances of that client exiting the business in the future. 

How we built it

Novice Finance was built through Visual Studio Community and Razor Pages in ASP.NET Core. On the server side, C# was utilized for the implementation of the four machine learning modules, and on the client side, cshtml was used for capturing user input and the overall web design. ML.NET was employed for the creation of the machine learning module frameworks. 
   Collectively, user input on the client side Razor Page is captured through the cshtml forms, and this information is transferred to the ML.NET modules through the server side C# pages. There, the prediction by the machine learning modules is outputted back to the Razor Pages for the users to view the results of our A.I. powered prediction.

Challenges we ran into

One of the major challenges we ran into was figuring out how to transfer user input from the client side html page to the server side C# page, where the machine learning modules were established. We solved this problem by utilizing cshtml instead of html for the client side Razor Pages. Utilizing cshtml enabled us to establish a direct connection between the client side Razor Pages and the server side C# page, thereby allowing for direct transfer of information between the two sources.

Accomplishments that we're proud of

Producing a live and accessible web application that can be used by millions around the world for all their financial needs is the biggest accomplishment that Novice Finance has attained. 

What we learned

One of the major computer science related concepts learned from this project was learning how to construct and implement the ML.NET machine learning modules from Visual Studio Community.  The ML.NET model builder provides a simple, yet powerful framework for constructing machine learning modules using C#. Learning to use ML.NET was a significant stepping stone in our computer science careers, as it enables us to effectively implement artificial intelligence into any CS project.

What's next for Novice Finance

Moving forward, we would like to expand the scope of Novice Finance by incorporating machine learning modules for more financial tools. Possible areas of focus would include Financial & Credit scam detection, product demand prediction, assets management, and financial risk estimation.
   To improve the functionality of our current machine learning modules, we would like to expand the financial databases utilized for the creation of our ML.NET modules, by incorporating financial data from prominent financial institutions. To those ends, we will take necessary steps to obtaining the necessary credentials required, with the hopes that an improved database source would make our prediction more accurate. 
","https://novicefinance.azurewebsites.net/, https://github.com/Varun-Viswapriyan/Novice-Finance.git",https://youtu.be/G8bWnIouPMY,"c#, cshtml, visual, visual-studio",,Olentangy Orange High School,0,Attended remotely online,Olentangy Orange High School,It was a great experience working remotely at this hackathon,""
Best Educational Hack,LimitLess,https://revolutionuc2024.devpost.com/submissions/484567-limitless,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 19:29:34,"Inspiration


All of us are in a Calculus class or somehow in the environment of it - AP Physics C - so we all understand the utter pain of first trying to understand Calculus, leading us to create this code for an app that is everything you need to master calculus.
## What it does
Our Calculus app - Limitless - has a variety of functions to help the average Calculus student excel in learning this beautiful math. Firstly the most important thing to do to excel in anything, especially something as difficult as understanding Calculus, is practice - our app makes it so that you get a daily reminder from text or email to do at least 1 practice problem a day which over time drastically improves your skill. Another thing that we have is that our practice problems are adaptive, meaning if you get them right they will get harder over time - which overall helps you become better. Another functionality our app has is that it has bite-sized info on how to solve derivatives and integrals using different techniques - power rule for derivatives or U-sub for integrals etc.
## How we built it
We first used a code compiler/editor known as VS code which Siva (one of our teammates) used to share with everyone so we could all code in it together. We used the coding language React Native which is a framework for JS as our primary language. We stored a sample of easy, medium, and hard questions in a JSON file to use in our app. We used Firebase to store user data from when they signed up.
## Challenges we ran into
We ran into plenty of challenges while making this app, just to name a few we had trouble setting up react native because the one we are used to and were taught in school is different as it was more simplified and the online documentation also had small differences making it more difficult to work on. Trying to implant a JS variable into react native or a JSON file was a very difficult challenge to cross as we spent a lot of time on it. 
## Accomplishments that we're proud of
We are very proud of our overall app as it is something that we would use ourselves to aid us in our Calculus journey, and we are also very proud of what we were able to accomplish with some teamwork and brain power.
## What we learned
We learned how to improve on problem-solving and analytical thinking, as mentioned before we had a variety of different problems and we were able to finally solve them by listening to each other and putting some more brainpower into it. 
## What's next for LimitLess
Maybe implementing general AI for people to ask specific questions and another sort of ""game mode"" where it is multiplayer and 2 people race off and see whoever can solve the most calculus (derivative and integral questions) in the least amount of time.

","",https://www.youtube.com/watch?v=_QK2y9BkKEo,"react-native, javascript, visual-studio, firebase, macbook, laptop",,William Mason High School,3,Suite 335,William Mason High School,"The technology was overall good, we used VS code as our editor mainly, and other than that we didn't use much other tech.",No
Best Educational Hack,Positive Casino,https://revolutionuc2024.devpost.com/submissions/484600-positive-casino,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 20:24:55,"Inspiration

Hello, I'm Hector. I've always been keen on making a good social impact. Fighting addictions has always felt like a topic that doesn't get as much attention as it should. I felt like any project that addressed this issue would help combat it by bringing more awareness. Furthermore, I've had a long-running interest in building websites that I never got to fully explore. So this project idea felt like the perfect middle ground between the two.

Hi, I'm Khoi. I've long been interested in how people get over their addictions, particularly gambling. One aspect of it I'm focusing on is how they don't always completely stop their harmful comsumption, but sometimes they will have ""indulging periods"" where they can enjoy those addicting activities under strict observation and control. I wanted to make those time periods more beneficial for the recovering addicts, as well as giving the general public some insight understandings and underlying problems of gambling. What better way is there to do that than create a slots machine and make it give anti-gambling advice instead? Welcome to Positive Casino!

What it does

This website presents you with a button to spin a slots machine. After it's finished, instead of traditional results like ""Jackpot!"", we print out a random advice among the database, with a small chance to give a specific advice to the results (try to spot them)! Furthermore, we've added a helpline and website for SAMHSA, the Substance Abuse and Mental Health Services Administration, as well as websites we've used for the advice output.

How we built it

After getting the encouragement from the Center of Entrepreneurship, we used ChatGPT to create a rough draft of how an HTML-based game would be like. After that, we used Copilot to add further standard functionalities into the code, and fix mistakes if necessary. Consequently, we reverse engineered the code to see which parts of the original code could be changed to fit our desired outcome. Finally, we added some miscellaneous details, such as the helpline for gambling, and the resources we used to find anti-gambling advice.

Challenges we ran into

Running into this project head-first with zero prior knowledge on both JavaScript and HTML was a daunting task. Combined with the difficulty of getting teammates for the first several hours of the project, we were off late to the project. However, we managed to resolve all of them relatively quickly thanks to our teammate and AI writing the code skeleton and fixing mistakes.
The 24-hour time constraint was also a big drawback, as we could not manage to add a lot of details to flesh out the website.

Accomplishments that we're proud of

Creating an HTML+JavaScript website from scratch emulating a basic slot machine on the website

What we learned

CSS, HTML, and JavaScript.

What's next for Positive Casino

This project is only an impulse idea Khoi had for the RevUC2024 Hackathon an hour into it, so it is unlikely to recieve further updates from him. We do feel like this project could see many, many more improvements, but for now, this is the best we could do. We will possibly add some updates to it, like better layout and decorations, who knows?
",https://rawcdn.githack.com/TranMK/Positive-Casino/1fe286d92733ec1954b42a68e654997c23bea1cb/index.html,https://youtu.be/prP7nHNFvLE,"javascript, html, css, github-copilot",,University of Cincinnati,1,230-4,University of Cincinnati,"We've used several websites and programs during this project, specifically GitHub, VSCode, Rawhack and AI-powered assistance such as ChatGPT, GitHub Copilot and Tabnine. We had no particular problems with any of them, but a special mention must be given to the AI programs, as we would not have been able to make any program in the first place without them.",positive-casino.tech
Best Social Impact Hack,Positive Casino,https://revolutionuc2024.devpost.com/submissions/484600-positive-casino,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 20:24:55,"Inspiration

Hello, I'm Hector. I've always been keen on making a good social impact. Fighting addictions has always felt like a topic that doesn't get as much attention as it should. I felt like any project that addressed this issue would help combat it by bringing more awareness. Furthermore, I've had a long-running interest in building websites that I never got to fully explore. So this project idea felt like the perfect middle ground between the two.

Hi, I'm Khoi. I've long been interested in how people get over their addictions, particularly gambling. One aspect of it I'm focusing on is how they don't always completely stop their harmful comsumption, but sometimes they will have ""indulging periods"" where they can enjoy those addicting activities under strict observation and control. I wanted to make those time periods more beneficial for the recovering addicts, as well as giving the general public some insight understandings and underlying problems of gambling. What better way is there to do that than create a slots machine and make it give anti-gambling advice instead? Welcome to Positive Casino!

What it does

This website presents you with a button to spin a slots machine. After it's finished, instead of traditional results like ""Jackpot!"", we print out a random advice among the database, with a small chance to give a specific advice to the results (try to spot them)! Furthermore, we've added a helpline and website for SAMHSA, the Substance Abuse and Mental Health Services Administration, as well as websites we've used for the advice output.

How we built it

After getting the encouragement from the Center of Entrepreneurship, we used ChatGPT to create a rough draft of how an HTML-based game would be like. After that, we used Copilot to add further standard functionalities into the code, and fix mistakes if necessary. Consequently, we reverse engineered the code to see which parts of the original code could be changed to fit our desired outcome. Finally, we added some miscellaneous details, such as the helpline for gambling, and the resources we used to find anti-gambling advice.

Challenges we ran into

Running into this project head-first with zero prior knowledge on both JavaScript and HTML was a daunting task. Combined with the difficulty of getting teammates for the first several hours of the project, we were off late to the project. However, we managed to resolve all of them relatively quickly thanks to our teammate and AI writing the code skeleton and fixing mistakes.
The 24-hour time constraint was also a big drawback, as we could not manage to add a lot of details to flesh out the website.

Accomplishments that we're proud of

Creating an HTML+JavaScript website from scratch emulating a basic slot machine on the website

What we learned

CSS, HTML, and JavaScript.

What's next for Positive Casino

This project is only an impulse idea Khoi had for the RevUC2024 Hackathon an hour into it, so it is unlikely to recieve further updates from him. We do feel like this project could see many, many more improvements, but for now, this is the best we could do. We will possibly add some updates to it, like better layout and decorations, who knows?
",https://rawcdn.githack.com/TranMK/Positive-Casino/1fe286d92733ec1954b42a68e654997c23bea1cb/index.html,https://youtu.be/prP7nHNFvLE,"javascript, html, css, github-copilot",,University of Cincinnati,1,230-4,University of Cincinnati,"We've used several websites and programs during this project, specifically GitHub, VSCode, Rawhack and AI-powered assistance such as ChatGPT, GitHub Copilot and Tabnine. We had no particular problems with any of them, but a special mention must be given to the AI programs, as we would not have been able to make any program in the first place without them.",positive-casino.tech
"Best ""Useless"" Hack",Positive Casino,https://revolutionuc2024.devpost.com/submissions/484600-positive-casino,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 20:24:55,"Inspiration

Hello, I'm Hector. I've always been keen on making a good social impact. Fighting addictions has always felt like a topic that doesn't get as much attention as it should. I felt like any project that addressed this issue would help combat it by bringing more awareness. Furthermore, I've had a long-running interest in building websites that I never got to fully explore. So this project idea felt like the perfect middle ground between the two.

Hi, I'm Khoi. I've long been interested in how people get over their addictions, particularly gambling. One aspect of it I'm focusing on is how they don't always completely stop their harmful comsumption, but sometimes they will have ""indulging periods"" where they can enjoy those addicting activities under strict observation and control. I wanted to make those time periods more beneficial for the recovering addicts, as well as giving the general public some insight understandings and underlying problems of gambling. What better way is there to do that than create a slots machine and make it give anti-gambling advice instead? Welcome to Positive Casino!

What it does

This website presents you with a button to spin a slots machine. After it's finished, instead of traditional results like ""Jackpot!"", we print out a random advice among the database, with a small chance to give a specific advice to the results (try to spot them)! Furthermore, we've added a helpline and website for SAMHSA, the Substance Abuse and Mental Health Services Administration, as well as websites we've used for the advice output.

How we built it

After getting the encouragement from the Center of Entrepreneurship, we used ChatGPT to create a rough draft of how an HTML-based game would be like. After that, we used Copilot to add further standard functionalities into the code, and fix mistakes if necessary. Consequently, we reverse engineered the code to see which parts of the original code could be changed to fit our desired outcome. Finally, we added some miscellaneous details, such as the helpline for gambling, and the resources we used to find anti-gambling advice.

Challenges we ran into

Running into this project head-first with zero prior knowledge on both JavaScript and HTML was a daunting task. Combined with the difficulty of getting teammates for the first several hours of the project, we were off late to the project. However, we managed to resolve all of them relatively quickly thanks to our teammate and AI writing the code skeleton and fixing mistakes.
The 24-hour time constraint was also a big drawback, as we could not manage to add a lot of details to flesh out the website.

Accomplishments that we're proud of

Creating an HTML+JavaScript website from scratch emulating a basic slot machine on the website

What we learned

CSS, HTML, and JavaScript.

What's next for Positive Casino

This project is only an impulse idea Khoi had for the RevUC2024 Hackathon an hour into it, so it is unlikely to recieve further updates from him. We do feel like this project could see many, many more improvements, but for now, this is the best we could do. We will possibly add some updates to it, like better layout and decorations, who knows?
",https://rawcdn.githack.com/TranMK/Positive-Casino/1fe286d92733ec1954b42a68e654997c23bea1cb/index.html,https://youtu.be/prP7nHNFvLE,"javascript, html, css, github-copilot",,University of Cincinnati,1,230-4,University of Cincinnati,"We've used several websites and programs during this project, specifically GitHub, VSCode, Rawhack and AI-powered assistance such as ChatGPT, GitHub Copilot and Tabnine. We had no particular problems with any of them, but a special mention must be given to the AI programs, as we would not have been able to make any program in the first place without them.",positive-casino.tech
Best .Tech Domain Name,Positive Casino,https://revolutionuc2024.devpost.com/submissions/484600-positive-casino,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 20:24:55,"Inspiration

Hello, I'm Hector. I've always been keen on making a good social impact. Fighting addictions has always felt like a topic that doesn't get as much attention as it should. I felt like any project that addressed this issue would help combat it by bringing more awareness. Furthermore, I've had a long-running interest in building websites that I never got to fully explore. So this project idea felt like the perfect middle ground between the two.

Hi, I'm Khoi. I've long been interested in how people get over their addictions, particularly gambling. One aspect of it I'm focusing on is how they don't always completely stop their harmful comsumption, but sometimes they will have ""indulging periods"" where they can enjoy those addicting activities under strict observation and control. I wanted to make those time periods more beneficial for the recovering addicts, as well as giving the general public some insight understandings and underlying problems of gambling. What better way is there to do that than create a slots machine and make it give anti-gambling advice instead? Welcome to Positive Casino!

What it does

This website presents you with a button to spin a slots machine. After it's finished, instead of traditional results like ""Jackpot!"", we print out a random advice among the database, with a small chance to give a specific advice to the results (try to spot them)! Furthermore, we've added a helpline and website for SAMHSA, the Substance Abuse and Mental Health Services Administration, as well as websites we've used for the advice output.

How we built it

After getting the encouragement from the Center of Entrepreneurship, we used ChatGPT to create a rough draft of how an HTML-based game would be like. After that, we used Copilot to add further standard functionalities into the code, and fix mistakes if necessary. Consequently, we reverse engineered the code to see which parts of the original code could be changed to fit our desired outcome. Finally, we added some miscellaneous details, such as the helpline for gambling, and the resources we used to find anti-gambling advice.

Challenges we ran into

Running into this project head-first with zero prior knowledge on both JavaScript and HTML was a daunting task. Combined with the difficulty of getting teammates for the first several hours of the project, we were off late to the project. However, we managed to resolve all of them relatively quickly thanks to our teammate and AI writing the code skeleton and fixing mistakes.
The 24-hour time constraint was also a big drawback, as we could not manage to add a lot of details to flesh out the website.

Accomplishments that we're proud of

Creating an HTML+JavaScript website from scratch emulating a basic slot machine on the website

What we learned

CSS, HTML, and JavaScript.

What's next for Positive Casino

This project is only an impulse idea Khoi had for the RevUC2024 Hackathon an hour into it, so it is unlikely to recieve further updates from him. We do feel like this project could see many, many more improvements, but for now, this is the best we could do. We will possibly add some updates to it, like better layout and decorations, who knows?
",https://rawcdn.githack.com/TranMK/Positive-Casino/1fe286d92733ec1954b42a68e654997c23bea1cb/index.html,https://youtu.be/prP7nHNFvLE,"javascript, html, css, github-copilot",,University of Cincinnati,1,230-4,University of Cincinnati,"We've used several websites and programs during this project, specifically GitHub, VSCode, Rawhack and AI-powered assistance such as ChatGPT, GitHub Copilot and Tabnine. We had no particular problems with any of them, but a special mention must be given to the AI programs, as we would not have been able to make any program in the first place without them.",positive-casino.tech
Best .Tech Domain Name,Ucases,https://revolutionuc2024.devpost.com/submissions/484621-ucases,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 21:29:11,"Inspiration

We knew we wanted to make some sort of educational project, so we decided on something we all thought could be useful to our academics, specifically a way to generate more practice problems for studying, we also believed a website hosting this would increase practicability. 

What it does

Our program takes a pdf containing questions from an exam as an input and returns a list of new questions based on the previous one provided in efforts to provide practice to students.

How we built it

First we downloaded a python library that allowed us to read from pdf files so that we could process them in our program, we then prompted an AI to return similar exam questions based on the ones inputted, and after this we compiled the questions so that we could return them to the user.

Challenges we ran into

None of us had previously worked with implementing AI in a program like this, we werent experience with backend website development, and we didnt have the experience to know how to host a server in which our program could run in.

Accomplishments that we're proud of

Getting the website to initially connect, successfully using the AI API to give us the new questions, starting a server to host our program, and implementing a python program with a website interface.

What we learned

We learned about the process of making a fully fledged website with HTML and CSS, how to connect our website to a server such that we could take user inputs into our program, we learned about implement AI API into programs, and the ways we could combine programming skills to make a fina,l product.

What's next for Ucases

Our project showcases an idea which could be developed further, working to help higher level education students with practicing for class material, this would involve using advanced image processing to prepare diagrams, and screen reading for files that do not contain string data.
","http://ucases.tech, https://github.com/Thend911/Hackathon24",https://youtu.be/k0x6fm1_ID4,"python, javascript, django, html, css, openai",,University of Cincinnati,3,230-2,University of Cincinnati,"We used Github, it manage the files well, we also used OpenAI which is easy to use and the generated response is accurate, we used Django which helped us to manage the database of the customers.","Yes, it is Ucases.tech"
Best Educational Hack,CodeScope,https://revolutionuc2024.devpost.com/submissions/484642-codescope,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:10:20,"Where did this idea come from?

I had the opportunity to judge a hackathon some time back, the entire process was very fast paced and didn't give us enough time/thought to actually analyse the code. Most judges, inluding myself, just looked whatever the code would output and move along. This meant that the codes that were LLM or data-based were given less consideration than codes with. pretty front-end. This disparity made me pretty upset- because I've noticed in my own time with participating in numerous hackathons that whenever I had a pretty frot-end for an output, I would win a track. On the other hand, when I tried using ML models and didn't have a front-end base, I didn't win anything.

Such difference in response makes it clear that something is wrong- a hackathon should be about code, be it front-end, back-end, or fullstack. 

I came up with the idea of creating a hackathon analysis webpage to help judges and participants alike, better understand the code at hnd. This webpage educates participants in their gaps of knowledge when trying to come up with an idea for a hackathon while also helping judges in the judging process using AI insights.

Inspiration

As someone who has participated in numerous hackathons and had the opportunity to judge one myself, I believe the last 3 hours of the hackathon are very daunting for both the participants and the judges.

With infinite ideas to create a project on, participants are still left with a feeling that their project has already been done before and isn't ""important"". CodeScope wishes to help participants realize if their idea has already been used before or has similar competition. This information can be beneficial to hackers in changing or fine-tuning their ideas.

On the other hand, judges have a very daunting task of judging numerous projects at hand. With less than 10 minutes given to each project, it is surely not the judges' fault if they aren't able to inspect the code written by the participants. This, in a sense, takes away an important part of the hackathon- the code itself. CodeScope comes into play here by analyzing the code for the judges and giving relevant metrics such as creativity and plagiarism. This hack doesn't replace judges but rather aims to empower them with information that can help them make a better judgment that would be completely fair to all hackers. 

At the end of the day, the code matters. ;)

What it does

We use web scraping and OpenAI to compare the project to pre-existing projects on Devpost and give relevant insights. The front end (created using react.js and next.js) can concisely portray this information in a digestible way. Among the information given about the project, openAI provides a small read-up on what the project does. Right below this would be a comparison list between projects already pre-existing on Devpost, the original project will be scored on its similarity and differences to the Devpost projects; openAI will also be providing a small read-up on said projects.
const generatePrompt = (description1, description2) => `[INSTRUCTIONS]
Given two text descriptions of hackathon projects, analyze and compare them for similarity across various dimensions to aid judges in making informed decisions.

â€”-

Above is an example of an openAI prompt.

How we built it

The CodeScope project was meticulously crafted through a combination of cutting-edge technologies and strategic development methodologies. Here's a breakdown of how we brought CodeScope to life:

The user-friendly interface of CodeScope was developed using React JS. React JS allowed us to create a dynamic and responsive frontend, ensuring a seamless user experience. To gather essential information from Devpost project descriptions, we employed a robust web scraping mechanism. This process involved extracting relevant data points that form the basis for the subsequent analysis. OpenAI's ChatGPT played a crucial role in the keyword extraction process. By utilizing ChatGPT, we could effectively detect keywords from Devpost project descriptions, capturing the essence of each project. Leveraging the extracted keywords, we initiated a project similarity search.
This involved querying Devpost for projects with similar characteristics, providing us with a curated list based on relevance. Each incoming project underwent a meticulous comparative analysis.
This multi-faceted analysis examined the number of similar projects and the depth of their similarities. Post-analysis, CodeScope compiled results into an 'originality score.' This score, along with detailed explanations for the determined metrics, was presented to users in a transparent and organized manner on the frontend.

Challenges we ran into

We wanted to use postgreSQL to store the data from openAI and the LLMS to then further populate bar graphs with information over a large set of projects. Due to a lack of time to work on it, we were not able to properly get the postgres to work.

The OpenAI key also faced multiple issues while running, and had clashes with the use of npm. It required thorough documentation reading to overcome this issue.

Not having enough time meant we weren't able to have enough solid metrics to parse the data through, however we still believe that what we have going is enough as an initial scale.

Not getting sleep was the greatest challenge of all.

Accomplishments that we're proud of

Getting the LLMS to work was the biggest hoop while working on this project, after hours of back and forth with open-source LLMS and VSCode, we were able to successfully get it to run. The interface is also something that we are proud of!

What we learned

The use of openAI API keys, working with LLMS in reactjs, and conversion of front-end code to back-end js was my main takeaways from this project. I also learned a lot about node.js in general, looking at the model run made me realize how redundant some of my past hackathon project ideas were. I think this was a great learning experience, overall!

What's next for CodeScope

We want to be able to add more metrics to CodeScope to encourage a more holistic grading approach. Our greatest aim would be to partner with revUC to help empower their judging process!!
",https://github.com/ArleenMonteiro/HackTrack/tree/main,https://youtu.be/W5iZ4HigQC0?si=srdkr4XgVtJynLD5,"scss, css3, react, nextjs, webscraping, docker, postgresql, openai, javascript, json, yml",,"",0,not sure,University of Cincinnati,Learnt a lot about tembo,""
Best Data Science and Analytics Hack (Fortified Data),CodeScope,https://revolutionuc2024.devpost.com/submissions/484642-codescope,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:10:20,"Where did this idea come from?

I had the opportunity to judge a hackathon some time back, the entire process was very fast paced and didn't give us enough time/thought to actually analyse the code. Most judges, inluding myself, just looked whatever the code would output and move along. This meant that the codes that were LLM or data-based were given less consideration than codes with. pretty front-end. This disparity made me pretty upset- because I've noticed in my own time with participating in numerous hackathons that whenever I had a pretty frot-end for an output, I would win a track. On the other hand, when I tried using ML models and didn't have a front-end base, I didn't win anything.

Such difference in response makes it clear that something is wrong- a hackathon should be about code, be it front-end, back-end, or fullstack. 

I came up with the idea of creating a hackathon analysis webpage to help judges and participants alike, better understand the code at hnd. This webpage educates participants in their gaps of knowledge when trying to come up with an idea for a hackathon while also helping judges in the judging process using AI insights.

Inspiration

As someone who has participated in numerous hackathons and had the opportunity to judge one myself, I believe the last 3 hours of the hackathon are very daunting for both the participants and the judges.

With infinite ideas to create a project on, participants are still left with a feeling that their project has already been done before and isn't ""important"". CodeScope wishes to help participants realize if their idea has already been used before or has similar competition. This information can be beneficial to hackers in changing or fine-tuning their ideas.

On the other hand, judges have a very daunting task of judging numerous projects at hand. With less than 10 minutes given to each project, it is surely not the judges' fault if they aren't able to inspect the code written by the participants. This, in a sense, takes away an important part of the hackathon- the code itself. CodeScope comes into play here by analyzing the code for the judges and giving relevant metrics such as creativity and plagiarism. This hack doesn't replace judges but rather aims to empower them with information that can help them make a better judgment that would be completely fair to all hackers. 

At the end of the day, the code matters. ;)

What it does

We use web scraping and OpenAI to compare the project to pre-existing projects on Devpost and give relevant insights. The front end (created using react.js and next.js) can concisely portray this information in a digestible way. Among the information given about the project, openAI provides a small read-up on what the project does. Right below this would be a comparison list between projects already pre-existing on Devpost, the original project will be scored on its similarity and differences to the Devpost projects; openAI will also be providing a small read-up on said projects.
const generatePrompt = (description1, description2) => `[INSTRUCTIONS]
Given two text descriptions of hackathon projects, analyze and compare them for similarity across various dimensions to aid judges in making informed decisions.

â€”-

Above is an example of an openAI prompt.

How we built it

The CodeScope project was meticulously crafted through a combination of cutting-edge technologies and strategic development methodologies. Here's a breakdown of how we brought CodeScope to life:

The user-friendly interface of CodeScope was developed using React JS. React JS allowed us to create a dynamic and responsive frontend, ensuring a seamless user experience. To gather essential information from Devpost project descriptions, we employed a robust web scraping mechanism. This process involved extracting relevant data points that form the basis for the subsequent analysis. OpenAI's ChatGPT played a crucial role in the keyword extraction process. By utilizing ChatGPT, we could effectively detect keywords from Devpost project descriptions, capturing the essence of each project. Leveraging the extracted keywords, we initiated a project similarity search.
This involved querying Devpost for projects with similar characteristics, providing us with a curated list based on relevance. Each incoming project underwent a meticulous comparative analysis.
This multi-faceted analysis examined the number of similar projects and the depth of their similarities. Post-analysis, CodeScope compiled results into an 'originality score.' This score, along with detailed explanations for the determined metrics, was presented to users in a transparent and organized manner on the frontend.

Challenges we ran into

We wanted to use postgreSQL to store the data from openAI and the LLMS to then further populate bar graphs with information over a large set of projects. Due to a lack of time to work on it, we were not able to properly get the postgres to work.

The OpenAI key also faced multiple issues while running, and had clashes with the use of npm. It required thorough documentation reading to overcome this issue.

Not having enough time meant we weren't able to have enough solid metrics to parse the data through, however we still believe that what we have going is enough as an initial scale.

Not getting sleep was the greatest challenge of all.

Accomplishments that we're proud of

Getting the LLMS to work was the biggest hoop while working on this project, after hours of back and forth with open-source LLMS and VSCode, we were able to successfully get it to run. The interface is also something that we are proud of!

What we learned

The use of openAI API keys, working with LLMS in reactjs, and conversion of front-end code to back-end js was my main takeaways from this project. I also learned a lot about node.js in general, looking at the model run made me realize how redundant some of my past hackathon project ideas were. I think this was a great learning experience, overall!

What's next for CodeScope

We want to be able to add more metrics to CodeScope to encourage a more holistic grading approach. Our greatest aim would be to partner with revUC to help empower their judging process!!
",https://github.com/ArleenMonteiro/HackTrack/tree/main,https://youtu.be/W5iZ4HigQC0?si=srdkr4XgVtJynLD5,"scss, css3, react, nextjs, webscraping, docker, postgresql, openai, javascript, json, yml",,"",0,not sure,University of Cincinnati,Learnt a lot about tembo,""
Best Design Hack,Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best Social Impact Hack,Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
"Best ""Useless"" Hack",Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best Use of AWS,Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best Implementation of an LLM or Other Generative AI Model (CincyTech),Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best Product Market Fit (Center for Entrepreneurship),Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best .Tech Domain Name,Best Dressed,https://revolutionuc2024.devpost.com/submissions/484648-best-dressed,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:19:04,"Inspiration

We wanted to make an application that allows a user to choose clothes based off their body type. Many do not see a good representation of their body type in the fashion industry. This can make it extremely difficult to order clothes online. We also wanted to reduce the amount of clothes which end up in landfills. According to theroundup.org 92 million tons of textile waste is produced every year. We believe that if someone is able to make a more informed decision before buying clothes online, textile waste can be reduced. We also wanted to make it easier for those with different body types to see their body shape represented and showcase an easier way to virtually try on clothes. We also wanted to make it more accessible so we include those who have physical impairments to make their shopping experience more pleasant. 

What it does

Allows a user to log in and virtually shop for clothes. Let's the user make a profile based on their body type, search for clothes, save liked clothes, and saves their preferences. A user can pick a body type which is similar to their and then be able to search and favorite their favorites. After selecting their favorites they can virtually try on the clothes which allows them to try before they buy.. 

How we built it

We built the user interface by using html, css, and javascript. Our backend was built using php, node.js, and express.js and AWS. 

Challenges we ran into

We struggled to combine all of our code contributions into one working project. We also struggled with using technologies that we were extremely unfamiliar with which took up a lot of our time trying to learn them. 

Accomplishments that we're proud of

We successfully make a working website! This is great since for our team this is 3/4 member's 1st hackathon so this was really exciting and encouraging for us. 

What we learned

New technologies: html, css, javascript, AWS and php.
At our university we are not taught any front-end development so this was a great challenge and lesson to learn for all of us. We learned how to launch a website, how to use GitHub effectively, and we also learned more about fashion and the need for sustainability in the fashion industry. 

What's next for Best Dressed

-Create an AI generated 3D model 
-Ability to buy clothes 
-personalized recommendations based on saved clothes 
-Customer support 
-Include more accessibility features: 
-Larger text and images 
-Text to speech
-Improve the website's security so the user's personal information is protected.  
","https://github.com/aishaahammed/RevolutionUC2024, http://www.bestdressed.tech/",https://youtu.be/N-MRgEXY0GQ?si=DaQL7HYZp5FEjr0a,"github, html, css, javascript, php, node.js, express.js, visual-studio, amazon-web-services, github-actions",,Kent State University,3,Lobby2-33,Kent State University,We used GitHub in order to organize all of our different files and to keep track of each of our tasks.,http://www.bestdressed.tech/
Best Design Hack,CtrlAltEsc,https://revolutionuc2024.devpost.com/submissions/484654-ctrlaltesc,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:55,"Inspiration

We were inspired by the need for secure and convenient banking solutions in today's digital age. Our aim was to create a system that provides users with temporary bank credentials for safer online transactions.

What it does

The project securely authenticates users and generates temporary bank credentials, including card numbers and CVV codes, which expire in 5 minutes. It incorporates encryption, usage limits, and fraud detection for enhanced security. Users receive notifications for transactions and credential expiration.

How we built it

We built the project using a combination of front-end and back-end technologies. The front-end was developed using HTML, CSS, and JavaScript, while the back-end utilized server-side scripting languages like PHP or Python. We employed secure authentication methods and implemented encryption algorithms for data protection.

Challenges we ran into

One challenge we faced was ensuring the security of the generated credentials and preventing unauthorized access. Additionally, implementing robust fraud detection algorithms and handling transaction notifications posed technical hurdles.

Accomplishments that we're proud of

We're proud to have created a secure and user-friendly solution for temporary banking credentials. Overcoming technical challenges and successfully implementing encryption and fraud detection features were significant accomplishments for our team.

What we learned

Through this project, we gained valuable insights into banking security protocols, encryption techniques, and fraud prevention strategies. We also honed our skills in web development, server-side scripting, and project management.

What's next for CtrlAltEsc

In the future, we plan to further enhance the security and functionality of CtrlAltEsc. This may include refining fraud detection algorithms, integrating additional authentication methods, and expanding the range of supported banking services. We also aim to collaborate with financial institutions to ensure compliance with industry standards and regulations.
",https://github.com/Kaustubh-Mathur/ctrlaltesc.github.io,https://youtu.be/Y28d91ncDrQ,"mysql, python, html, json",,"",0,Lobby2-34,University of Cincinnati,It was amazing using the resources provided.,CtrlAltEsc.tech
"Best ""Useless"" Hack",CtrlAltEsc,https://revolutionuc2024.devpost.com/submissions/484654-ctrlaltesc,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:55,"Inspiration

We were inspired by the need for secure and convenient banking solutions in today's digital age. Our aim was to create a system that provides users with temporary bank credentials for safer online transactions.

What it does

The project securely authenticates users and generates temporary bank credentials, including card numbers and CVV codes, which expire in 5 minutes. It incorporates encryption, usage limits, and fraud detection for enhanced security. Users receive notifications for transactions and credential expiration.

How we built it

We built the project using a combination of front-end and back-end technologies. The front-end was developed using HTML, CSS, and JavaScript, while the back-end utilized server-side scripting languages like PHP or Python. We employed secure authentication methods and implemented encryption algorithms for data protection.

Challenges we ran into

One challenge we faced was ensuring the security of the generated credentials and preventing unauthorized access. Additionally, implementing robust fraud detection algorithms and handling transaction notifications posed technical hurdles.

Accomplishments that we're proud of

We're proud to have created a secure and user-friendly solution for temporary banking credentials. Overcoming technical challenges and successfully implementing encryption and fraud detection features were significant accomplishments for our team.

What we learned

Through this project, we gained valuable insights into banking security protocols, encryption techniques, and fraud prevention strategies. We also honed our skills in web development, server-side scripting, and project management.

What's next for CtrlAltEsc

In the future, we plan to further enhance the security and functionality of CtrlAltEsc. This may include refining fraud detection algorithms, integrating additional authentication methods, and expanding the range of supported banking services. We also aim to collaborate with financial institutions to ensure compliance with industry standards and regulations.
",https://github.com/Kaustubh-Mathur/ctrlaltesc.github.io,https://youtu.be/Y28d91ncDrQ,"mysql, python, html, json",,"",0,Lobby2-34,University of Cincinnati,It was amazing using the resources provided.,CtrlAltEsc.tech
Best .Tech Domain Name,CtrlAltEsc,https://revolutionuc2024.devpost.com/submissions/484654-ctrlaltesc,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:55,"Inspiration

We were inspired by the need for secure and convenient banking solutions in today's digital age. Our aim was to create a system that provides users with temporary bank credentials for safer online transactions.

What it does

The project securely authenticates users and generates temporary bank credentials, including card numbers and CVV codes, which expire in 5 minutes. It incorporates encryption, usage limits, and fraud detection for enhanced security. Users receive notifications for transactions and credential expiration.

How we built it

We built the project using a combination of front-end and back-end technologies. The front-end was developed using HTML, CSS, and JavaScript, while the back-end utilized server-side scripting languages like PHP or Python. We employed secure authentication methods and implemented encryption algorithms for data protection.

Challenges we ran into

One challenge we faced was ensuring the security of the generated credentials and preventing unauthorized access. Additionally, implementing robust fraud detection algorithms and handling transaction notifications posed technical hurdles.

Accomplishments that we're proud of

We're proud to have created a secure and user-friendly solution for temporary banking credentials. Overcoming technical challenges and successfully implementing encryption and fraud detection features were significant accomplishments for our team.

What we learned

Through this project, we gained valuable insights into banking security protocols, encryption techniques, and fraud prevention strategies. We also honed our skills in web development, server-side scripting, and project management.

What's next for CtrlAltEsc

In the future, we plan to further enhance the security and functionality of CtrlAltEsc. This may include refining fraud detection algorithms, integrating additional authentication methods, and expanding the range of supported banking services. We also aim to collaborate with financial institutions to ensure compliance with industry standards and regulations.
",https://github.com/Kaustubh-Mathur/ctrlaltesc.github.io,https://youtu.be/Y28d91ncDrQ,"mysql, python, html, json",,"",0,Lobby2-34,University of Cincinnati,It was amazing using the resources provided.,CtrlAltEsc.tech
Best Social Impact Hack,More than Twins,https://revolutionuc2024.devpost.com/submissions/484655-more-than-twins,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:57,"Inspiration

Clinical trials are on the biggest leap of faith people take when agreeing to the trials. They are agreeing to something about which they have no idea as to how it will affect them, whether it be an allergic reaction or a life changing threat. When MEDPACE introduced their challenge for the participants, I thought that what if there is a digital clone of the person who has the same characteristics as that of the person, on which the drug is tested before the trial begins on the person.  

What it does

It is a very basic image of a digital clone which uses a 3D model of a human body made in Blender and shows the effects of different inputs and outputs provided by the Arduino on that body. There are two major parts of the project. There are two push buttons which act as two different drugs for the body in the project. One is harmful and the other one has no side effects on the body. Now, the color of the body will change to red or green with respect to the data provided by the Arduino. This provides an image of what drug initiation would look like. 

How we built it

I connected the interface of Blender and Arduino IDE. I started by making a 3D model of the body and then testing connections between Blender and Arduino by using an ultrasonic sensor to move the object about the spatial view. Once, this was done, the push buttons were used to initiate the test drug analysis. The drug tests were seen by changing the color of the body in Blender from grey to red or green respectively. 

Challenges we ran into

After the connection was established once, there has been a constant error saying ""Port Access Denied"" which is hindering with any further progress of the prototype. However, connection is established through the terminal script of the blender. 

Accomplishments that we're proud of

I was not aware of the Blender script before now. I can say that I am proud of connecting Arduino and Blender together.

What we learned

While working, I was tinkering with many systems since I had no particular direction. I was able to learn to connect Python IDE to Arduino IDE and use MATLAB for Arduino.

What's next for More than Twins

The most important work for More Than Twins would be to tackle the problem of error which is not letting the prototype proceed. 
","",https://youtu.be/qpzJ4s-HfN8,"python, arduino, blender",,University of Cincinnati,0,220-35,University of Cincinnati,It was very amazing.,""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),More than Twins,https://revolutionuc2024.devpost.com/submissions/484655-more-than-twins,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:57,"Inspiration

Clinical trials are on the biggest leap of faith people take when agreeing to the trials. They are agreeing to something about which they have no idea as to how it will affect them, whether it be an allergic reaction or a life changing threat. When MEDPACE introduced their challenge for the participants, I thought that what if there is a digital clone of the person who has the same characteristics as that of the person, on which the drug is tested before the trial begins on the person.  

What it does

It is a very basic image of a digital clone which uses a 3D model of a human body made in Blender and shows the effects of different inputs and outputs provided by the Arduino on that body. There are two major parts of the project. There are two push buttons which act as two different drugs for the body in the project. One is harmful and the other one has no side effects on the body. Now, the color of the body will change to red or green with respect to the data provided by the Arduino. This provides an image of what drug initiation would look like. 

How we built it

I connected the interface of Blender and Arduino IDE. I started by making a 3D model of the body and then testing connections between Blender and Arduino by using an ultrasonic sensor to move the object about the spatial view. Once, this was done, the push buttons were used to initiate the test drug analysis. The drug tests were seen by changing the color of the body in Blender from grey to red or green respectively. 

Challenges we ran into

After the connection was established once, there has been a constant error saying ""Port Access Denied"" which is hindering with any further progress of the prototype. However, connection is established through the terminal script of the blender. 

Accomplishments that we're proud of

I was not aware of the Blender script before now. I can say that I am proud of connecting Arduino and Blender together.

What we learned

While working, I was tinkering with many systems since I had no particular direction. I was able to learn to connect Python IDE to Arduino IDE and use MATLAB for Arduino.

What's next for More than Twins

The most important work for More Than Twins would be to tackle the problem of error which is not letting the prototype proceed. 
","",https://youtu.be/qpzJ4s-HfN8,"python, arduino, blender",,University of Cincinnati,0,220-35,University of Cincinnati,It was very amazing.,""
Best Product Market Fit (Center for Entrepreneurship),More than Twins,https://revolutionuc2024.devpost.com/submissions/484655-more-than-twins,Submitted (Gallery/Visible),Pending,Submit,02/24/2024 22:33:57,"Inspiration

Clinical trials are on the biggest leap of faith people take when agreeing to the trials. They are agreeing to something about which they have no idea as to how it will affect them, whether it be an allergic reaction or a life changing threat. When MEDPACE introduced their challenge for the participants, I thought that what if there is a digital clone of the person who has the same characteristics as that of the person, on which the drug is tested before the trial begins on the person.  

What it does

It is a very basic image of a digital clone which uses a 3D model of a human body made in Blender and shows the effects of different inputs and outputs provided by the Arduino on that body. There are two major parts of the project. There are two push buttons which act as two different drugs for the body in the project. One is harmful and the other one has no side effects on the body. Now, the color of the body will change to red or green with respect to the data provided by the Arduino. This provides an image of what drug initiation would look like. 

How we built it

I connected the interface of Blender and Arduino IDE. I started by making a 3D model of the body and then testing connections between Blender and Arduino by using an ultrasonic sensor to move the object about the spatial view. Once, this was done, the push buttons were used to initiate the test drug analysis. The drug tests were seen by changing the color of the body in Blender from grey to red or green respectively. 

Challenges we ran into

After the connection was established once, there has been a constant error saying ""Port Access Denied"" which is hindering with any further progress of the prototype. However, connection is established through the terminal script of the blender. 

Accomplishments that we're proud of

I was not aware of the Blender script before now. I can say that I am proud of connecting Arduino and Blender together.

What we learned

While working, I was tinkering with many systems since I had no particular direction. I was able to learn to connect Python IDE to Arduino IDE and use MATLAB for Arduino.

What's next for More than Twins

The most important work for More Than Twins would be to tackle the problem of error which is not letting the prototype proceed. 
","",https://youtu.be/qpzJ4s-HfN8,"python, arduino, blender",,University of Cincinnati,0,220-35,University of Cincinnati,It was very amazing.,""
Best Social Impact Hack,PhizzIO,https://revolutionuc2024.devpost.com/submissions/484912-phizzio,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:51:03,"Inspiration

PhizzIO was born out of a personal experience that struck a chord with our teammate, Joe. After tearing his ACL, Joe embarked on a challenging journey of physiotherapy, which presented various accessibility and adherence issues. Moreover, he often found himself lacking confidence in his recovery, battling the temptation to give up. As friends and roommates, it was very painful to see him struggle with his treatment and suffer through various physical and mental challenges it posed. 

Additionally, something that made this period of constant pain and discomfort so much more difficult for him was that he only received a piece of paper to guide him through his at-home exercises. This approach to the at-home treatment didn't give him the confidence or support to push through the pain and achieve the recovery he needed. 

Joe's physiotherapy journey helped us recognize a need for a supportive and interactive at-home physiotherapy assistant who guides, monitors, and motivates patients throughout their physiotherapy journey. We were able to gather further validation for our claims after talking to other patients and physiotherapists along with various peer-reviewed research articles, allowing us to understand the need for an interactive physiotherapy assistant. Additionally, we also aim to engage with physiotherapists to ensure the presence of a medical expert throughout the patient's journey. 

Our vision for PhizzIO extends beyond just an exercise support application; it's a holistic approach to personalized physiotherapy, fostering confidence, accessibility, and motivation for users throughout their recovery journey.

What it does

The various features of PhizzIO fall into two categories: the patient view and the physiotherapist view. The presence of both parties allows for PhizzIO to be a is an interactive platform that enables seamless interaction between patients and physiotherapists. 

PhizzIO enables the patient to perform their exercises with confidence and precision through our advanced form guide that tracks the patients' movements and provides them with real-time feedback according to the treatment plan and goals set by their physiotherapist. Our patient analytics dashboard will allow patients to view their current treatment goals, reports from previous exercise sessions, and upcoming appointments and interact with their physiotherapist through an in-built chat feature. These features will ensure the increase in accessibility and treatment adherence for patients by eliminating hindrances such as wait time, physiotherapy center location, and treatment costs.

Through PhizzIO, the physiotherapist would be able to track the patient's progress and guide them through their treatment journey through a more accurate and personalized approach. We also aim to provide various center analytics features to help the therapist better manage their patients' treatment plans and optimize the time and cost efficiency of the physiotherapy center. Physiotherapists will be able to view the patients' adherence rates and consistency of at-home sessions as well as update their at-home treatment plans with highly specific metrics and progress goals. These features will provide the physiotherapy centers with a platform to track the entire patient recovery journey by now being able to access their at-home exercise data. Through the newfound data, the therapy centers will be able to provide personalized plans for patients and expedite their recovery; this will, in turn, increase the reputation and the treatment quality of the physiotherapy center.

How we built it

PhizzIO has several facets, and its integral part is the form guide. We build the exercise form guide in Python using the media pipe pose estimation library. Leveraging real pose estimation, we determined biomechanical angles for each exercise that is performed by physiotherapy patients in general and built the guide. The guide also has an interactive UI with circles that fill up and turn green with the right posture and red with the wrong posture. 
We used the Tembo stack as our database and used the Tembo standard stack to store patient, physiotherapist, exercise, and log data from the application.
The application was built with flask as the backend connecting the database, the form guide, and the UI. For the UI we used HTML, Javascript, and CSS to stylize and make the frontend easy to use.

Challenges we ran into

During the course of our project, we encountered several notable challenges, each requiring careful consideration and strategic navigation to overcome. One such challenge arose from the necessity to reevaluate our project objectives in light of time constraints and practical feasibility. This process led to the difficult decision to abandon a feature that had been under development for a significant duration, despite the considerable investment of effort and resources. Our team grappled with the task of realigning our goals with the project's requirements, ensuring that our endeavors remained focused and conducive to progress.

Furthermore, the integration of new libraries and technologies (Tailwind REACT) posed a unique set of challenges. As we sought to incorporate these innovations into our existing framework, we encountered complexities in compatibility, functionality, and implementation. The process of adapting to unfamiliar technologies demanded thorough research, experimentation, and collaboration among team members. Despite these hurdles, we remained steadfast in our commitment to delivering a robust and refined solution, leveraging our collective expertise and problem-solving skills to address each challenge head-on.

Accomplishments that we're proud of

We are proud of completing this project and getting a working application in 24 hours. This application is a passion project for us as Joe, one of the team members tore his ACL and was finding it extremely difficult to adhere to this treatment. We built PhizzIO so that no one has to go through what Joe had to go through during his painful recovery process. We were able to learn a lot about software development, web development, pose estimation, and tembo! and we will apply what we learned into our careers.
We are also proud to get the form guide working as it has several use cases and will definitely help several patients and individuals.

What we learned

During this hackathon, we learned a very important lesson, which was to never give up and pursue what we truly believe in. There were several moments when the Flask library was not working and the pose estimation gave unreliable results, but we stuck true our vision and had an iterative debugging process that helped us overcome all of those hurdles.
We also learned a lot about new technology like Tembo which is built on top of Postgres and it was cool to use it in our application.

What's next for PhizzIO

Moving forward, we would like to integrate an AI chatbot into the patient view that is able to assist the patient with inquiries about their treatment plans, and exercise routines and motivate them through audio outputs as they do their exercises. Additionally, we would also like to create a large data set of physiotherapy exercises with detailed descriptions of their uses and techniques.  
",https://github.com/aniruddh-alt/PhizzIO_RevUC.git,https://youtu.be/1iIIgVzMYlc,"python, flask, html, css, javascript, tembo",,University of Cincinnati,2,230-6,University of Cincinnati,"This hackathon was a great learning experience because it helped us learn a lot about tembo and use tembo stacks. We got hands-on experience with the tembo vector and standard stack and even integrated the tembo stack into our application. Tembo is very easy to use compared to the open source postgres database.

We also had a great experience working with github as it helped us collaborate between multiple developers and the github copilot helped us debug several codes along the way.

The mediapipe pose estimation framework was also something we learnt during this hackathon and used to develop form guides for the patient to use and perform the exercise. We used Flask for the backend and worked with JS, HTML and CSS on the front end.",PhizzIO.tech
Best Use of Postgres (Tembo),PhizzIO,https://revolutionuc2024.devpost.com/submissions/484912-phizzio,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:51:03,"Inspiration

PhizzIO was born out of a personal experience that struck a chord with our teammate, Joe. After tearing his ACL, Joe embarked on a challenging journey of physiotherapy, which presented various accessibility and adherence issues. Moreover, he often found himself lacking confidence in his recovery, battling the temptation to give up. As friends and roommates, it was very painful to see him struggle with his treatment and suffer through various physical and mental challenges it posed. 

Additionally, something that made this period of constant pain and discomfort so much more difficult for him was that he only received a piece of paper to guide him through his at-home exercises. This approach to the at-home treatment didn't give him the confidence or support to push through the pain and achieve the recovery he needed. 

Joe's physiotherapy journey helped us recognize a need for a supportive and interactive at-home physiotherapy assistant who guides, monitors, and motivates patients throughout their physiotherapy journey. We were able to gather further validation for our claims after talking to other patients and physiotherapists along with various peer-reviewed research articles, allowing us to understand the need for an interactive physiotherapy assistant. Additionally, we also aim to engage with physiotherapists to ensure the presence of a medical expert throughout the patient's journey. 

Our vision for PhizzIO extends beyond just an exercise support application; it's a holistic approach to personalized physiotherapy, fostering confidence, accessibility, and motivation for users throughout their recovery journey.

What it does

The various features of PhizzIO fall into two categories: the patient view and the physiotherapist view. The presence of both parties allows for PhizzIO to be a is an interactive platform that enables seamless interaction between patients and physiotherapists. 

PhizzIO enables the patient to perform their exercises with confidence and precision through our advanced form guide that tracks the patients' movements and provides them with real-time feedback according to the treatment plan and goals set by their physiotherapist. Our patient analytics dashboard will allow patients to view their current treatment goals, reports from previous exercise sessions, and upcoming appointments and interact with their physiotherapist through an in-built chat feature. These features will ensure the increase in accessibility and treatment adherence for patients by eliminating hindrances such as wait time, physiotherapy center location, and treatment costs.

Through PhizzIO, the physiotherapist would be able to track the patient's progress and guide them through their treatment journey through a more accurate and personalized approach. We also aim to provide various center analytics features to help the therapist better manage their patients' treatment plans and optimize the time and cost efficiency of the physiotherapy center. Physiotherapists will be able to view the patients' adherence rates and consistency of at-home sessions as well as update their at-home treatment plans with highly specific metrics and progress goals. These features will provide the physiotherapy centers with a platform to track the entire patient recovery journey by now being able to access their at-home exercise data. Through the newfound data, the therapy centers will be able to provide personalized plans for patients and expedite their recovery; this will, in turn, increase the reputation and the treatment quality of the physiotherapy center.

How we built it

PhizzIO has several facets, and its integral part is the form guide. We build the exercise form guide in Python using the media pipe pose estimation library. Leveraging real pose estimation, we determined biomechanical angles for each exercise that is performed by physiotherapy patients in general and built the guide. The guide also has an interactive UI with circles that fill up and turn green with the right posture and red with the wrong posture. 
We used the Tembo stack as our database and used the Tembo standard stack to store patient, physiotherapist, exercise, and log data from the application.
The application was built with flask as the backend connecting the database, the form guide, and the UI. For the UI we used HTML, Javascript, and CSS to stylize and make the frontend easy to use.

Challenges we ran into

During the course of our project, we encountered several notable challenges, each requiring careful consideration and strategic navigation to overcome. One such challenge arose from the necessity to reevaluate our project objectives in light of time constraints and practical feasibility. This process led to the difficult decision to abandon a feature that had been under development for a significant duration, despite the considerable investment of effort and resources. Our team grappled with the task of realigning our goals with the project's requirements, ensuring that our endeavors remained focused and conducive to progress.

Furthermore, the integration of new libraries and technologies (Tailwind REACT) posed a unique set of challenges. As we sought to incorporate these innovations into our existing framework, we encountered complexities in compatibility, functionality, and implementation. The process of adapting to unfamiliar technologies demanded thorough research, experimentation, and collaboration among team members. Despite these hurdles, we remained steadfast in our commitment to delivering a robust and refined solution, leveraging our collective expertise and problem-solving skills to address each challenge head-on.

Accomplishments that we're proud of

We are proud of completing this project and getting a working application in 24 hours. This application is a passion project for us as Joe, one of the team members tore his ACL and was finding it extremely difficult to adhere to this treatment. We built PhizzIO so that no one has to go through what Joe had to go through during his painful recovery process. We were able to learn a lot about software development, web development, pose estimation, and tembo! and we will apply what we learned into our careers.
We are also proud to get the form guide working as it has several use cases and will definitely help several patients and individuals.

What we learned

During this hackathon, we learned a very important lesson, which was to never give up and pursue what we truly believe in. There were several moments when the Flask library was not working and the pose estimation gave unreliable results, but we stuck true our vision and had an iterative debugging process that helped us overcome all of those hurdles.
We also learned a lot about new technology like Tembo which is built on top of Postgres and it was cool to use it in our application.

What's next for PhizzIO

Moving forward, we would like to integrate an AI chatbot into the patient view that is able to assist the patient with inquiries about their treatment plans, and exercise routines and motivate them through audio outputs as they do their exercises. Additionally, we would also like to create a large data set of physiotherapy exercises with detailed descriptions of their uses and techniques.  
",https://github.com/aniruddh-alt/PhizzIO_RevUC.git,https://youtu.be/1iIIgVzMYlc,"python, flask, html, css, javascript, tembo",,University of Cincinnati,2,230-6,University of Cincinnati,"This hackathon was a great learning experience because it helped us learn a lot about tembo and use tembo stacks. We got hands-on experience with the tembo vector and standard stack and even integrated the tembo stack into our application. Tembo is very easy to use compared to the open source postgres database.

We also had a great experience working with github as it helped us collaborate between multiple developers and the github copilot helped us debug several codes along the way.

The mediapipe pose estimation framework was also something we learnt during this hackathon and used to develop form guides for the patient to use and perform the exercise. We used Flask for the backend and worked with JS, HTML and CSS on the front end.",PhizzIO.tech
Parkinson's Together Synapse Sprint,PhizzIO,https://revolutionuc2024.devpost.com/submissions/484912-phizzio,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:51:03,"Inspiration

PhizzIO was born out of a personal experience that struck a chord with our teammate, Joe. After tearing his ACL, Joe embarked on a challenging journey of physiotherapy, which presented various accessibility and adherence issues. Moreover, he often found himself lacking confidence in his recovery, battling the temptation to give up. As friends and roommates, it was very painful to see him struggle with his treatment and suffer through various physical and mental challenges it posed. 

Additionally, something that made this period of constant pain and discomfort so much more difficult for him was that he only received a piece of paper to guide him through his at-home exercises. This approach to the at-home treatment didn't give him the confidence or support to push through the pain and achieve the recovery he needed. 

Joe's physiotherapy journey helped us recognize a need for a supportive and interactive at-home physiotherapy assistant who guides, monitors, and motivates patients throughout their physiotherapy journey. We were able to gather further validation for our claims after talking to other patients and physiotherapists along with various peer-reviewed research articles, allowing us to understand the need for an interactive physiotherapy assistant. Additionally, we also aim to engage with physiotherapists to ensure the presence of a medical expert throughout the patient's journey. 

Our vision for PhizzIO extends beyond just an exercise support application; it's a holistic approach to personalized physiotherapy, fostering confidence, accessibility, and motivation for users throughout their recovery journey.

What it does

The various features of PhizzIO fall into two categories: the patient view and the physiotherapist view. The presence of both parties allows for PhizzIO to be a is an interactive platform that enables seamless interaction between patients and physiotherapists. 

PhizzIO enables the patient to perform their exercises with confidence and precision through our advanced form guide that tracks the patients' movements and provides them with real-time feedback according to the treatment plan and goals set by their physiotherapist. Our patient analytics dashboard will allow patients to view their current treatment goals, reports from previous exercise sessions, and upcoming appointments and interact with their physiotherapist through an in-built chat feature. These features will ensure the increase in accessibility and treatment adherence for patients by eliminating hindrances such as wait time, physiotherapy center location, and treatment costs.

Through PhizzIO, the physiotherapist would be able to track the patient's progress and guide them through their treatment journey through a more accurate and personalized approach. We also aim to provide various center analytics features to help the therapist better manage their patients' treatment plans and optimize the time and cost efficiency of the physiotherapy center. Physiotherapists will be able to view the patients' adherence rates and consistency of at-home sessions as well as update their at-home treatment plans with highly specific metrics and progress goals. These features will provide the physiotherapy centers with a platform to track the entire patient recovery journey by now being able to access their at-home exercise data. Through the newfound data, the therapy centers will be able to provide personalized plans for patients and expedite their recovery; this will, in turn, increase the reputation and the treatment quality of the physiotherapy center.

How we built it

PhizzIO has several facets, and its integral part is the form guide. We build the exercise form guide in Python using the media pipe pose estimation library. Leveraging real pose estimation, we determined biomechanical angles for each exercise that is performed by physiotherapy patients in general and built the guide. The guide also has an interactive UI with circles that fill up and turn green with the right posture and red with the wrong posture. 
We used the Tembo stack as our database and used the Tembo standard stack to store patient, physiotherapist, exercise, and log data from the application.
The application was built with flask as the backend connecting the database, the form guide, and the UI. For the UI we used HTML, Javascript, and CSS to stylize and make the frontend easy to use.

Challenges we ran into

During the course of our project, we encountered several notable challenges, each requiring careful consideration and strategic navigation to overcome. One such challenge arose from the necessity to reevaluate our project objectives in light of time constraints and practical feasibility. This process led to the difficult decision to abandon a feature that had been under development for a significant duration, despite the considerable investment of effort and resources. Our team grappled with the task of realigning our goals with the project's requirements, ensuring that our endeavors remained focused and conducive to progress.

Furthermore, the integration of new libraries and technologies (Tailwind REACT) posed a unique set of challenges. As we sought to incorporate these innovations into our existing framework, we encountered complexities in compatibility, functionality, and implementation. The process of adapting to unfamiliar technologies demanded thorough research, experimentation, and collaboration among team members. Despite these hurdles, we remained steadfast in our commitment to delivering a robust and refined solution, leveraging our collective expertise and problem-solving skills to address each challenge head-on.

Accomplishments that we're proud of

We are proud of completing this project and getting a working application in 24 hours. This application is a passion project for us as Joe, one of the team members tore his ACL and was finding it extremely difficult to adhere to this treatment. We built PhizzIO so that no one has to go through what Joe had to go through during his painful recovery process. We were able to learn a lot about software development, web development, pose estimation, and tembo! and we will apply what we learned into our careers.
We are also proud to get the form guide working as it has several use cases and will definitely help several patients and individuals.

What we learned

During this hackathon, we learned a very important lesson, which was to never give up and pursue what we truly believe in. There were several moments when the Flask library was not working and the pose estimation gave unreliable results, but we stuck true our vision and had an iterative debugging process that helped us overcome all of those hurdles.
We also learned a lot about new technology like Tembo which is built on top of Postgres and it was cool to use it in our application.

What's next for PhizzIO

Moving forward, we would like to integrate an AI chatbot into the patient view that is able to assist the patient with inquiries about their treatment plans, and exercise routines and motivate them through audio outputs as they do their exercises. Additionally, we would also like to create a large data set of physiotherapy exercises with detailed descriptions of their uses and techniques.  
",https://github.com/aniruddh-alt/PhizzIO_RevUC.git,https://youtu.be/1iIIgVzMYlc,"python, flask, html, css, javascript, tembo",,University of Cincinnati,2,230-6,University of Cincinnati,"This hackathon was a great learning experience because it helped us learn a lot about tembo and use tembo stacks. We got hands-on experience with the tembo vector and standard stack and even integrated the tembo stack into our application. Tembo is very easy to use compared to the open source postgres database.

We also had a great experience working with github as it helped us collaborate between multiple developers and the github copilot helped us debug several codes along the way.

The mediapipe pose estimation framework was also something we learnt during this hackathon and used to develop form guides for the patient to use and perform the exercise. We used Flask for the backend and worked with JS, HTML and CSS on the front end.",PhizzIO.tech
Best Product Market Fit (Center for Entrepreneurship),PhizzIO,https://revolutionuc2024.devpost.com/submissions/484912-phizzio,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:51:03,"Inspiration

PhizzIO was born out of a personal experience that struck a chord with our teammate, Joe. After tearing his ACL, Joe embarked on a challenging journey of physiotherapy, which presented various accessibility and adherence issues. Moreover, he often found himself lacking confidence in his recovery, battling the temptation to give up. As friends and roommates, it was very painful to see him struggle with his treatment and suffer through various physical and mental challenges it posed. 

Additionally, something that made this period of constant pain and discomfort so much more difficult for him was that he only received a piece of paper to guide him through his at-home exercises. This approach to the at-home treatment didn't give him the confidence or support to push through the pain and achieve the recovery he needed. 

Joe's physiotherapy journey helped us recognize a need for a supportive and interactive at-home physiotherapy assistant who guides, monitors, and motivates patients throughout their physiotherapy journey. We were able to gather further validation for our claims after talking to other patients and physiotherapists along with various peer-reviewed research articles, allowing us to understand the need for an interactive physiotherapy assistant. Additionally, we also aim to engage with physiotherapists to ensure the presence of a medical expert throughout the patient's journey. 

Our vision for PhizzIO extends beyond just an exercise support application; it's a holistic approach to personalized physiotherapy, fostering confidence, accessibility, and motivation for users throughout their recovery journey.

What it does

The various features of PhizzIO fall into two categories: the patient view and the physiotherapist view. The presence of both parties allows for PhizzIO to be a is an interactive platform that enables seamless interaction between patients and physiotherapists. 

PhizzIO enables the patient to perform their exercises with confidence and precision through our advanced form guide that tracks the patients' movements and provides them with real-time feedback according to the treatment plan and goals set by their physiotherapist. Our patient analytics dashboard will allow patients to view their current treatment goals, reports from previous exercise sessions, and upcoming appointments and interact with their physiotherapist through an in-built chat feature. These features will ensure the increase in accessibility and treatment adherence for patients by eliminating hindrances such as wait time, physiotherapy center location, and treatment costs.

Through PhizzIO, the physiotherapist would be able to track the patient's progress and guide them through their treatment journey through a more accurate and personalized approach. We also aim to provide various center analytics features to help the therapist better manage their patients' treatment plans and optimize the time and cost efficiency of the physiotherapy center. Physiotherapists will be able to view the patients' adherence rates and consistency of at-home sessions as well as update their at-home treatment plans with highly specific metrics and progress goals. These features will provide the physiotherapy centers with a platform to track the entire patient recovery journey by now being able to access their at-home exercise data. Through the newfound data, the therapy centers will be able to provide personalized plans for patients and expedite their recovery; this will, in turn, increase the reputation and the treatment quality of the physiotherapy center.

How we built it

PhizzIO has several facets, and its integral part is the form guide. We build the exercise form guide in Python using the media pipe pose estimation library. Leveraging real pose estimation, we determined biomechanical angles for each exercise that is performed by physiotherapy patients in general and built the guide. The guide also has an interactive UI with circles that fill up and turn green with the right posture and red with the wrong posture. 
We used the Tembo stack as our database and used the Tembo standard stack to store patient, physiotherapist, exercise, and log data from the application.
The application was built with flask as the backend connecting the database, the form guide, and the UI. For the UI we used HTML, Javascript, and CSS to stylize and make the frontend easy to use.

Challenges we ran into

During the course of our project, we encountered several notable challenges, each requiring careful consideration and strategic navigation to overcome. One such challenge arose from the necessity to reevaluate our project objectives in light of time constraints and practical feasibility. This process led to the difficult decision to abandon a feature that had been under development for a significant duration, despite the considerable investment of effort and resources. Our team grappled with the task of realigning our goals with the project's requirements, ensuring that our endeavors remained focused and conducive to progress.

Furthermore, the integration of new libraries and technologies (Tailwind REACT) posed a unique set of challenges. As we sought to incorporate these innovations into our existing framework, we encountered complexities in compatibility, functionality, and implementation. The process of adapting to unfamiliar technologies demanded thorough research, experimentation, and collaboration among team members. Despite these hurdles, we remained steadfast in our commitment to delivering a robust and refined solution, leveraging our collective expertise and problem-solving skills to address each challenge head-on.

Accomplishments that we're proud of

We are proud of completing this project and getting a working application in 24 hours. This application is a passion project for us as Joe, one of the team members tore his ACL and was finding it extremely difficult to adhere to this treatment. We built PhizzIO so that no one has to go through what Joe had to go through during his painful recovery process. We were able to learn a lot about software development, web development, pose estimation, and tembo! and we will apply what we learned into our careers.
We are also proud to get the form guide working as it has several use cases and will definitely help several patients and individuals.

What we learned

During this hackathon, we learned a very important lesson, which was to never give up and pursue what we truly believe in. There were several moments when the Flask library was not working and the pose estimation gave unreliable results, but we stuck true our vision and had an iterative debugging process that helped us overcome all of those hurdles.
We also learned a lot about new technology like Tembo which is built on top of Postgres and it was cool to use it in our application.

What's next for PhizzIO

Moving forward, we would like to integrate an AI chatbot into the patient view that is able to assist the patient with inquiries about their treatment plans, and exercise routines and motivate them through audio outputs as they do their exercises. Additionally, we would also like to create a large data set of physiotherapy exercises with detailed descriptions of their uses and techniques.  
",https://github.com/aniruddh-alt/PhizzIO_RevUC.git,https://youtu.be/1iIIgVzMYlc,"python, flask, html, css, javascript, tembo",,University of Cincinnati,2,230-6,University of Cincinnati,"This hackathon was a great learning experience because it helped us learn a lot about tembo and use tembo stacks. We got hands-on experience with the tembo vector and standard stack and even integrated the tembo stack into our application. Tembo is very easy to use compared to the open source postgres database.

We also had a great experience working with github as it helped us collaborate between multiple developers and the github copilot helped us debug several codes along the way.

The mediapipe pose estimation framework was also something we learnt during this hackathon and used to develop form guides for the patient to use and perform the exercise. We used Flask for the backend and worked with JS, HTML and CSS on the front end.",PhizzIO.tech
Best .Tech Domain Name,PhizzIO,https://revolutionuc2024.devpost.com/submissions/484912-phizzio,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:51:03,"Inspiration

PhizzIO was born out of a personal experience that struck a chord with our teammate, Joe. After tearing his ACL, Joe embarked on a challenging journey of physiotherapy, which presented various accessibility and adherence issues. Moreover, he often found himself lacking confidence in his recovery, battling the temptation to give up. As friends and roommates, it was very painful to see him struggle with his treatment and suffer through various physical and mental challenges it posed. 

Additionally, something that made this period of constant pain and discomfort so much more difficult for him was that he only received a piece of paper to guide him through his at-home exercises. This approach to the at-home treatment didn't give him the confidence or support to push through the pain and achieve the recovery he needed. 

Joe's physiotherapy journey helped us recognize a need for a supportive and interactive at-home physiotherapy assistant who guides, monitors, and motivates patients throughout their physiotherapy journey. We were able to gather further validation for our claims after talking to other patients and physiotherapists along with various peer-reviewed research articles, allowing us to understand the need for an interactive physiotherapy assistant. Additionally, we also aim to engage with physiotherapists to ensure the presence of a medical expert throughout the patient's journey. 

Our vision for PhizzIO extends beyond just an exercise support application; it's a holistic approach to personalized physiotherapy, fostering confidence, accessibility, and motivation for users throughout their recovery journey.

What it does

The various features of PhizzIO fall into two categories: the patient view and the physiotherapist view. The presence of both parties allows for PhizzIO to be a is an interactive platform that enables seamless interaction between patients and physiotherapists. 

PhizzIO enables the patient to perform their exercises with confidence and precision through our advanced form guide that tracks the patients' movements and provides them with real-time feedback according to the treatment plan and goals set by their physiotherapist. Our patient analytics dashboard will allow patients to view their current treatment goals, reports from previous exercise sessions, and upcoming appointments and interact with their physiotherapist through an in-built chat feature. These features will ensure the increase in accessibility and treatment adherence for patients by eliminating hindrances such as wait time, physiotherapy center location, and treatment costs.

Through PhizzIO, the physiotherapist would be able to track the patient's progress and guide them through their treatment journey through a more accurate and personalized approach. We also aim to provide various center analytics features to help the therapist better manage their patients' treatment plans and optimize the time and cost efficiency of the physiotherapy center. Physiotherapists will be able to view the patients' adherence rates and consistency of at-home sessions as well as update their at-home treatment plans with highly specific metrics and progress goals. These features will provide the physiotherapy centers with a platform to track the entire patient recovery journey by now being able to access their at-home exercise data. Through the newfound data, the therapy centers will be able to provide personalized plans for patients and expedite their recovery; this will, in turn, increase the reputation and the treatment quality of the physiotherapy center.

How we built it

PhizzIO has several facets, and its integral part is the form guide. We build the exercise form guide in Python using the media pipe pose estimation library. Leveraging real pose estimation, we determined biomechanical angles for each exercise that is performed by physiotherapy patients in general and built the guide. The guide also has an interactive UI with circles that fill up and turn green with the right posture and red with the wrong posture. 
We used the Tembo stack as our database and used the Tembo standard stack to store patient, physiotherapist, exercise, and log data from the application.
The application was built with flask as the backend connecting the database, the form guide, and the UI. For the UI we used HTML, Javascript, and CSS to stylize and make the frontend easy to use.

Challenges we ran into

During the course of our project, we encountered several notable challenges, each requiring careful consideration and strategic navigation to overcome. One such challenge arose from the necessity to reevaluate our project objectives in light of time constraints and practical feasibility. This process led to the difficult decision to abandon a feature that had been under development for a significant duration, despite the considerable investment of effort and resources. Our team grappled with the task of realigning our goals with the project's requirements, ensuring that our endeavors remained focused and conducive to progress.

Furthermore, the integration of new libraries and technologies (Tailwind REACT) posed a unique set of challenges. As we sought to incorporate these innovations into our existing framework, we encountered complexities in compatibility, functionality, and implementation. The process of adapting to unfamiliar technologies demanded thorough research, experimentation, and collaboration among team members. Despite these hurdles, we remained steadfast in our commitment to delivering a robust and refined solution, leveraging our collective expertise and problem-solving skills to address each challenge head-on.

Accomplishments that we're proud of

We are proud of completing this project and getting a working application in 24 hours. This application is a passion project for us as Joe, one of the team members tore his ACL and was finding it extremely difficult to adhere to this treatment. We built PhizzIO so that no one has to go through what Joe had to go through during his painful recovery process. We were able to learn a lot about software development, web development, pose estimation, and tembo! and we will apply what we learned into our careers.
We are also proud to get the form guide working as it has several use cases and will definitely help several patients and individuals.

What we learned

During this hackathon, we learned a very important lesson, which was to never give up and pursue what we truly believe in. There were several moments when the Flask library was not working and the pose estimation gave unreliable results, but we stuck true our vision and had an iterative debugging process that helped us overcome all of those hurdles.
We also learned a lot about new technology like Tembo which is built on top of Postgres and it was cool to use it in our application.

What's next for PhizzIO

Moving forward, we would like to integrate an AI chatbot into the patient view that is able to assist the patient with inquiries about their treatment plans, and exercise routines and motivate them through audio outputs as they do their exercises. Additionally, we would also like to create a large data set of physiotherapy exercises with detailed descriptions of their uses and techniques.  
",https://github.com/aniruddh-alt/PhizzIO_RevUC.git,https://youtu.be/1iIIgVzMYlc,"python, flask, html, css, javascript, tembo",,University of Cincinnati,2,230-6,University of Cincinnati,"This hackathon was a great learning experience because it helped us learn a lot about tembo and use tembo stacks. We got hands-on experience with the tembo vector and standard stack and even integrated the tembo stack into our application. Tembo is very easy to use compared to the open source postgres database.

We also had a great experience working with github as it helped us collaborate between multiple developers and the github copilot helped us debug several codes along the way.

The mediapipe pose estimation framework was also something we learnt during this hackathon and used to develop form guides for the patient to use and perform the exercise. We used Flask for the backend and worked with JS, HTML and CSS on the front end.",PhizzIO.tech
Best Educational Hack,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Design Hack,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Social Impact Hack,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
"Best ""Useless"" Hack",RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
EnableUC Challenge,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Use of Postgres (Tembo),RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Use of AWS,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Implementation of an LLM or Other Generative AI Model (CincyTech),RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
UC Climate Action Plan Challenge (Metamorphosis Consulting),RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Product Market Fit (Center for Entrepreneurship),RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best .Tech Domain Name,RF Shield ,https://revolutionuc2024.devpost.com/submissions/484918-rf-shield,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 03:55:28,"Project Story: RF Shield

Inspiration

The inspiration for RF Shield stemmed from a deep concern for the potential health risks associated with prolonged exposure to RF radiation from nearby communication towers. Recognizing the lack of accessible tools for individuals to assess their exposure risk, we were driven to develop a solution that empowers people to make informed decisions about their living environment.

Learning Journey

Throughout the development of RF Shield, we delved into various domains, including data collection, geospatial analysis, natural language processing (NLP), and web development. We learned the intricacies of RF radiation, the importance of accurate geolocation data, and the nuances of summarizing news articles effectively. Embracing emerging technologies like Gemini Pro LLM, we explored innovative ways to deliver insights to our users.

Getting Started

Starting with RF-Shield is simple. Just input your address, and we'll determine whether the area is shielded from radiation or exposed to it.

What it does

Discover the capabilities of RF-Shield:


Cellular Tower Locations: We provide cellular tower locations on map which are represented with red circles 
Cellular Towers Proximity: We're displaying a map that highlights all cellular towers in your vicinity.
Locational Mapping and Radius Highlighting of Cellular Towers: In another map, we're specifically targeting the entered address and delineating a circular area according to scientific measurements to determine whether the area is an RF-Free zone or not.
Identify RF-Shielded/RF-Exposed Area: We're indicating whether your entered address falls within an RF-Shielded area or an RF-Exposed area.
Color-Coded Representation of RF-Shielded and RF-Exposed Areas:If the entered area is an RF-Shielded area, it will be designated with a blue circular border, otherwise, the same territory border will be marked in red.
Latest Trending News on Relevant Issues: It's crucial to stay informed about developments in your area, particularly regarding plans for installing cellular towers or related news. Currently, we're providing the top 5 most relevant articles to help our customers stay informed about these issues.


How we built it

Part 1: Check Tower Proximity:


Our project began with extensive research, compiling a comprehensive dataset of RF tower locations across the US by utilizing publicly available sources.
We established the Python environment, integrating Streamlit and its libraries such as Folium, Geodesic, Nominatim, and Google.generativeai.
The cellular tower dataset underwent cleaning, where we converted the current tower locations represented in degrees, minutes, and seconds into decimal form for convenient usage in the Folium map.
Subsequently, the tower locations' latitude and longitude coordinates were incorporated into the Folium map.
Utilizing Nominatim, we accessed the latitude and longitude of the entered location.
We calculated the distances between the entered location and tower locations using latitude and longitude coordinates.
A scientific threshold was established, with distances less than 400 meters deemed significant.
If the distance fell below 400 meters, the area was labeled RF-Exposed, indicated by a circular proximity marked in red along with a corresponding notification. Otherwise, the area was designated RF-Shielded, featuring a circular proximity marked in green accompanied by a relevant message. 


Part 2: Access News and Nearby Tower Developments


Data Acquisition with Serp API and Web Scraping: Employing the Serp API, we meticulously gathered the latest news articles from the Google Search Engine, ensuring a comprehensive dataset for analysis. Subsequently, leveraging the capabilities of Beautiful Soup, a Python library renowned for its web scraping proficiency, we refined our data collection process, enhancing its accuracy and efficiency.
Content Extraction and Storage: With a repository of URLs procured through our initial data acquisition phase, we meticulously extracted the content of news articles. This content was meticulously stored in separate files, establishing a structured foundation for subsequent analysis and processing.
Advanced Summarization Techniques with Retrieval Augmented Generation (RAG): Leveraging cutting-edge methodologies, we employed the Retrieval Augmented Generation (RAG) technique to distill key insights from the amassed news content. By interfacing the scraped content with state-of-the-art language models, notably Google's Gemini Pro model tailored for news article summarization, we facilitated the generation of concise and informative summaries. This approach ensured not only the efficiency of summarization but also the preservation of contextual relevance and factual accuracy.


Part 3: Deployment to AWS


We created an ubuntu EC2 instance on AWS and then used ssh to deploy our application on the EC2 instance.


Part 4: Domain Tech 


We created the domain name for our application: http://rf-shield.rf-secure.tech/ and linked it to the public IP of our EC2 instance. Luckily DNS entries seem to have been updated so our application is live and you can check it out at the url above.


Challenges Faced

Building RF Shield presented several challenges, including:
-Initially, we began by utilizing st.map, the Streamlit map functionality, particularly for drawing circular areas on the map. However, we soon encountered limitations and realized it wasn't conducive to achieving our desired outcomes.
-We delved into other map libraries and discovered Folium, which met our expectations.
-We needed to familiarize ourselves with Folium and its associated libraries, encountering some challenges during the environment setup process.


Ensuring data accuracy and completeness in the tower dataset.
Optimizing geospatial calculations for efficient real-time analysis.
Fine-tuning the NLP model to generate concise and informative article summaries.
Designing an intuitive user interface for seamless interaction.
We had to use an ubuntu instance and not aws linux 2 because it was impossible to ssh into the instance no matter how hard we tried. It worked for the first 5 minutes after the instance was created and then refused to work after that.
We also couldn't use the API keys for script access to AWS, hence we had to make our deployments manually.


Despite these challenges, our team remained dedicated to delivering a robust and user-friendly solution.

What we learned

Our journey with RF-Shield has been a learning experience filled with valuable insights:


User-Centric Development: Our project's user-centered approach ensures that safety and convenience are at the forefront of our design.
Data-Driven Decision-Making: We've harnessed data analytics to make area safety recommendations based on actual cellular tower locations, promoting informed choices.
Maps Integration: We successfully integrated Maps into Streamlit, broadening our technical skills.
Versatile Functionalities: We delved into the diverse capabilities of  Maps within the Streamlit platform, including the use of folium.CircleMarker and folium.Circle and more.
Collaboration and Innovation: Our experience demonstrates the power of collaboration and innovation in addressing real-world issues and making a positive impact.


Accomplishments that we're proud of

RF-Shield, a platform that displays cellular tower locations on a map and identifies whether an area is RF-Shielded or RF-Exposed, is distinguished for several key reasons:

Safety-Centric: Our project prioritizes population safety from mental and cancer-related disorders, which are critical global concerns. By offering information on RF-prone areas and safety recommendations, we prioritize your health and well-being. 
Data-Driven: Our project relies on data and technology to analyze and present pertinent information. This data-driven approach enables users to make informed decisions based on real-time or historical accident data. 
User Empowerment: Our project empowers users by equipping them with tools and knowledge to make informed choices when buying or renting homes, selecting schools for their children, or choosing office locations. It places safety decisions directly in the hands of individuals. 
Preventative Measures: Instead of reacting to mental disorder or cancer-related issues after they've occurred, our project adopts a proactive stance. By identifying potential danger zones beforehand, users can avoid residing, working, or studying in hazardous areas. 
Promoting Awareness: Our project raises awareness about mental health issues and cancers caused by cellular towers and underscores the importance of informed decision-making. It encourages users to take proactive steps toward their safety.
Community Impact: By safeguarding communities from hazardous RF radiations, we anticipate positive effects on the health insurance and real estate industries. Our project has the potential to positively impact local communities and alleviate the strain on health services.

What's next for Safe-Roads


 Color the map according to the proximity of the towers.
 Bringing safety on the go with our upcoming mobile app.
Real-time alerts for cellular tower registrations within your area.
Guidelines for raising objections to such registrations.


Conclusion

RF Shield embodies our commitment to leveraging technology for the betterment of society. By providing users with actionable insights into RF radiation exposure and government initiatives, we aim to empower individuals to safeguard their health and well-being. As we continue to iterate and improve RF Shield, we look forward to making a meaningful impact on public awareness and safety.
","http://rf-shield.rf-secure.tech/, https://github.com/Hrishikesh-Bhide/rf-shield",https://youtu.be/0cqgb_-rxwY,"python, streamlit, folium, geopy, tembo, amazon-web-services, github, domain.tech, serp-api, llm, gemini-pro, webscraping, rag",,University of Cincinnati,3,Lobby2 - 30,University of Cincinnati,"Leveraging LLM effectively:
1. Utilizing Serp API, we accessed the latest news articles from the Google Search Engine and stored them, employing Beautiful Soup for web scraping.
2. We extracted news article content from the URLs obtained in step 1 and stored the scraped content separately.
3. Employing the Retrieval augmented generation (RAG) technique, we provided the scraped content to the language model along with prompts for summarizing the news articles. Google's Gemini Pro model was utilized for news article summarization.
4. GitHub: We utilized GitHub to manage our code versions and contributions.
5. AWS: Our experience with AWS has always been great. Inspite of some early hiccups, it was excellent to see our application accessible worldwide thanks to AWS.
6. Tech Domain: The .tech Domain provided for our project ensured that we were not left with having to copy the IP address of the EC2 all the time just to access our application.",http://rf-shield.rf-secure.tech/
Best Design Hack,Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Best Social Impact Hack,Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Best Use of Postgres (Tembo),Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Best Implementation of an LLM or Other Generative AI Model (CincyTech),Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Parkinson's Together Synapse Sprint,Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
Best Product Market Fit (Center for Entrepreneurship),Memento,https://revolutionuc2024.devpost.com/submissions/484937-memento,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 04:31:51,"Inspiration

With this hackathon, we knew that to make an impact, we would need to create something that gave back to our community, was scalable, and made an impact in the medical field. In 2023, Grant's grandfather Jere was diagnosed with Alzheimerâ€™s disease. His grandmother has since become an advocate in the city of Cincinnati OH, participating annually in the Alzheimerâ€™s Association Walk to End Alzheimerâ€™s, even appearing on the televised news to spread awareness of the disease. 

After having a conversation with Grandmother about the effects Alzheimerâ€™s has had on his grandfather Jere in the past year, we came to realize that there were many persistent and pervasive unmet needs related to making those with the disease more independent, assisting in caregiving roles, and allowing clinical teams to access qualitative data.

With this issue in mind, we asked ourselves: â€¨â€¨How might we develop an app-based integration that serves to aid caregivers and those with the disease, while also contributing to Alzheimerâ€™s clinical research?

What it does

Introducing Memento, a digital journal for those with degenerative cognitive diseases. Memento aims to act like a long-term memory, retaining knowledge of the information provided in the userâ€™s journal entries. Memento can be fed images, audio recordings, and locations to form a coherent summary of your life, and can be easily accessed by asking Memento a question in the â€œchatâ€ section of the app. 
This supplies patients and their caretakers with a daily view on the home page (most recent on the top), and a weekly/monthly/yearly view in the library page. This would assist someone who may be confused to simply pull up the previous dayâ€™s activities, serving as an archive of their day-to-day routines and events that are special to them, and ultimately providing them with independence and more structure. 
Finally, the qualitative and quantitative data (i.e frequency of repeatedly asked questions in the chat feature) can be relayed to the patientâ€™s healthcare provider to track worsening symptoms & progression of illness.

How we built it

We built this through a combination of React.js, Python, Flask in Python, and Postgres supported by Tembo. Our AI assistant built off of KeyBERT and GPT3.5-turbo-0125 allows us to generate personalized and human answers from the journal entries stored in Tembo. We also used Figma to prototype and design all the UX/UI elements.

Challenges we ran into

This project is very complicated by nature because not only are we trying to make the user experience intuitive, but we are also trying to use the journal data stored efficiently and effectively. Initially, our plan was to use ReactNative through Expo (cloud-based platform for mobile app development) but we encountered multiple issues regarding styling and IOS optimization in general. We then pivoted to XCode for a short period of time but because of our lack of experience in SwiftUI, we found that we could not support our core functionalities. We eventually came to React.js to build a web app that is scaled for mobile with all the aforementioned functionalities. To compensate for the lack of a native mobile app, we replicated our vision as closely as possible in the time frame we had via Figma to show the UX/UI elements.

One other issue we ran into while trying to host our text processor on the cloud was that the Google Cloud Run kept running out of system memory (we were limited to 8GB of system memory) and we had to then switch to a proxy server. In theory, the code should plug and play into Google Cloud Run, BUT we weren't able to do that due to memory limitations.

Accomplishments that we're proud of

Successfully setting up all the core functionalities we were aiming to tackle, including being able to provide non-robotic, emotion-based responses to very distraught patients.
We were able to seed a dataset of 7 days to show off the capabilities of journaling, picture storage, and assistant querying to effectively help the user recall and connect memories.
One major win was the successful setup of Tembo and learning how to vectorize a table by creating a job that would return us entries related to keywords.

We were also able to set up a doctor's view, this website is meant specifically for doctors and is separate from the patient web app. The doctor would be able to access what the patient commonly forgets and maybe draw some insights from that. In the future, this would expand to connecting vital data from the Apple watch, weather, etc, and try to help researchers gather relevant accurate data.

What we learned

We are horrible when it comes to implementing it natively in a web app. Jokes aside, we learned a lot about how Swift works through Xcode and also how Expo works through React Native. None of us have ever tackled the front end from a ""make it look pretty/usable"" perspective, so this was a huge learning journey, both through market research on how UI is designed for certain age groups and also about implementing it in a reusable manner.

From the Design side of things, this was the first time trying to make a very polished demo of an app as opposed to just a rough concept sketch. Even though our team comp was not suited for XCode/ReactNative development, we are very proud that we tried to. The workshop hosted by NIS (Next Innovation Scholars) allowed us to create different solutions by imagining different futures where the well-being of Alzheimer's patients had improved. 

What's next for Momento

Using the Figma mockup we have, we would like to create an IOS version of what we have so far as well as create more views for both the caretaker and flashbacks. Within our doctor view, we would explore ways to correlate vitals to certain aspects of cognitive research. We would also like to host our AI code online instead of locally. This would allow us to handle multiple clients at a time as well as make future updates easier. One of the things we were inspired by was Apple's IOS 17 journal app which allows for journal entries with location tags and pictures. This would make journal entries much easier for the elderly and help provide us with more data for MomentoAI.

Another aspect we would like to add to the app is support for other types of data. This is because there is a https://news.harvard.edu/gazette/story/2020/02/how-scent-emotion-and-memory-are-intertwined-and-exploited/ Harvard study showing that our senses are connected to our emotions and certain memories. Our app would be able to record all instances where the user had a sudden burst of memories linked to certain environmental stimuli and act as a portal to enable them to visit similar memories by replication of similar stimuli.

Lastly, using the journal entries/ location data/ contact proximity/ doctor notes integration, we could help the user form a healthier routine and be notified of medicine timings.
","https://www.figma.com/proto/erROWsOL51r6QzkusSEsRl/%F0%9F%93%B2Wireframes-for-mobile-UI-design-(Community)?page-id=35%3A0&type=design&node-id=1051-1372&viewport=-1167%2C332%2C0.36&t=5zmUWSU1KhOOQaec-1&scaling=min-zoom&starting-point-node-id=1051%3A1372, https://github.com/KaaustaaubShankar/Memento, https://docs.google.com/document/d/1e1iQOqEsmuhZ7-4j_aw0FXPV_kOplAFzgrvRsg_Tp54/edit, https://docs.google.com/document/d/1hm1z_IlNrcm9ml3L6eCDtXrZOIGcJJ3Ju6FDNj6a4qw/edit?usp=sharing",https://youtu.be/fykiY8AYUsM?si=8jFx-yT-PuukX-47,"react, python, llm, gpt, bert, postgresql, flask, wikipedia, classifynet, keybert, tembo, swift, react-native, figma",,University of Cincinnati,3,Lobby2-29,University of Cincinnati,Tembo was a very interesting company to try. Their documentation wasnt great but the person I talked to (Jay) was very helpful and was there when we needed the help.,""
"Best ""Useless"" Hack",GameGenie,https://revolutionuc2024.devpost.com/submissions/484992-gamegenie,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 05:26:15,"Inspiration

Our team enjoys all kinds of card games, especially when playing with large groups. One of the games we play most often is euchre, often in tournaments, but we have struggled to find a way to create the optimal schedule. We sought to solve this problem, as well as create a way to keep score of this and many other card games.

What it does

Our application creates schedules and scorecards for a variety of card games including hearts and euchre. 

How we built it

We designed a desktop application using pyside6 and QT, using Python for all calculations.

Challenges we ran into

Finding the optimum scorecard for every player to see each other proved to be a difficult optimization problem, but it was something we were convinced was possible.

Accomplishments that we're proud of

None of our team members had ever designed an application of this style before, so we learned all about how to create a useful user interface with a different framework.

What we learned

We learned all about pyside6, QT, optimization algorithms, and creating user-friendly interfaces. 

What's next for GameGenie

Our team will continue to develop this project as it is something we are all passionate about and will use in our daily lives. 
",https://github.com/nrgrill/GameGenie,https://youtu.be/41HzVDWDUMQ,"python, pyside6, qt",,University of Cincinnati,2,355,University of Cincinnati,Python,""
"",Tradier ,"",Draft,Pending,Project details,02/25/2024 06:10:25,"Over the years, the investment landscape has been riddled with promises of revolutionary ""next-gen trading bots"" promising life-changing returns. Unfortunately, many of these turn out to be elaborate Ponzi schemes, with the infamous BitConnect scandal being a prime example. Investors lost over $2.4 billion to a purported ""trading bot"" that, in reality, never existed. In response to such deceptive practices, Tradier emerged. Our platform is dedicated to fostering a new era of trading by offering a decentralized, transparent environment for creating, investing in, and withdrawing from algorithmic trading bots. Tradier revolutionizes the world of trading through its unique NFT collection, leveraging the robust Avalanche C-chain. Each NFT in this collection is not just a digital asset but also functions as an individual wallet (under the ERC6551 standard), capable of holding and managing on-chain assets. What sets these NFTs apart is their embedded JavaScript code, which dictates their trading behaviors. This on-chain script is executed using Chainlink Functions, a groundbreaking feature that enables our trading bots to access both web2 APIs and external AI models, aiding in their decentralized decision-making process. The deployment of an NFT on Tradier allows the manager to set up automated trading strategies via Chainlink Automation's executeTrade function. This opens the door for external investors to engage with the NFT bot, allowing for both investment and withdrawal. To ensure equitable distribution of shares, the NFT bot utilizes Chainlink Data Feeds. This feature accurately assesses the current value of the wallet's tradable assets, thereby allocating shares in a fair and transparent manner. Moreover, the platform offers a smooth front-end interface for users to create, invest, withdraw, and even interact with ""Droidvisor"" which is powered by GPT-4 and Coinmarketcap to help you make informed decisions on the crypto market.

Challenges we ran into: 
Tradier, currently in its functional prototype phase, is poised for transformation into a Minimum Viable Product (MVP). To achieve this milestone, several key steps are outlined. Expansion of On-Chain Capabilities: We aim to broaden the range of on-chain actions. This includes integrating a variety of routers and functions, surpassing the current offerings, to enhance the versatility and efficiency of our trading bots. Infrastructure Enhancement: Another critical step involves refining the infrastructure to support events and logs more effectively. This enhancement is vital for accurately tracking profit/loss values and integrating performance fees along with other final features. Finalizing and Securing the Platform: The last phase involves a thorough cleanup of our test contracts. This includes removing hardcoded test addresses to ensure greater flexibility and security. Subsequently, a comprehensive audit of the contract will be conducted to ensure its integrity and reliability.
","https://tradier-original.vercel.app/, https://github.com/AdityaCubicles45/Tradier",https://youtu.be/7_aIi9eRS7k,"solidity, next.js, ether.js, openai, ethereum, chainlink, coinmarketcap, avalanche, thirdweb, react",,Parul University,0,"","","",""
Best .Tech Domain Name,Plant Parenthood,https://revolutionuc2024.devpost.com/submissions/485029-plant-parenthood,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:10:29,"Inspiration

Our project was inspired by close friends who struggle to keep track of the plants they have, we thought it would be great to create an application where they can track the plants they have and explore plants from our database. 

What it does

It allows users to look up plants and their information from a database. Ideally, users can store their plants on this website. You can tell the site when you planted the plant, and some other basic info about how you planted it. This helps gardeners keep track of what plants they do or don't have. We were unable to get to the last part of the code, but with more time, this is where we would expand our application. 

How we built it

We built it using html, CSS, bootstrap, GitHub pages, and .tech domain name. 

Challenges we ran into

Database management. Walking in, none of us had a lot of database  management experience. Since our plant info is stored in a database, this quickly proved to be one of the harder aspects of our coding journey. We had to learn the basics of how to read and write info to a database in order to get our application working. 

Accomplishments that we're proud of

We are proud of the fact that we were able to get our .tech domain name hooked up to our website. This process was a bit difficult, but we are happy that we were able to get it working. 

What we learned

We learned about hosting websites and database management.

What's next for Plant Parenthood

We would love to get to the second part of the project: implementing the My Garden feature which allows users to track their gardens. 
",http://theplantparenthood.tech,https://vimeo.com/916450863?share=copy,"python, html, .tech, github, css",,"University of Cincinnati, Northern Kentucky University",2,Lobby2-24,University of Cincinnati and Northern Kentucky University,"Overall, our technology experience was positive. We only had some troubles with our database, since it is something we are not too familiar with.","Yes, theplantparenthood.tech"
"",Untitled,"",Draft,Pending,Manage team,02/25/2024 06:12:59,"","",,"",,University of Cincinnati,0,"","","",""
"",Gravity-Glide-VR,https://revolutionuc2024.devpost.com/submissions/485037-gravity-glide-vr,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:17:55,"Inspiration

This game is inspired by the now defunct VR game, CyberSpace. Built for the Oculus Developer Kit 2, this simple ride is no longer playable. Being my first-ever VR game experience, I wanted to recreate this classic so that my friends and family can enjoy one of my old favorites.

What it does

It's a virtual reality game in which the user can experience a back-and-forth swing! This game will definitely put your fear of heights to the test.

How we built it

We built this game in the Godot game engine, making use of the built-in XR capabilities. To help expedite the development process, I made use of several free online assets like the grass texture, building models, and royalty free music packs.

Challenges we ran into

The biggest challenge, by far, was implementing the swing physics. Applying forces, adjusting torques, and googling how to fine-tune friction and drag proved to be quite the involved process.

Accomplishments that we're proud of

We are proud of some of the polish elements that help to elevate the experience. We were able to map the rides velocity to a range of decibel & pitch values, ensuring that the wind sound rushes by most vigorously at when moving at high speeds. 

What we learned

We gained experience using Godot to work with VR, learned several methods of applying forces to physics objects, and explored how to make the most out of lighting and sound effects.
",https://github.com/kyleyoung1121/Gravity-Glide-VR,https://youtu.be/yBy6ntdSaR4,"godot, oculus, love",,"",0,220-42,University of Cincinnati,"I developed this game using my home PC and my personal VR headset. I found that by bringing a powerstrip, I was able to get comfortably set up in the 1819 center. Even though the physics engine is a bit of a mystery and there are limited online sources for it, I found that game development in Godot was quite nice.",""
Best Social Impact Hack,InstantMed,https://revolutionuc2024.devpost.com/submissions/485040-instantmed,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:23:42,"Inspiration## Inspiration

We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.orate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
",https://instant-med.vercel.app/,https://www.youtube.com/watch?v=FoJ5MRmmpMo,"nextjs, javascript, react, tailwind, css3, cohereai",,University of Cincinnati,3,466,University of Cincinnati,"It was great, thank you for having us here.",""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),InstantMed,https://revolutionuc2024.devpost.com/submissions/485040-instantmed,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:23:42,"Inspiration## Inspiration

We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.orate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
",https://instant-med.vercel.app/,https://www.youtube.com/watch?v=FoJ5MRmmpMo,"nextjs, javascript, react, tailwind, css3, cohereai",,University of Cincinnati,3,466,University of Cincinnati,"It was great, thank you for having us here.",""
Best Implementation of an LLM or Other Generative AI Model (CincyTech),InstantMed,https://revolutionuc2024.devpost.com/submissions/485040-instantmed,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:23:42,"Inspiration## Inspiration

We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.orate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
",https://instant-med.vercel.app/,https://www.youtube.com/watch?v=FoJ5MRmmpMo,"nextjs, javascript, react, tailwind, css3, cohereai",,University of Cincinnati,3,466,University of Cincinnati,"It was great, thank you for having us here.",""
Best Product Market Fit (Center for Entrepreneurship),InstantMed,https://revolutionuc2024.devpost.com/submissions/485040-instantmed,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:23:42,"Inspiration## Inspiration

We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.## Inspiration
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.orate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
We felt emotionally attached to this particular subject and field of tech in medicine. We knew we wanted to design a system that can help automate something simple yet complex. That is why we started to brainstorm our ideas and come up with an e-commerce website combined with logistics for delivering and ordering medicine on the go. Medpace offered the prize and was a perfect fit for our idea.

What it does

Our app lets you browse through library of different medicine allowing you to choose and add different products into your cart. Also, we have implemented an AI chat bot for the customers to ask questions about various illnesses and ask for medicine recommendations.

How we built it

We developed this web application using NextJS framework, Tailwind CSS, and also Pure CSS for individual components. We used Vercel to host our website. We also utilized a Cohere AI API to read user input text and give recommendations or feedback for the customer.

Challenges we ran into

At the start we had trouble implementing the AI chatbot because we started with different company AI APIs to test and we kept running out of tokens while testing our code. We also got into trouble of making the codespace and keeping the version control in place for the different team members to collaborate and learn more about GitHub platform along the way. At last, we had a few troubles designing custome elements using CSS and combining Tailwind CSS to speed up our development.

Accomplishments that we're proud of

We are proud of being able to develop a full-stack web application that includes vanilla javaScript, React, and different backend processes that we were totally new to when we first building this project. We are particularly proud of learning more about the new technology stack that the software developers in the industry use. Overall, working together and bringing our ideas to life.

What we learned

We learned how to work in a team. We learned how to respect each other's ideas and contribute. We learned how to manage time in a time constrained environment and how to work at a fast pace bringing quality value.

What's next for InstantMed

We hope to take this to the next level and build the full backend platform for it that includes data bases and also mobile applications that will allow people to deliver medicine and order from their mobile application.
",https://instant-med.vercel.app/,https://www.youtube.com/watch?v=FoJ5MRmmpMo,"nextjs, javascript, react, tailwind, css3, cohereai",,University of Cincinnati,3,466,University of Cincinnati,"It was great, thank you for having us here.",""
Best Social Impact Hack,ProxyVerse,https://revolutionuc2024.devpost.com/submissions/485055-proxyverse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:39:11,"Inspiration

We're programmers! We're socially inept! So let's solve one of these problems by forcing people in close proximity into a VC together

What it does

Using android nearby connections it will send a stream from your microphone to everyone. While sending microphone data it receives everyone else's and plays their microphone too

How we built it

Im android studio we use Java to build all of the networking for android nearby connections

Challenges we ran into

Java was a mess to use because none of us have used it before. Nor have we developed on android before.

Accomplishments that we're proud of

We got an app that compiles onto an android app and it can connect to other people!

What we learned

Java is scary, and I don't want to touch it again

What's next for ProxyVerse

Maybe add blocking or a map that you can choose if you want to share your location with others
","https://drive.google.com/drive/folders/1NrG2_RnLsfa9kDHOg6m6uv5cdNZhBgrO?usp=drive_link, https://github.com/BoomBoomMushroom/ProxyVerse",https://youtube.com/shorts/imUKbs1QVN4?feature=share,"java, android, android-studio",,"wyoming high school, University of Cincinnati",2,Lobby 2-25,Wyoming High School,"Github was very easy to use especially eith github desktop.
Auth0 had confusing UI",""
"Best ""Useless"" Hack",ProxyVerse,https://revolutionuc2024.devpost.com/submissions/485055-proxyverse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:39:11,"Inspiration

We're programmers! We're socially inept! So let's solve one of these problems by forcing people in close proximity into a VC together

What it does

Using android nearby connections it will send a stream from your microphone to everyone. While sending microphone data it receives everyone else's and plays their microphone too

How we built it

Im android studio we use Java to build all of the networking for android nearby connections

Challenges we ran into

Java was a mess to use because none of us have used it before. Nor have we developed on android before.

Accomplishments that we're proud of

We got an app that compiles onto an android app and it can connect to other people!

What we learned

Java is scary, and I don't want to touch it again

What's next for ProxyVerse

Maybe add blocking or a map that you can choose if you want to share your location with others
","https://drive.google.com/drive/folders/1NrG2_RnLsfa9kDHOg6m6uv5cdNZhBgrO?usp=drive_link, https://github.com/BoomBoomMushroom/ProxyVerse",https://youtube.com/shorts/imUKbs1QVN4?feature=share,"java, android, android-studio",,"wyoming high school, University of Cincinnati",2,Lobby 2-25,Wyoming High School,"Github was very easy to use especially eith github desktop.
Auth0 had confusing UI",""
Best Use of Auth0 ,ProxyVerse,https://revolutionuc2024.devpost.com/submissions/485055-proxyverse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 06:39:11,"Inspiration

We're programmers! We're socially inept! So let's solve one of these problems by forcing people in close proximity into a VC together

What it does

Using android nearby connections it will send a stream from your microphone to everyone. While sending microphone data it receives everyone else's and plays their microphone too

How we built it

Im android studio we use Java to build all of the networking for android nearby connections

Challenges we ran into

Java was a mess to use because none of us have used it before. Nor have we developed on android before.

Accomplishments that we're proud of

We got an app that compiles onto an android app and it can connect to other people!

What we learned

Java is scary, and I don't want to touch it again

What's next for ProxyVerse

Maybe add blocking or a map that you can choose if you want to share your location with others
","https://drive.google.com/drive/folders/1NrG2_RnLsfa9kDHOg6m6uv5cdNZhBgrO?usp=drive_link, https://github.com/BoomBoomMushroom/ProxyVerse",https://youtube.com/shorts/imUKbs1QVN4?feature=share,"java, android, android-studio",,"wyoming high school, University of Cincinnati",2,Lobby 2-25,Wyoming High School,"Github was very easy to use especially eith github desktop.
Auth0 had confusing UI",""
"",Untitled,"",Draft,Pending,Manage team,02/25/2024 07:27:33,"","",,"",,University of Cincinnati,0,"","","",""
Best Educational Hack,Campus Palate,https://revolutionuc2024.devpost.com/submissions/485085-campus-palate,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 07:27:38,"Inspiration

The inspirations of the project were the team members themselves. Majority of them are vegetarian and struggled a lot with campus dining services in the first semester because of the limited food options available. This provoked us to create a platform for students to be aware about their diets and where to find the meals.

What it does

Campus Palate helps students navigate their campus dining experience smoothly by taking their dietary requirements and preferences as inputs and then tells them which dining hall matches their preferences the most and what meals they could take to meet their goals and what they could avoid to stay away from their allergies. It also makes the users aware of what various food options they have on campus matching their requirements, so they never have to get bored while following them.

How we built it

We built the project, Campus Palate, using Python and integrated the python program with CSV files from excel using Pandas Library. All the CSV files were saved in the same directory as the python file. We will be uploading the code on GitHub.

Challenges we ran into

One of the biggest challenge we faced was the time restriction. The project we took up was hard to complete in just 24 hours because we had to collect data from multiple dining halls on campus and then research the nutritional values of the food items available. Next, we started off by using ""Tembo"" as the database management of our project [PostgreSQL]. It was a completely new platform for us and we had to use resources available online to figure out the system. That was a tough task for us as we had no prior knowledge of the software. Collaborating was a challenge as well. Since the project was completely software based, all the team members had to code together. Assembling and integrating the individual lines of code was a difficult task. Integrating the back end and the front end of the project was a difficult task as well.

Accomplishments that we're proud of

We are proud of the fact that despite not being able to use ""Tembo"" as the database management, we were able to store the data we needed on ""excel"" and use it as our database management.  We can also take pride in saying that we were able to switch plans quickly and smoothly and still accomplish our goals for the weekend despite having most of our previous work and efforts on ""Tembo"" going into vain.

What we learned

The biggest learning we took back from the weekend was that we should test our plans on a smaller scale before progressing much into the project. This would mean that if we cannot figure out how something is going to work out or if something gets stuck, we wouldn't have proceeded a lot until realizing it, so we wouldn't have to start all over again. We also learned that thinking about a backup plan is never a waste of time. In our case, python and excel, our backup plan helped us a lot as the Tembo part of the primary plan didn't work out pretty well.

What's next for Campus Palate

We plan to implement Campus Palate on the main campus of University of Cincinnati and make it available to all UC students. We want to make Campus Palate accessible on our own website instead of locally defined functions. In the future, we want every US university to use Campus Palate on their campuses.
",https://github.com/ARMANUC/CampusPalate,https://youtu.be/GLETnPHmzBs,"python, pandas, numpy, excel",,University of Cincinnati,2,Lobby2-17,University of Cincinnati,All the resources were helpful but the documentation was a little bit difficult to understand. Being Freshman Students we had little to no experience in integrating and handling the databases that we created.,N/A
Best Social Impact Hack,Campus Palate,https://revolutionuc2024.devpost.com/submissions/485085-campus-palate,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 07:27:38,"Inspiration

The inspirations of the project were the team members themselves. Majority of them are vegetarian and struggled a lot with campus dining services in the first semester because of the limited food options available. This provoked us to create a platform for students to be aware about their diets and where to find the meals.

What it does

Campus Palate helps students navigate their campus dining experience smoothly by taking their dietary requirements and preferences as inputs and then tells them which dining hall matches their preferences the most and what meals they could take to meet their goals and what they could avoid to stay away from their allergies. It also makes the users aware of what various food options they have on campus matching their requirements, so they never have to get bored while following them.

How we built it

We built the project, Campus Palate, using Python and integrated the python program with CSV files from excel using Pandas Library. All the CSV files were saved in the same directory as the python file. We will be uploading the code on GitHub.

Challenges we ran into

One of the biggest challenge we faced was the time restriction. The project we took up was hard to complete in just 24 hours because we had to collect data from multiple dining halls on campus and then research the nutritional values of the food items available. Next, we started off by using ""Tembo"" as the database management of our project [PostgreSQL]. It was a completely new platform for us and we had to use resources available online to figure out the system. That was a tough task for us as we had no prior knowledge of the software. Collaborating was a challenge as well. Since the project was completely software based, all the team members had to code together. Assembling and integrating the individual lines of code was a difficult task. Integrating the back end and the front end of the project was a difficult task as well.

Accomplishments that we're proud of

We are proud of the fact that despite not being able to use ""Tembo"" as the database management, we were able to store the data we needed on ""excel"" and use it as our database management.  We can also take pride in saying that we were able to switch plans quickly and smoothly and still accomplish our goals for the weekend despite having most of our previous work and efforts on ""Tembo"" going into vain.

What we learned

The biggest learning we took back from the weekend was that we should test our plans on a smaller scale before progressing much into the project. This would mean that if we cannot figure out how something is going to work out or if something gets stuck, we wouldn't have proceeded a lot until realizing it, so we wouldn't have to start all over again. We also learned that thinking about a backup plan is never a waste of time. In our case, python and excel, our backup plan helped us a lot as the Tembo part of the primary plan didn't work out pretty well.

What's next for Campus Palate

We plan to implement Campus Palate on the main campus of University of Cincinnati and make it available to all UC students. We want to make Campus Palate accessible on our own website instead of locally defined functions. In the future, we want every US university to use Campus Palate on their campuses.
",https://github.com/ARMANUC/CampusPalate,https://youtu.be/GLETnPHmzBs,"python, pandas, numpy, excel",,University of Cincinnati,2,Lobby2-17,University of Cincinnati,All the resources were helpful but the documentation was a little bit difficult to understand. Being Freshman Students we had little to no experience in integrating and handling the databases that we created.,N/A
Best Use of Postgres (Tembo),Campus Palate,https://revolutionuc2024.devpost.com/submissions/485085-campus-palate,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 07:27:38,"Inspiration

The inspirations of the project were the team members themselves. Majority of them are vegetarian and struggled a lot with campus dining services in the first semester because of the limited food options available. This provoked us to create a platform for students to be aware about their diets and where to find the meals.

What it does

Campus Palate helps students navigate their campus dining experience smoothly by taking their dietary requirements and preferences as inputs and then tells them which dining hall matches their preferences the most and what meals they could take to meet their goals and what they could avoid to stay away from their allergies. It also makes the users aware of what various food options they have on campus matching their requirements, so they never have to get bored while following them.

How we built it

We built the project, Campus Palate, using Python and integrated the python program with CSV files from excel using Pandas Library. All the CSV files were saved in the same directory as the python file. We will be uploading the code on GitHub.

Challenges we ran into

One of the biggest challenge we faced was the time restriction. The project we took up was hard to complete in just 24 hours because we had to collect data from multiple dining halls on campus and then research the nutritional values of the food items available. Next, we started off by using ""Tembo"" as the database management of our project [PostgreSQL]. It was a completely new platform for us and we had to use resources available online to figure out the system. That was a tough task for us as we had no prior knowledge of the software. Collaborating was a challenge as well. Since the project was completely software based, all the team members had to code together. Assembling and integrating the individual lines of code was a difficult task. Integrating the back end and the front end of the project was a difficult task as well.

Accomplishments that we're proud of

We are proud of the fact that despite not being able to use ""Tembo"" as the database management, we were able to store the data we needed on ""excel"" and use it as our database management.  We can also take pride in saying that we were able to switch plans quickly and smoothly and still accomplish our goals for the weekend despite having most of our previous work and efforts on ""Tembo"" going into vain.

What we learned

The biggest learning we took back from the weekend was that we should test our plans on a smaller scale before progressing much into the project. This would mean that if we cannot figure out how something is going to work out or if something gets stuck, we wouldn't have proceeded a lot until realizing it, so we wouldn't have to start all over again. We also learned that thinking about a backup plan is never a waste of time. In our case, python and excel, our backup plan helped us a lot as the Tembo part of the primary plan didn't work out pretty well.

What's next for Campus Palate

We plan to implement Campus Palate on the main campus of University of Cincinnati and make it available to all UC students. We want to make Campus Palate accessible on our own website instead of locally defined functions. In the future, we want every US university to use Campus Palate on their campuses.
",https://github.com/ARMANUC/CampusPalate,https://youtu.be/GLETnPHmzBs,"python, pandas, numpy, excel",,University of Cincinnati,2,Lobby2-17,University of Cincinnati,All the resources were helpful but the documentation was a little bit difficult to understand. Being Freshman Students we had little to no experience in integrating and handling the databases that we created.,N/A
Best Product Market Fit (Center for Entrepreneurship),Campus Palate,https://revolutionuc2024.devpost.com/submissions/485085-campus-palate,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 07:27:38,"Inspiration

The inspirations of the project were the team members themselves. Majority of them are vegetarian and struggled a lot with campus dining services in the first semester because of the limited food options available. This provoked us to create a platform for students to be aware about their diets and where to find the meals.

What it does

Campus Palate helps students navigate their campus dining experience smoothly by taking their dietary requirements and preferences as inputs and then tells them which dining hall matches their preferences the most and what meals they could take to meet their goals and what they could avoid to stay away from their allergies. It also makes the users aware of what various food options they have on campus matching their requirements, so they never have to get bored while following them.

How we built it

We built the project, Campus Palate, using Python and integrated the python program with CSV files from excel using Pandas Library. All the CSV files were saved in the same directory as the python file. We will be uploading the code on GitHub.

Challenges we ran into

One of the biggest challenge we faced was the time restriction. The project we took up was hard to complete in just 24 hours because we had to collect data from multiple dining halls on campus and then research the nutritional values of the food items available. Next, we started off by using ""Tembo"" as the database management of our project [PostgreSQL]. It was a completely new platform for us and we had to use resources available online to figure out the system. That was a tough task for us as we had no prior knowledge of the software. Collaborating was a challenge as well. Since the project was completely software based, all the team members had to code together. Assembling and integrating the individual lines of code was a difficult task. Integrating the back end and the front end of the project was a difficult task as well.

Accomplishments that we're proud of

We are proud of the fact that despite not being able to use ""Tembo"" as the database management, we were able to store the data we needed on ""excel"" and use it as our database management.  We can also take pride in saying that we were able to switch plans quickly and smoothly and still accomplish our goals for the weekend despite having most of our previous work and efforts on ""Tembo"" going into vain.

What we learned

The biggest learning we took back from the weekend was that we should test our plans on a smaller scale before progressing much into the project. This would mean that if we cannot figure out how something is going to work out or if something gets stuck, we wouldn't have proceeded a lot until realizing it, so we wouldn't have to start all over again. We also learned that thinking about a backup plan is never a waste of time. In our case, python and excel, our backup plan helped us a lot as the Tembo part of the primary plan didn't work out pretty well.

What's next for Campus Palate

We plan to implement Campus Palate on the main campus of University of Cincinnati and make it available to all UC students. We want to make Campus Palate accessible on our own website instead of locally defined functions. In the future, we want every US university to use Campus Palate on their campuses.
",https://github.com/ARMANUC/CampusPalate,https://youtu.be/GLETnPHmzBs,"python, pandas, numpy, excel",,University of Cincinnati,2,Lobby2-17,University of Cincinnati,All the resources were helpful but the documentation was a little bit difficult to understand. Being Freshman Students we had little to no experience in integrating and handling the databases that we created.,N/A
Best Data Science and Analytics Hack (Fortified Data),Campus Palate,https://revolutionuc2024.devpost.com/submissions/485085-campus-palate,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 07:27:38,"Inspiration

The inspirations of the project were the team members themselves. Majority of them are vegetarian and struggled a lot with campus dining services in the first semester because of the limited food options available. This provoked us to create a platform for students to be aware about their diets and where to find the meals.

What it does

Campus Palate helps students navigate their campus dining experience smoothly by taking their dietary requirements and preferences as inputs and then tells them which dining hall matches their preferences the most and what meals they could take to meet their goals and what they could avoid to stay away from their allergies. It also makes the users aware of what various food options they have on campus matching their requirements, so they never have to get bored while following them.

How we built it

We built the project, Campus Palate, using Python and integrated the python program with CSV files from excel using Pandas Library. All the CSV files were saved in the same directory as the python file. We will be uploading the code on GitHub.

Challenges we ran into

One of the biggest challenge we faced was the time restriction. The project we took up was hard to complete in just 24 hours because we had to collect data from multiple dining halls on campus and then research the nutritional values of the food items available. Next, we started off by using ""Tembo"" as the database management of our project [PostgreSQL]. It was a completely new platform for us and we had to use resources available online to figure out the system. That was a tough task for us as we had no prior knowledge of the software. Collaborating was a challenge as well. Since the project was completely software based, all the team members had to code together. Assembling and integrating the individual lines of code was a difficult task. Integrating the back end and the front end of the project was a difficult task as well.

Accomplishments that we're proud of

We are proud of the fact that despite not being able to use ""Tembo"" as the database management, we were able to store the data we needed on ""excel"" and use it as our database management.  We can also take pride in saying that we were able to switch plans quickly and smoothly and still accomplish our goals for the weekend despite having most of our previous work and efforts on ""Tembo"" going into vain.

What we learned

The biggest learning we took back from the weekend was that we should test our plans on a smaller scale before progressing much into the project. This would mean that if we cannot figure out how something is going to work out or if something gets stuck, we wouldn't have proceeded a lot until realizing it, so we wouldn't have to start all over again. We also learned that thinking about a backup plan is never a waste of time. In our case, python and excel, our backup plan helped us a lot as the Tembo part of the primary plan didn't work out pretty well.

What's next for Campus Palate

We plan to implement Campus Palate on the main campus of University of Cincinnati and make it available to all UC students. We want to make Campus Palate accessible on our own website instead of locally defined functions. In the future, we want every US university to use Campus Palate on their campuses.
",https://github.com/ARMANUC/CampusPalate,https://youtu.be/GLETnPHmzBs,"python, pandas, numpy, excel",,University of Cincinnati,2,Lobby2-17,University of Cincinnati,All the resources were helpful but the documentation was a little bit difficult to understand. Being Freshman Students we had little to no experience in integrating and handling the databases that we created.,N/A
Best Design Hack,Spotify Rex,https://revolutionuc2024.devpost.com/submissions/485117-spotify-rex,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:01:17,"Inspiration

Music holds the power to bridge gaps and ignite connections beyond what words alone can accomplish. It's a universal language that speaks to our souls, bringing strangers together and strengthening bonds in relationships. Despite the profound impact of music, there's been a missing piece in the experience â€” a direct way to interact with the music we cherish and share recommendations with friends. Spotify Rex emerges to fill this void, offering more than just a platform for streaming music.

What it does

Our application, Spotify Rex, initially had only one feature but grew to a wide range of features:


Song Recommendations: Users can effortlessly recommend songs to their followers, sparking new musical discoveries.
Access Shared Songs: Explore and enjoy songs recommended by followers, enhancing your listening experience.
Interactive Engagement: Engage with music on a deeper level by reacting, commenting, and providing reviews on beloved (or not-so-beloved) tracks.
Artist Appreciation: Provide artists with a platform to feel the love of their listeners, fostering a deeper connection between creators and fans.
Community Interaction: Dive into an interactive feed where music enthusiasts can connect, share, and discuss their favorite tunes.
Personalized Profiles: Customize your profile to reflect your unique musical tastes and personality, going beyond basic information like name and email address.


How we built it

.
â”œâ”€â”€ app
â”‚   â”œâ”€â”€ controllers
â”‚   â”‚   â”œâ”€â”€ (Handles HTTP requests and responses)
â”‚   â”œâ”€â”€ main.py
â”‚   â”œâ”€â”€ rec.py
â”‚   â””â”€â”€ spotify.py
â”œâ”€â”€ logic
â”‚   â””â”€â”€ (Additional logic and utility functions)
â”œâ”€â”€ models
â”‚   â””â”€â”€ (Database models and schemas)
â”œâ”€â”€ database
â”‚   â””â”€â”€ (Database management scripts and configurations)
â”œâ”€â”€ src
â”‚   â””â”€â”€ view
â”‚       â”œâ”€â”€ feed
â”‚       â”œâ”€â”€ home
â”‚       â”œâ”€â”€ profile
â”‚       â”œâ”€â”€ received
â”‚       â”œâ”€â”€ requests
â”‚       â”œâ”€â”€ reviews
â”‚       â””â”€â”€ search
â”œâ”€â”€ rex_client
â”œâ”€â”€ node_modules
â”œâ”€â”€ README.md
â”œâ”€â”€ package.json
â””â”€â”€ package-lock.json

As you can see from the directory of our project, we had a variety of different technologies. We used React and CSS for the frontend, allowing us a dynamic very nice looking UI. We then would interface with the backend FastAPI server written in Python to pass requests back and forth from the user to the database. For the database we initially tried to setup PostgreSQL, but settled on MySQL because it was far more simple to set up. This allowed us persistent storage and a better organized web app. Finally we used Google Cloud storage for all of the images we used for each song or album. None of those were rendered statically, each had a location in the cloud storage associated with a particular song or album that we rendered dynamically.

Challenges we ran into

Developing an application within the expansive ecosystem of Spotify posed its own set of challenges, particularly in terms of:


Login and Authentication: Overcoming hurdles in authenticating with the Spotify Web API to ensure seamless user experiences.
UI Design: Balancing aesthetics with functionality highlighted the intricacies of creating an engaging user interface.
Setting up a database: Database Schema planning, writing queries, and resolving errors typically takes a very long time. It was very challenging to this but we are happy that we were able to get persistent storage!


Accomplishments that we're proud of

Despite the challenges, we achieved significant milestones:


Feature Expansion: Surpassing our initial goals by implementing a wide array of features to enhance the user experience.
Technological Growth: Embracing and mastering new technologies and packages, such as Vite, Tailwind in JS, MySQL that enriched our development process.


What we learned

This project served as a valuable learning experience for all team members:


Advanced Web APIs: Delving into the intricacies of utilizing public web APIs for enhanced functionality.
Backend Development: Navigating the complexities of backend database management to ensure robust performance.
Diverse Coding Practices: Through exchanging our ideas, we learned a lot from each other. With one suggesting a package and another giving brilliant reasons why another is better.


What's next for Spotify Rex

Presently, our greatest wish is that Spotify actually add this product. We are thinking of contacting them for this update. We would also like to improve the code quality and features. By combining proactive outreach to Spotify we hope that we can maximize the potential of Spotify Rex and pave the way for its integration into the Spotify platform.

To Spotify, this means enhanced user engagement, differentiation and competitive advantage, and great monetization opportunities. 
",https://github.com/bledsoef/spotify-rex-revolutionuc,https://vimeo.com/916456314?share=copy,"python, javascript, react, mysql, firebase, css, html, sqlalchemy",,Berea College,3,Lobby 2-15,Berea College,"We interacted with HTML, Javascript, CSS, React, Tailwind, MySQL, SQLAlcemy, Python, Firebase. 
- Firebase took a while to set up, but once it was up it was work with and very helpful in rapid caching
- Tailwind, this was our first time interacting with Tailwind in js. But similar to Bootstrap it was greatly helpful and easy to use
- Spotify UI has a lot of intricacies and it was a little changing to keep the UI synced with the server using state management
- Spotify API was inconsistent with react for client-server communication",N/A
Best Social Impact Hack,Spotify Rex,https://revolutionuc2024.devpost.com/submissions/485117-spotify-rex,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:01:17,"Inspiration

Music holds the power to bridge gaps and ignite connections beyond what words alone can accomplish. It's a universal language that speaks to our souls, bringing strangers together and strengthening bonds in relationships. Despite the profound impact of music, there's been a missing piece in the experience â€” a direct way to interact with the music we cherish and share recommendations with friends. Spotify Rex emerges to fill this void, offering more than just a platform for streaming music.

What it does

Our application, Spotify Rex, initially had only one feature but grew to a wide range of features:


Song Recommendations: Users can effortlessly recommend songs to their followers, sparking new musical discoveries.
Access Shared Songs: Explore and enjoy songs recommended by followers, enhancing your listening experience.
Interactive Engagement: Engage with music on a deeper level by reacting, commenting, and providing reviews on beloved (or not-so-beloved) tracks.
Artist Appreciation: Provide artists with a platform to feel the love of their listeners, fostering a deeper connection between creators and fans.
Community Interaction: Dive into an interactive feed where music enthusiasts can connect, share, and discuss their favorite tunes.
Personalized Profiles: Customize your profile to reflect your unique musical tastes and personality, going beyond basic information like name and email address.


How we built it

.
â”œâ”€â”€ app
â”‚   â”œâ”€â”€ controllers
â”‚   â”‚   â”œâ”€â”€ (Handles HTTP requests and responses)
â”‚   â”œâ”€â”€ main.py
â”‚   â”œâ”€â”€ rec.py
â”‚   â””â”€â”€ spotify.py
â”œâ”€â”€ logic
â”‚   â””â”€â”€ (Additional logic and utility functions)
â”œâ”€â”€ models
â”‚   â””â”€â”€ (Database models and schemas)
â”œâ”€â”€ database
â”‚   â””â”€â”€ (Database management scripts and configurations)
â”œâ”€â”€ src
â”‚   â””â”€â”€ view
â”‚       â”œâ”€â”€ feed
â”‚       â”œâ”€â”€ home
â”‚       â”œâ”€â”€ profile
â”‚       â”œâ”€â”€ received
â”‚       â”œâ”€â”€ requests
â”‚       â”œâ”€â”€ reviews
â”‚       â””â”€â”€ search
â”œâ”€â”€ rex_client
â”œâ”€â”€ node_modules
â”œâ”€â”€ README.md
â”œâ”€â”€ package.json
â””â”€â”€ package-lock.json

As you can see from the directory of our project, we had a variety of different technologies. We used React and CSS for the frontend, allowing us a dynamic very nice looking UI. We then would interface with the backend FastAPI server written in Python to pass requests back and forth from the user to the database. For the database we initially tried to setup PostgreSQL, but settled on MySQL because it was far more simple to set up. This allowed us persistent storage and a better organized web app. Finally we used Google Cloud storage for all of the images we used for each song or album. None of those were rendered statically, each had a location in the cloud storage associated with a particular song or album that we rendered dynamically.

Challenges we ran into

Developing an application within the expansive ecosystem of Spotify posed its own set of challenges, particularly in terms of:


Login and Authentication: Overcoming hurdles in authenticating with the Spotify Web API to ensure seamless user experiences.
UI Design: Balancing aesthetics with functionality highlighted the intricacies of creating an engaging user interface.
Setting up a database: Database Schema planning, writing queries, and resolving errors typically takes a very long time. It was very challenging to this but we are happy that we were able to get persistent storage!


Accomplishments that we're proud of

Despite the challenges, we achieved significant milestones:


Feature Expansion: Surpassing our initial goals by implementing a wide array of features to enhance the user experience.
Technological Growth: Embracing and mastering new technologies and packages, such as Vite, Tailwind in JS, MySQL that enriched our development process.


What we learned

This project served as a valuable learning experience for all team members:


Advanced Web APIs: Delving into the intricacies of utilizing public web APIs for enhanced functionality.
Backend Development: Navigating the complexities of backend database management to ensure robust performance.
Diverse Coding Practices: Through exchanging our ideas, we learned a lot from each other. With one suggesting a package and another giving brilliant reasons why another is better.


What's next for Spotify Rex

Presently, our greatest wish is that Spotify actually add this product. We are thinking of contacting them for this update. We would also like to improve the code quality and features. By combining proactive outreach to Spotify we hope that we can maximize the potential of Spotify Rex and pave the way for its integration into the Spotify platform.

To Spotify, this means enhanced user engagement, differentiation and competitive advantage, and great monetization opportunities. 
",https://github.com/bledsoef/spotify-rex-revolutionuc,https://vimeo.com/916456314?share=copy,"python, javascript, react, mysql, firebase, css, html, sqlalchemy",,Berea College,3,Lobby 2-15,Berea College,"We interacted with HTML, Javascript, CSS, React, Tailwind, MySQL, SQLAlcemy, Python, Firebase. 
- Firebase took a while to set up, but once it was up it was work with and very helpful in rapid caching
- Tailwind, this was our first time interacting with Tailwind in js. But similar to Bootstrap it was greatly helpful and easy to use
- Spotify UI has a lot of intricacies and it was a little changing to keep the UI synced with the server using state management
- Spotify API was inconsistent with react for client-server communication",N/A
EnableUC Challenge,Spotify Rex,https://revolutionuc2024.devpost.com/submissions/485117-spotify-rex,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:01:17,"Inspiration

Music holds the power to bridge gaps and ignite connections beyond what words alone can accomplish. It's a universal language that speaks to our souls, bringing strangers together and strengthening bonds in relationships. Despite the profound impact of music, there's been a missing piece in the experience â€” a direct way to interact with the music we cherish and share recommendations with friends. Spotify Rex emerges to fill this void, offering more than just a platform for streaming music.

What it does

Our application, Spotify Rex, initially had only one feature but grew to a wide range of features:


Song Recommendations: Users can effortlessly recommend songs to their followers, sparking new musical discoveries.
Access Shared Songs: Explore and enjoy songs recommended by followers, enhancing your listening experience.
Interactive Engagement: Engage with music on a deeper level by reacting, commenting, and providing reviews on beloved (or not-so-beloved) tracks.
Artist Appreciation: Provide artists with a platform to feel the love of their listeners, fostering a deeper connection between creators and fans.
Community Interaction: Dive into an interactive feed where music enthusiasts can connect, share, and discuss their favorite tunes.
Personalized Profiles: Customize your profile to reflect your unique musical tastes and personality, going beyond basic information like name and email address.


How we built it

.
â”œâ”€â”€ app
â”‚   â”œâ”€â”€ controllers
â”‚   â”‚   â”œâ”€â”€ (Handles HTTP requests and responses)
â”‚   â”œâ”€â”€ main.py
â”‚   â”œâ”€â”€ rec.py
â”‚   â””â”€â”€ spotify.py
â”œâ”€â”€ logic
â”‚   â””â”€â”€ (Additional logic and utility functions)
â”œâ”€â”€ models
â”‚   â””â”€â”€ (Database models and schemas)
â”œâ”€â”€ database
â”‚   â””â”€â”€ (Database management scripts and configurations)
â”œâ”€â”€ src
â”‚   â””â”€â”€ view
â”‚       â”œâ”€â”€ feed
â”‚       â”œâ”€â”€ home
â”‚       â”œâ”€â”€ profile
â”‚       â”œâ”€â”€ received
â”‚       â”œâ”€â”€ requests
â”‚       â”œâ”€â”€ reviews
â”‚       â””â”€â”€ search
â”œâ”€â”€ rex_client
â”œâ”€â”€ node_modules
â”œâ”€â”€ README.md
â”œâ”€â”€ package.json
â””â”€â”€ package-lock.json

As you can see from the directory of our project, we had a variety of different technologies. We used React and CSS for the frontend, allowing us a dynamic very nice looking UI. We then would interface with the backend FastAPI server written in Python to pass requests back and forth from the user to the database. For the database we initially tried to setup PostgreSQL, but settled on MySQL because it was far more simple to set up. This allowed us persistent storage and a better organized web app. Finally we used Google Cloud storage for all of the images we used for each song or album. None of those were rendered statically, each had a location in the cloud storage associated with a particular song or album that we rendered dynamically.

Challenges we ran into

Developing an application within the expansive ecosystem of Spotify posed its own set of challenges, particularly in terms of:


Login and Authentication: Overcoming hurdles in authenticating with the Spotify Web API to ensure seamless user experiences.
UI Design: Balancing aesthetics with functionality highlighted the intricacies of creating an engaging user interface.
Setting up a database: Database Schema planning, writing queries, and resolving errors typically takes a very long time. It was very challenging to this but we are happy that we were able to get persistent storage!


Accomplishments that we're proud of

Despite the challenges, we achieved significant milestones:


Feature Expansion: Surpassing our initial goals by implementing a wide array of features to enhance the user experience.
Technological Growth: Embracing and mastering new technologies and packages, such as Vite, Tailwind in JS, MySQL that enriched our development process.


What we learned

This project served as a valuable learning experience for all team members:


Advanced Web APIs: Delving into the intricacies of utilizing public web APIs for enhanced functionality.
Backend Development: Navigating the complexities of backend database management to ensure robust performance.
Diverse Coding Practices: Through exchanging our ideas, we learned a lot from each other. With one suggesting a package and another giving brilliant reasons why another is better.


What's next for Spotify Rex

Presently, our greatest wish is that Spotify actually add this product. We are thinking of contacting them for this update. We would also like to improve the code quality and features. By combining proactive outreach to Spotify we hope that we can maximize the potential of Spotify Rex and pave the way for its integration into the Spotify platform.

To Spotify, this means enhanced user engagement, differentiation and competitive advantage, and great monetization opportunities. 
",https://github.com/bledsoef/spotify-rex-revolutionuc,https://vimeo.com/916456314?share=copy,"python, javascript, react, mysql, firebase, css, html, sqlalchemy",,Berea College,3,Lobby 2-15,Berea College,"We interacted with HTML, Javascript, CSS, React, Tailwind, MySQL, SQLAlcemy, Python, Firebase. 
- Firebase took a while to set up, but once it was up it was work with and very helpful in rapid caching
- Tailwind, this was our first time interacting with Tailwind in js. But similar to Bootstrap it was greatly helpful and easy to use
- Spotify UI has a lot of intricacies and it was a little changing to keep the UI synced with the server using state management
- Spotify API was inconsistent with react for client-server communication",N/A
Best Product Market Fit (Center for Entrepreneurship),Spotify Rex,https://revolutionuc2024.devpost.com/submissions/485117-spotify-rex,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:01:17,"Inspiration

Music holds the power to bridge gaps and ignite connections beyond what words alone can accomplish. It's a universal language that speaks to our souls, bringing strangers together and strengthening bonds in relationships. Despite the profound impact of music, there's been a missing piece in the experience â€” a direct way to interact with the music we cherish and share recommendations with friends. Spotify Rex emerges to fill this void, offering more than just a platform for streaming music.

What it does

Our application, Spotify Rex, initially had only one feature but grew to a wide range of features:


Song Recommendations: Users can effortlessly recommend songs to their followers, sparking new musical discoveries.
Access Shared Songs: Explore and enjoy songs recommended by followers, enhancing your listening experience.
Interactive Engagement: Engage with music on a deeper level by reacting, commenting, and providing reviews on beloved (or not-so-beloved) tracks.
Artist Appreciation: Provide artists with a platform to feel the love of their listeners, fostering a deeper connection between creators and fans.
Community Interaction: Dive into an interactive feed where music enthusiasts can connect, share, and discuss their favorite tunes.
Personalized Profiles: Customize your profile to reflect your unique musical tastes and personality, going beyond basic information like name and email address.


How we built it

.
â”œâ”€â”€ app
â”‚   â”œâ”€â”€ controllers
â”‚   â”‚   â”œâ”€â”€ (Handles HTTP requests and responses)
â”‚   â”œâ”€â”€ main.py
â”‚   â”œâ”€â”€ rec.py
â”‚   â””â”€â”€ spotify.py
â”œâ”€â”€ logic
â”‚   â””â”€â”€ (Additional logic and utility functions)
â”œâ”€â”€ models
â”‚   â””â”€â”€ (Database models and schemas)
â”œâ”€â”€ database
â”‚   â””â”€â”€ (Database management scripts and configurations)
â”œâ”€â”€ src
â”‚   â””â”€â”€ view
â”‚       â”œâ”€â”€ feed
â”‚       â”œâ”€â”€ home
â”‚       â”œâ”€â”€ profile
â”‚       â”œâ”€â”€ received
â”‚       â”œâ”€â”€ requests
â”‚       â”œâ”€â”€ reviews
â”‚       â””â”€â”€ search
â”œâ”€â”€ rex_client
â”œâ”€â”€ node_modules
â”œâ”€â”€ README.md
â”œâ”€â”€ package.json
â””â”€â”€ package-lock.json

As you can see from the directory of our project, we had a variety of different technologies. We used React and CSS for the frontend, allowing us a dynamic very nice looking UI. We then would interface with the backend FastAPI server written in Python to pass requests back and forth from the user to the database. For the database we initially tried to setup PostgreSQL, but settled on MySQL because it was far more simple to set up. This allowed us persistent storage and a better organized web app. Finally we used Google Cloud storage for all of the images we used for each song or album. None of those were rendered statically, each had a location in the cloud storage associated with a particular song or album that we rendered dynamically.

Challenges we ran into

Developing an application within the expansive ecosystem of Spotify posed its own set of challenges, particularly in terms of:


Login and Authentication: Overcoming hurdles in authenticating with the Spotify Web API to ensure seamless user experiences.
UI Design: Balancing aesthetics with functionality highlighted the intricacies of creating an engaging user interface.
Setting up a database: Database Schema planning, writing queries, and resolving errors typically takes a very long time. It was very challenging to this but we are happy that we were able to get persistent storage!


Accomplishments that we're proud of

Despite the challenges, we achieved significant milestones:


Feature Expansion: Surpassing our initial goals by implementing a wide array of features to enhance the user experience.
Technological Growth: Embracing and mastering new technologies and packages, such as Vite, Tailwind in JS, MySQL that enriched our development process.


What we learned

This project served as a valuable learning experience for all team members:


Advanced Web APIs: Delving into the intricacies of utilizing public web APIs for enhanced functionality.
Backend Development: Navigating the complexities of backend database management to ensure robust performance.
Diverse Coding Practices: Through exchanging our ideas, we learned a lot from each other. With one suggesting a package and another giving brilliant reasons why another is better.


What's next for Spotify Rex

Presently, our greatest wish is that Spotify actually add this product. We are thinking of contacting them for this update. We would also like to improve the code quality and features. By combining proactive outreach to Spotify we hope that we can maximize the potential of Spotify Rex and pave the way for its integration into the Spotify platform.

To Spotify, this means enhanced user engagement, differentiation and competitive advantage, and great monetization opportunities. 
",https://github.com/bledsoef/spotify-rex-revolutionuc,https://vimeo.com/916456314?share=copy,"python, javascript, react, mysql, firebase, css, html, sqlalchemy",,Berea College,3,Lobby 2-15,Berea College,"We interacted with HTML, Javascript, CSS, React, Tailwind, MySQL, SQLAlcemy, Python, Firebase. 
- Firebase took a while to set up, but once it was up it was work with and very helpful in rapid caching
- Tailwind, this was our first time interacting with Tailwind in js. But similar to Bootstrap it was greatly helpful and easy to use
- Spotify UI has a lot of intricacies and it was a little changing to keep the UI synced with the server using state management
- Spotify API was inconsistent with react for client-server communication",N/A
"",Trust Skin,https://revolutionuc2024.devpost.com/submissions/485123-trust-skin,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:04:46,"Inspiration

As the world becomes more developed, and people tend to focus more on their skin concerns and treatment, advanced therapies and scientific skincare have bloomed. On the market, there are thousands of different skincare products that customers believe can help to treat their skin. However, according to research and studies, scientists have shown that different concerns about skill can be caused by various factors and bacteria. For example, acne on the skin will be caused primarily by bacteria and hormones. Therefore, it is necessary for patients who have skin problems, especially acne, to have a way to measure their skin bacteria along with deep skin analysis to provide the best treatment.

What it does

Initially, our website will use an AI-powered model to provide potential customers with a simple explanation of the ingredients they inputted. The AI-powered model used here has been trained with reliable sources of information. Training and using AI on our website is necessary because skincare ingredients are innovated daily, and updating and tracking each ingredient individually is problematic. Thus, by using AI, the input ingredients can be explained thoroughly and accurately. 
Furthermore, our website will attract potential customers who want to explore and treat their skin radically. Our website will partner with many local dermatologists and clinics specializing in various aspects of skin. After placing their order with questionnaires, customers will be classified, and the AI model will choose the best-fit clinic and dermatologist. There were 4 stages in the process: assigned take-home skin testing, collected sample, analyzing sample, and doctor approval. Besides these services included in the order, the customer can also have further assistance with our AI model skincare ingredient recommendation to maintain their improved skin condition after treatment.  

How we built it

Canva, Botpress, Webflow, .tech, Freehosting.com

Challenges we ran into

Our GitHub student packs are not working due to a verified account problem. Also, we have a problem hosting an actual website due to a DNS problem. Besides, it takes some time for us to get used to the website that we are planning to use. Lastly, time constraint is the main problem since 24 hours is hard to complete all the functions we want to include.

Accomplishments that we're proud of

We are able to build an AI model that is trained with reliable, real-time sources. Also, we are able to create a website with a new and professional website builder and gain more knowledge on how to host and publish a website.

What we learned

We have learned how to use Webflow to design an interactive website and learn how to publish a website.

What's next for Untitled

Our goal for the future of Trust Skin is continuing to develop other functions of the website and partner with other clinics and dermatologists to provide customers with the best experience. 
","",https://youtu.be/txSZgJKa2ls,"canva, botpress, webflow, .tech, freehosting.com",,University of Cincinnati,0,230-9,University of Cincinnati,"Webflow, Canva, Botpress",trustskin.tech
"Best ""Useless"" Hack",Hackathon Team Creator,https://revolutionuc2024.devpost.com/submissions/485131-hackathon-team-creator,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:18:21,"Inspiration

While I did choose to work alone at this hackathon, I found that many of my fellow hackers were wanting support from a group environment. I wanted to create a tool that was simple and to the point in getting a group of people who all struggle to find teammates together.

What it does

The program simply allows a user to press a button to display a random location within the building and updates the locations occupancy as more people are given the location. After that location has reached maximum occupancy, it will no longer be suggested. As soon as all rooms are filled, the screen will display ""All rooms filled."" 

How I built it

I built this using and Arduino UNO with the Adafruit library to display the graphics. 

Challenges I ran into

The first challenge I ran into involved making sure a location did not appear on the screen after it had reached maximum occupancy. I had to create two whole new functions just to sort out which functions were eligible to be selected. While I could have chosen a simple approach for my sample case of locations, I wanted to make my code interchangeable for any Hackathon. This means I had to account for change in the number of locations and the maximum occupancy.

Finally, it was time to end the program. I was ready to make sure the program displayed that all the rooms were filled in order to complete my project and show it to the hackers around me. At least, I thought I was ready. After a long night of hacking and interacting with my peers, my mental capacity for work had been falling through and what would be considered the ""easiest part of my code"" became a nightmare. I ended up clocking in at 2 hours of just trying to simply display a final message at the end of my program as I was fighting the urge to sleep and making many mental errors that would break my program many times. 

Accomplishments that I'm proud of

Today was my first ever time even touching an Arduino. Everything that I put fourth in front of you today is a representation of what I can learn and implement in less than 24 hours. From turning on a light with a simple line of code to writing a complex program to organize a huge amount of people into groups. While I acknowledge the risk I took on hacking everything using only the Arduino's limitations, I am glad I made the decision and I will definitely be working to hone these skills into larger scale projects in the future.

What I learned

Ironically, as a solo developer in todays hackathon, I learned more about team work than you would think. Thanks to the great folks at Major League Hacking and the support of my peers, I was able to complete segments of code and work out hardware issues when I was in need of a second opinion. Now I will always keep in mind that even though it may be easy to want to do it all myself, using the resources given to me and interacting with other hackers is the best way to move forward and maximize what I learn in every experience.

I have also learned about my new found pass of Embedded Software Engineering. I am soon to work at a job that involves this very line of work, and I have more love for it after taking a chance to get started in the field at Revolution UC. I am thankful for Major League Hacking for providing the Arduino Uno to me and I will certainly make use of all the practice I can get in being the best embedded software engineer I can be.

What's next for Hackathon Team Creator

The next step would be making the use of the Hackathon Team Creator more user friendly. At the moment it is all run through a tiny OLED screen on the Arduino with the use of a button that doesn't feel official. If I were to move forward with this project and supplies hackathon's across the world with the service, I would encase the Arduino into a simple case with a larger screen that has a button to press. This will make the whole operation of the system more obvious and I could easily transfer the functionality with the use of wires provided in the Arduino kit.
",https://github.com/MaxwellABlevins/Revolution-UC-2024/tree/main/BoardOnly,https://www.youtube.com/watch?v=JMp-CVFELo0,"arduino, c++, adafruit, grove, github",,University of Cincinnati,0,Suite 245,University of Cincinnati,The experience with the Grove beginner Arduino kit was amazing. Gi Kraken made sending my code to GitHub very seamless.,MaxwellBlevins.Tech
Best Design Hack,No1Best Compliance,https://revolutionuc2024.devpost.com/submissions/485143-no1best-compliance,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:35:33,"Inspiration

We were inspired by some work that one of our team members were doing. We thought it would be awesome it there was a way to view that policies different companies followed publicly so you would be able to know what companies to trust.

What it does

Our website allows companies to sign up and list the policies that they follow and how much so. These policies can then be shared publicly so that users can see what companies are doing with their data.

How we built it

We used WordPress to set up the website and then deployed it linked to a .tech domain. We used Chart.js to visualize the compliance data and then inject it into the website. We also used a php based backend with a SQL data storage structure. 

Challenges we ran into

We ran into a lot of trouble. With such a long domain name (http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech) we struggled to get the DNS servers to work right in verifying and linking to our website. A lot of the team were also new to Word Press and needed to learn how to use the tools it provided in building a website. Also, we had never done data visualization with JS so we needed to learn the Chart.js library.

Accomplishments that we're proud of

We are proud that we got a working concept page up. There were a lot of time struggles that made the whole project grind to a halt multiple times. We struggled through the issues and got to the point where we have a working interface to show off.

What's next for No1Best Compliance

We want to expand the company side of the website to make it easier to have multiple users working on different policy concerns for the company. We would also like have more frameworks for companies to list as policies and even add an option for custom policies.

Github

Out Github
",http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech,https://youtu.be/tdacW1xV1LE,"wordpress, chart.js, php, sql",,"University of Cincinnati, Cincinnati State Technical and Community College",3,255-50,University of Cincinnati,We used WordPress to setup the website and some generative AI to make funny puns about compliance. We used Chart.js to make the data visualization. We also used a carbon neutral webhost.,http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech
Best Social Impact Hack,No1Best Compliance,https://revolutionuc2024.devpost.com/submissions/485143-no1best-compliance,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:35:33,"Inspiration

We were inspired by some work that one of our team members were doing. We thought it would be awesome it there was a way to view that policies different companies followed publicly so you would be able to know what companies to trust.

What it does

Our website allows companies to sign up and list the policies that they follow and how much so. These policies can then be shared publicly so that users can see what companies are doing with their data.

How we built it

We used WordPress to set up the website and then deployed it linked to a .tech domain. We used Chart.js to visualize the compliance data and then inject it into the website. We also used a php based backend with a SQL data storage structure. 

Challenges we ran into

We ran into a lot of trouble. With such a long domain name (http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech) we struggled to get the DNS servers to work right in verifying and linking to our website. A lot of the team were also new to Word Press and needed to learn how to use the tools it provided in building a website. Also, we had never done data visualization with JS so we needed to learn the Chart.js library.

Accomplishments that we're proud of

We are proud that we got a working concept page up. There were a lot of time struggles that made the whole project grind to a halt multiple times. We struggled through the issues and got to the point where we have a working interface to show off.

What's next for No1Best Compliance

We want to expand the company side of the website to make it easier to have multiple users working on different policy concerns for the company. We would also like have more frameworks for companies to list as policies and even add an option for custom policies.

Github

Out Github
",http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech,https://youtu.be/tdacW1xV1LE,"wordpress, chart.js, php, sql",,"University of Cincinnati, Cincinnati State Technical and Community College",3,255-50,University of Cincinnati,We used WordPress to setup the website and some generative AI to make funny puns about compliance. We used Chart.js to make the data visualization. We also used a carbon neutral webhost.,http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech
Best Implementation of an LLM or Other Generative AI Model (CincyTech),No1Best Compliance,https://revolutionuc2024.devpost.com/submissions/485143-no1best-compliance,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:35:33,"Inspiration

We were inspired by some work that one of our team members were doing. We thought it would be awesome it there was a way to view that policies different companies followed publicly so you would be able to know what companies to trust.

What it does

Our website allows companies to sign up and list the policies that they follow and how much so. These policies can then be shared publicly so that users can see what companies are doing with their data.

How we built it

We used WordPress to set up the website and then deployed it linked to a .tech domain. We used Chart.js to visualize the compliance data and then inject it into the website. We also used a php based backend with a SQL data storage structure. 

Challenges we ran into

We ran into a lot of trouble. With such a long domain name (http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech) we struggled to get the DNS servers to work right in verifying and linking to our website. A lot of the team were also new to Word Press and needed to learn how to use the tools it provided in building a website. Also, we had never done data visualization with JS so we needed to learn the Chart.js library.

Accomplishments that we're proud of

We are proud that we got a working concept page up. There were a lot of time struggles that made the whole project grind to a halt multiple times. We struggled through the issues and got to the point where we have a working interface to show off.

What's next for No1Best Compliance

We want to expand the company side of the website to make it easier to have multiple users working on different policy concerns for the company. We would also like have more frameworks for companies to list as policies and even add an option for custom policies.

Github

Out Github
",http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech,https://youtu.be/tdacW1xV1LE,"wordpress, chart.js, php, sql",,"University of Cincinnati, Cincinnati State Technical and Community College",3,255-50,University of Cincinnati,We used WordPress to setup the website and some generative AI to make funny puns about compliance. We used Chart.js to make the data visualization. We also used a carbon neutral webhost.,http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech
Best Data Science and Analytics Hack (Fortified Data),No1Best Compliance,https://revolutionuc2024.devpost.com/submissions/485143-no1best-compliance,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:35:33,"Inspiration

We were inspired by some work that one of our team members were doing. We thought it would be awesome it there was a way to view that policies different companies followed publicly so you would be able to know what companies to trust.

What it does

Our website allows companies to sign up and list the policies that they follow and how much so. These policies can then be shared publicly so that users can see what companies are doing with their data.

How we built it

We used WordPress to set up the website and then deployed it linked to a .tech domain. We used Chart.js to visualize the compliance data and then inject it into the website. We also used a php based backend with a SQL data storage structure. 

Challenges we ran into

We ran into a lot of trouble. With such a long domain name (http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech) we struggled to get the DNS servers to work right in verifying and linking to our website. A lot of the team were also new to Word Press and needed to learn how to use the tools it provided in building a website. Also, we had never done data visualization with JS so we needed to learn the Chart.js library.

Accomplishments that we're proud of

We are proud that we got a working concept page up. There were a lot of time struggles that made the whole project grind to a halt multiple times. We struggled through the issues and got to the point where we have a working interface to show off.

What's next for No1Best Compliance

We want to expand the company side of the website to make it easier to have multiple users working on different policy concerns for the company. We would also like have more frameworks for companies to list as policies and even add an option for custom policies.

Github

Out Github
",http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech,https://youtu.be/tdacW1xV1LE,"wordpress, chart.js, php, sql",,"University of Cincinnati, Cincinnati State Technical and Community College",3,255-50,University of Cincinnati,We used WordPress to setup the website and some generative AI to make funny puns about compliance. We used Chart.js to make the data visualization. We also used a carbon neutral webhost.,http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech
Best .Tech Domain Name,No1Best Compliance,https://revolutionuc2024.devpost.com/submissions/485143-no1best-compliance,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:35:33,"Inspiration

We were inspired by some work that one of our team members were doing. We thought it would be awesome it there was a way to view that policies different companies followed publicly so you would be able to know what companies to trust.

What it does

Our website allows companies to sign up and list the policies that they follow and how much so. These policies can then be shared publicly so that users can see what companies are doing with their data.

How we built it

We used WordPress to set up the website and then deployed it linked to a .tech domain. We used Chart.js to visualize the compliance data and then inject it into the website. We also used a php based backend with a SQL data storage structure. 

Challenges we ran into

We ran into a lot of trouble. With such a long domain name (http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech) we struggled to get the DNS servers to work right in verifying and linking to our website. A lot of the team were also new to Word Press and needed to learn how to use the tools it provided in building a website. Also, we had never done data visualization with JS so we needed to learn the Chart.js library.

Accomplishments that we're proud of

We are proud that we got a working concept page up. There were a lot of time struggles that made the whole project grind to a halt multiple times. We struggled through the issues and got to the point where we have a working interface to show off.

What's next for No1Best Compliance

We want to expand the company side of the website to make it easier to have multiple users working on different policy concerns for the company. We would also like have more frameworks for companies to list as policies and even add an option for custom policies.

Github

Out Github
",http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech,https://youtu.be/tdacW1xV1LE,"wordpress, chart.js, php, sql",,"University of Cincinnati, Cincinnati State Technical and Community College",3,255-50,University of Cincinnati,We used WordPress to setup the website and some generative AI to make funny puns about compliance. We used Chart.js to make the data visualization. We also used a carbon neutral webhost.,http://www.numberonebestcompliancesoftwaredefinitelynotavirusnoclickbait.tech
Best Social Impact Hack,Pneumonia-de.tech,https://revolutionuc2024.devpost.com/submissions/485155-pneumonia-de-tech,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:51:42,"Inspiration

Pneumonia is a leading cause of illness and death worldwide, especially among children and the elderly. Our project directly addresses this issue by providing a tool that can assist healthcare professionals in diagnosing pneumonia more accurately and efficiently, potentially leading to earlier treatment and improved patient outcomes.

What it does

This project utilizes machine learning to analyze chest X-rays and detect the presence of pneumonia infections, aiding healthcare professionals in accurate and timely diagnosis. Additionally, a website has been developed to showcase the program's usability and accessibility.

How we built it

We used over 5000 chest x-ray images to make a CNN (convoluted neural network) model to classify the x-rays as pneumonia or normal cases. The CNN architecture is designed using the TensorFlow library. We then optimized the hyperparameters for high accuracy (epochs: 100, batch size: 16, learning rate: 0.001).

Challenges we ran into

We faced several challenges while developing our chest X-ray analysis program. First, we had to understand and create a Convolutional Neural Network (CNN) model, which is a type of artificial intelligence that can learn patterns and features from images. Then, we integrated the Streamlit library to build a user-friendly interface for our program. Next, we worked on making sure our program processes images in a way that makes sense for diagnosing diseases like pneumonia. We relied on TensorFlow and Keras libraries to develop and train our CNN model effectively. Finally, we needed to find the right resources, like datasets, to train our model properly. Despite these challenges, we persevered to create a powerful tool that helps healthcare professionals diagnose chest X-ray abnormalities accurately and efficiently.

Accomplishments that we're proud of

We are proud that we developed a tool that assists healthcare professionals in diagnosing pneumonia and empower them to make more informed decisions and provide better care to their patients. Therefor it can lead to increased confidence in diagnosis and treatment plans, ultimately benefiting patient outcomes.

What we learned

In our team of four, we learned the ropes of building a chest X-ray analysis program. We explored creating Convolutional Neural Network (CNN) models, mastered Streamlit for user-friendly interfaces, and innovated ways to process images effectively. Harnessing TensorFlow and Keras libraries, we embraced collaborative problem-solving, while sourcing data resources highlighted the importance of research and data management. Our journey underscored the power of teamwork, adaptability, and mutual support in tackling machine learning challenges together.

What's next for Pneumonia-de.tech

Our plan includes expanding the model's capabilities to diagnose a broader range of diseases beyond pneumonia through further training using machine learning techniques. This extension aims to enhance the tool's utility and impact in healthcare by enabling it to identify various medical conditions from X-ray images with improved accuracy and reliability.
","https://pneumonia-i-hardly-know-ya.streamlit.app, https://github.com/ZMW7/pneumonia",https://vimeo.com/916455268?share=copy,"python, streamlit, keras, teachablemachine, imagetraining, github, tensorflow",,University of Cincinnati,3,Lobby2-32,University of Cincinnati,"I found GitHub incredibly helpful for managing our project and collaborating with my team. It made it easy for us to work on the same codebase without stepping on each other's toes. With GitHub, we could track changes, review each other's code, and stay organized with project tasks and issues. Plus, it gave us peace of mind knowing that we could always revert to previous versions if something went wrong. GitHub truly simplified our workflow and enhanced our teamwork.",""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Pneumonia-de.tech,https://revolutionuc2024.devpost.com/submissions/485155-pneumonia-de-tech,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:51:42,"Inspiration

Pneumonia is a leading cause of illness and death worldwide, especially among children and the elderly. Our project directly addresses this issue by providing a tool that can assist healthcare professionals in diagnosing pneumonia more accurately and efficiently, potentially leading to earlier treatment and improved patient outcomes.

What it does

This project utilizes machine learning to analyze chest X-rays and detect the presence of pneumonia infections, aiding healthcare professionals in accurate and timely diagnosis. Additionally, a website has been developed to showcase the program's usability and accessibility.

How we built it

We used over 5000 chest x-ray images to make a CNN (convoluted neural network) model to classify the x-rays as pneumonia or normal cases. The CNN architecture is designed using the TensorFlow library. We then optimized the hyperparameters for high accuracy (epochs: 100, batch size: 16, learning rate: 0.001).

Challenges we ran into

We faced several challenges while developing our chest X-ray analysis program. First, we had to understand and create a Convolutional Neural Network (CNN) model, which is a type of artificial intelligence that can learn patterns and features from images. Then, we integrated the Streamlit library to build a user-friendly interface for our program. Next, we worked on making sure our program processes images in a way that makes sense for diagnosing diseases like pneumonia. We relied on TensorFlow and Keras libraries to develop and train our CNN model effectively. Finally, we needed to find the right resources, like datasets, to train our model properly. Despite these challenges, we persevered to create a powerful tool that helps healthcare professionals diagnose chest X-ray abnormalities accurately and efficiently.

Accomplishments that we're proud of

We are proud that we developed a tool that assists healthcare professionals in diagnosing pneumonia and empower them to make more informed decisions and provide better care to their patients. Therefor it can lead to increased confidence in diagnosis and treatment plans, ultimately benefiting patient outcomes.

What we learned

In our team of four, we learned the ropes of building a chest X-ray analysis program. We explored creating Convolutional Neural Network (CNN) models, mastered Streamlit for user-friendly interfaces, and innovated ways to process images effectively. Harnessing TensorFlow and Keras libraries, we embraced collaborative problem-solving, while sourcing data resources highlighted the importance of research and data management. Our journey underscored the power of teamwork, adaptability, and mutual support in tackling machine learning challenges together.

What's next for Pneumonia-de.tech

Our plan includes expanding the model's capabilities to diagnose a broader range of diseases beyond pneumonia through further training using machine learning techniques. This extension aims to enhance the tool's utility and impact in healthcare by enabling it to identify various medical conditions from X-ray images with improved accuracy and reliability.
","https://pneumonia-i-hardly-know-ya.streamlit.app, https://github.com/ZMW7/pneumonia",https://vimeo.com/916455268?share=copy,"python, streamlit, keras, teachablemachine, imagetraining, github, tensorflow",,University of Cincinnati,3,Lobby2-32,University of Cincinnati,"I found GitHub incredibly helpful for managing our project and collaborating with my team. It made it easy for us to work on the same codebase without stepping on each other's toes. With GitHub, we could track changes, review each other's code, and stay organized with project tasks and issues. Plus, it gave us peace of mind knowing that we could always revert to previous versions if something went wrong. GitHub truly simplified our workflow and enhanced our teamwork.",""
Best Implementation of an LLM or Other Generative AI Model (CincyTech),Pneumonia-de.tech,https://revolutionuc2024.devpost.com/submissions/485155-pneumonia-de-tech,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:51:42,"Inspiration

Pneumonia is a leading cause of illness and death worldwide, especially among children and the elderly. Our project directly addresses this issue by providing a tool that can assist healthcare professionals in diagnosing pneumonia more accurately and efficiently, potentially leading to earlier treatment and improved patient outcomes.

What it does

This project utilizes machine learning to analyze chest X-rays and detect the presence of pneumonia infections, aiding healthcare professionals in accurate and timely diagnosis. Additionally, a website has been developed to showcase the program's usability and accessibility.

How we built it

We used over 5000 chest x-ray images to make a CNN (convoluted neural network) model to classify the x-rays as pneumonia or normal cases. The CNN architecture is designed using the TensorFlow library. We then optimized the hyperparameters for high accuracy (epochs: 100, batch size: 16, learning rate: 0.001).

Challenges we ran into

We faced several challenges while developing our chest X-ray analysis program. First, we had to understand and create a Convolutional Neural Network (CNN) model, which is a type of artificial intelligence that can learn patterns and features from images. Then, we integrated the Streamlit library to build a user-friendly interface for our program. Next, we worked on making sure our program processes images in a way that makes sense for diagnosing diseases like pneumonia. We relied on TensorFlow and Keras libraries to develop and train our CNN model effectively. Finally, we needed to find the right resources, like datasets, to train our model properly. Despite these challenges, we persevered to create a powerful tool that helps healthcare professionals diagnose chest X-ray abnormalities accurately and efficiently.

Accomplishments that we're proud of

We are proud that we developed a tool that assists healthcare professionals in diagnosing pneumonia and empower them to make more informed decisions and provide better care to their patients. Therefor it can lead to increased confidence in diagnosis and treatment plans, ultimately benefiting patient outcomes.

What we learned

In our team of four, we learned the ropes of building a chest X-ray analysis program. We explored creating Convolutional Neural Network (CNN) models, mastered Streamlit for user-friendly interfaces, and innovated ways to process images effectively. Harnessing TensorFlow and Keras libraries, we embraced collaborative problem-solving, while sourcing data resources highlighted the importance of research and data management. Our journey underscored the power of teamwork, adaptability, and mutual support in tackling machine learning challenges together.

What's next for Pneumonia-de.tech

Our plan includes expanding the model's capabilities to diagnose a broader range of diseases beyond pneumonia through further training using machine learning techniques. This extension aims to enhance the tool's utility and impact in healthcare by enabling it to identify various medical conditions from X-ray images with improved accuracy and reliability.
","https://pneumonia-i-hardly-know-ya.streamlit.app, https://github.com/ZMW7/pneumonia",https://vimeo.com/916455268?share=copy,"python, streamlit, keras, teachablemachine, imagetraining, github, tensorflow",,University of Cincinnati,3,Lobby2-32,University of Cincinnati,"I found GitHub incredibly helpful for managing our project and collaborating with my team. It made it easy for us to work on the same codebase without stepping on each other's toes. With GitHub, we could track changes, review each other's code, and stay organized with project tasks and issues. Plus, it gave us peace of mind knowing that we could always revert to previous versions if something went wrong. GitHub truly simplified our workflow and enhanced our teamwork.",""
Best Product Market Fit (Center for Entrepreneurship),Pneumonia-de.tech,https://revolutionuc2024.devpost.com/submissions/485155-pneumonia-de-tech,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:51:42,"Inspiration

Pneumonia is a leading cause of illness and death worldwide, especially among children and the elderly. Our project directly addresses this issue by providing a tool that can assist healthcare professionals in diagnosing pneumonia more accurately and efficiently, potentially leading to earlier treatment and improved patient outcomes.

What it does

This project utilizes machine learning to analyze chest X-rays and detect the presence of pneumonia infections, aiding healthcare professionals in accurate and timely diagnosis. Additionally, a website has been developed to showcase the program's usability and accessibility.

How we built it

We used over 5000 chest x-ray images to make a CNN (convoluted neural network) model to classify the x-rays as pneumonia or normal cases. The CNN architecture is designed using the TensorFlow library. We then optimized the hyperparameters for high accuracy (epochs: 100, batch size: 16, learning rate: 0.001).

Challenges we ran into

We faced several challenges while developing our chest X-ray analysis program. First, we had to understand and create a Convolutional Neural Network (CNN) model, which is a type of artificial intelligence that can learn patterns and features from images. Then, we integrated the Streamlit library to build a user-friendly interface for our program. Next, we worked on making sure our program processes images in a way that makes sense for diagnosing diseases like pneumonia. We relied on TensorFlow and Keras libraries to develop and train our CNN model effectively. Finally, we needed to find the right resources, like datasets, to train our model properly. Despite these challenges, we persevered to create a powerful tool that helps healthcare professionals diagnose chest X-ray abnormalities accurately and efficiently.

Accomplishments that we're proud of

We are proud that we developed a tool that assists healthcare professionals in diagnosing pneumonia and empower them to make more informed decisions and provide better care to their patients. Therefor it can lead to increased confidence in diagnosis and treatment plans, ultimately benefiting patient outcomes.

What we learned

In our team of four, we learned the ropes of building a chest X-ray analysis program. We explored creating Convolutional Neural Network (CNN) models, mastered Streamlit for user-friendly interfaces, and innovated ways to process images effectively. Harnessing TensorFlow and Keras libraries, we embraced collaborative problem-solving, while sourcing data resources highlighted the importance of research and data management. Our journey underscored the power of teamwork, adaptability, and mutual support in tackling machine learning challenges together.

What's next for Pneumonia-de.tech

Our plan includes expanding the model's capabilities to diagnose a broader range of diseases beyond pneumonia through further training using machine learning techniques. This extension aims to enhance the tool's utility and impact in healthcare by enabling it to identify various medical conditions from X-ray images with improved accuracy and reliability.
","https://pneumonia-i-hardly-know-ya.streamlit.app, https://github.com/ZMW7/pneumonia",https://vimeo.com/916455268?share=copy,"python, streamlit, keras, teachablemachine, imagetraining, github, tensorflow",,University of Cincinnati,3,Lobby2-32,University of Cincinnati,"I found GitHub incredibly helpful for managing our project and collaborating with my team. It made it easy for us to work on the same codebase without stepping on each other's toes. With GitHub, we could track changes, review each other's code, and stay organized with project tasks and issues. Plus, it gave us peace of mind knowing that we could always revert to previous versions if something went wrong. GitHub truly simplified our workflow and enhanced our teamwork.",""
Best .Tech Domain Name,Pneumonia-de.tech,https://revolutionuc2024.devpost.com/submissions/485155-pneumonia-de-tech,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:51:42,"Inspiration

Pneumonia is a leading cause of illness and death worldwide, especially among children and the elderly. Our project directly addresses this issue by providing a tool that can assist healthcare professionals in diagnosing pneumonia more accurately and efficiently, potentially leading to earlier treatment and improved patient outcomes.

What it does

This project utilizes machine learning to analyze chest X-rays and detect the presence of pneumonia infections, aiding healthcare professionals in accurate and timely diagnosis. Additionally, a website has been developed to showcase the program's usability and accessibility.

How we built it

We used over 5000 chest x-ray images to make a CNN (convoluted neural network) model to classify the x-rays as pneumonia or normal cases. The CNN architecture is designed using the TensorFlow library. We then optimized the hyperparameters for high accuracy (epochs: 100, batch size: 16, learning rate: 0.001).

Challenges we ran into

We faced several challenges while developing our chest X-ray analysis program. First, we had to understand and create a Convolutional Neural Network (CNN) model, which is a type of artificial intelligence that can learn patterns and features from images. Then, we integrated the Streamlit library to build a user-friendly interface for our program. Next, we worked on making sure our program processes images in a way that makes sense for diagnosing diseases like pneumonia. We relied on TensorFlow and Keras libraries to develop and train our CNN model effectively. Finally, we needed to find the right resources, like datasets, to train our model properly. Despite these challenges, we persevered to create a powerful tool that helps healthcare professionals diagnose chest X-ray abnormalities accurately and efficiently.

Accomplishments that we're proud of

We are proud that we developed a tool that assists healthcare professionals in diagnosing pneumonia and empower them to make more informed decisions and provide better care to their patients. Therefor it can lead to increased confidence in diagnosis and treatment plans, ultimately benefiting patient outcomes.

What we learned

In our team of four, we learned the ropes of building a chest X-ray analysis program. We explored creating Convolutional Neural Network (CNN) models, mastered Streamlit for user-friendly interfaces, and innovated ways to process images effectively. Harnessing TensorFlow and Keras libraries, we embraced collaborative problem-solving, while sourcing data resources highlighted the importance of research and data management. Our journey underscored the power of teamwork, adaptability, and mutual support in tackling machine learning challenges together.

What's next for Pneumonia-de.tech

Our plan includes expanding the model's capabilities to diagnose a broader range of diseases beyond pneumonia through further training using machine learning techniques. This extension aims to enhance the tool's utility and impact in healthcare by enabling it to identify various medical conditions from X-ray images with improved accuracy and reliability.
","https://pneumonia-i-hardly-know-ya.streamlit.app, https://github.com/ZMW7/pneumonia",https://vimeo.com/916455268?share=copy,"python, streamlit, keras, teachablemachine, imagetraining, github, tensorflow",,University of Cincinnati,3,Lobby2-32,University of Cincinnati,"I found GitHub incredibly helpful for managing our project and collaborating with my team. It made it easy for us to work on the same codebase without stepping on each other's toes. With GitHub, we could track changes, review each other's code, and stay organized with project tasks and issues. Plus, it gave us peace of mind knowing that we could always revert to previous versions if something went wrong. GitHub truly simplified our workflow and enhanced our teamwork.",""
"Best ""Useless"" Hack",Nonogram Solver,https://revolutionuc2024.devpost.com/submissions/485159-nonogram-solver,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:53:39,"Inspiration

According to Wikipedia, ""Nonograms are picture logic puzzles in which cells in a grid must be colored or left blank according to numbers at the edges of the grid to reveal a hidden picture."" I have always enjoyed doing them and they are part of a handful of different mobile games I play to waste time. I thought it would be an interesting challenge to build something that can solve them automatically.

What it does

Solves nonogram puzzles using a CNF style algorithm and a satisfiability solver.

How we built it

It was built in C# to use Google's OR-Tools library. It creates a variable for each cell in the grid. Then, based on the user's inputs, sets what combinations of assignments are allowed for all the variables. Once all allowed assignments are set, the library solves the problem.

Challenges we ran into

It was very difficult to find the right library to use and how to use it. The C# documentation for the OR-Tools library is minimal and made learning to use the library take a long time.

What's next for Nonogram Solver

There are currently no plans to further develop this project. There are a handful of usability upgrades that would be useful, such as reading and writing files for input, a proper UI to interact with, some additional validation and error handling are just a few examples. But I built this project for myself to enjoy the challenge of the problem, which I did.
",https://github.com/IlanSchindler/Nonogram-Solver,https://youtu.be/DYsDkQMr4bc,"c#, or-tools",,University of Cincinnati,0,220-48,University of Cincinnati,I did not interact with any tech beyond my project this weekend,""
Best Educational Hack,HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Design Hack,HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Social Impact Hack,HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
"Best ""Useless"" Hack",HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
EnableUC Challenge,HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Use of Postgres (Tembo),HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Data Science and Analytics Hack (Fortified Data),HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Use of Taipy,HealthSphere,https://revolutionuc2024.devpost.com/submissions/485164-healthsphere,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:56:43,"Inspiration

The inspiration behind HealthSphere stemmed from a desire to revolutionize the way people approach their health and well-being. We wanted to create a platform that seamlessly integrates data-driven insights, personalized recommendations, and holistic wellness practices to empower individuals to take control of their health journey like never before.

What it does

HealthSphere is a comprehensive health and wellness platform that leverages cutting-edge technology and data analytics to provide users with personalized insights, actionable recommendations, and interactive tools to optimize their physical, mental, and emotional well-being. From tracking daily activities and monitoring vital signs, while also visualizing data using graphs, HealthSphere offers a holistic approach to health management.

How we built it

HealthSphere was meticulously crafted using a diverse set of technologies to ensure a comprehensive and effective solution for our users. For the backend development, we utilized Python Flask to build the backend infrastructure, PostgreSQL for data storage and management, and Taipy for data analysis and manipulation. On the frontend, HTML and CSS were used to design the user interface, while JavaScript was employed to implement dynamic and interactive elements. Python served as the primary language for data analysis and integration tasks, with libraries like pandas. We also sourced relevant datasets and insights from Kaggle. Throughout the development process, we relied on tools such as GitHub for version control, and Visual Studio Code for code editing and debugging. Our iterative prototyping, rigorous testing, and continuous refinement ensured a seamless and user-friendly experience for HealthSphere users.

Challenges we ran into

During the development process, one of the significant challenges we faced was integrating disparate data sources seamlessly into our PostgreSQL database. We encountered varying data formats and structures, requiring careful normalization and transformation to ensure consistency and accuracy. Additionally, leveraging Taipy for data analysis posed its own challenges, particularly in visualizing complex datasets effectively. We needed to create insightful graphs and charts to present data-driven insights to users in an understandable format. Moreover, optimizing the platform's performance for real-time analytics while maintaining data security and privacy compliance was a multifaceted challenge. Balancing the need for speed with stringent data protection measures required meticulous fine-tuning and rigorous testing. Furthermore, designing an intuitive user interface that caters to diverse user needs and preferences proved to be a nuanced endeavor. We navigated through feedback loops and user testing sessions to refine the interface iteratively, ensuring a seamless and engaging user experience. Despite these challenges, our team's collaboration, innovation, and perseverance enabled us to overcome obstacles and deliver a robust and reliable solution with HealthSphere.

Accomplishments that we're proud of

We're proud to have developed a sophisticated health and wellness platform that has the potential to make a meaningful impact on people's lives. Our platform empowers individuals to proactively manage their health, make informed decisions, and adopt healthy habits that contribute to long-term well-being. Furthermore, we're proud of the seamless integration of technology and data analytics to deliver personalized experiences that resonate with our users.

What we learned

Throughout the development of HealthSphere, we learned valuable lessons about the importance of user-centric design, the complexities of data integration and analysis, and the significance of collaboration and teamwork in overcoming challenges.

What's next for HealthSphere

Looking ahead, we envision expanding the capabilities of HealthSphere to encompass additional aspects of health and wellness, such as mental health management, chronic disease prevention, and personalized coaching services. We also plan to further enhance the platform's features based on user feedback and emerging technological advancements. Ultimately, our goal is to continue innovating and evolving HealthSphere to empower individuals to lead healthier, happier lives.
",https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon,https://youtu.be/K74ENN8pJXU,"html, css, javascript, python, flask, taipy, postgresql, github, kaggle, vscode, psycopg2, pandas, clerk, git, markdown",,University of Cincinnati,1,220-49,University of Cincinnati,"Over the weekend at the hackathon, I had the opportunity to engage with a variety of technologies, including Clerk for user login, PostgreSQL for database management, and Taipy for data graphs and markdown processing. Clerk provided seamless integration with our project, offering secure user management functionalities and comprehensive documentation. PostgreSQL proved reliable and efficient as our backend database solution, with robust features and scalability. Taipy, although relatively new, showed promise with clear documentation and community support, although it may require further development. Overall, all three technologies contributed positively to our project's success.",""
Best Educational Hack,Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best Design Hack,Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best Social Impact Hack,Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best Product Market Fit (Center for Entrepreneurship),Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best Use of Auth0 ,Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best .Tech Domain Name,Lingual Links,https://revolutionuc2024.devpost.com/submissions/485167-lingual-links,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 08:59:58,"Inspiration

In the past, we've had trouble communicating with native speakers of languages we've tried learning, and want a better solution.  The project we've created allows for traditional textbook style language learning, as well as a hands-on direct approach.

What it does

Lingual Links allows users to practice learning a language of their choice by participating in lessons and quizzes, with the additional benefit of being able to chat with native speakers of their chosen language.  In doing so, each user gets an immersive and seamless experience that they otherwise wouldn't have.

How we built it

Hardware wise, Lingual Links uses a Raspberry Pi 3 to host a local flask webapp with additional software to route users into chat rooms.  The front end is created using HTML and CSS with additional backend code written in python.

Challenges we ran into

As a group, there were several challenges we ran into.  None of us had much front end programming experience, limiting our ability to create advanced features.  Additionally, the networking/hardware was very new, and presented some initial difficulty.

Accomplishments that we're proud of

We're proud of the fact the webapp is accessible to anyone on the network without running any client side code, as well as it's ability to allow clients to remotely chat with one another.  

What we learned

We've lot about webapp design with HTML and CSS, as well as running network wide local sites.  

What's next for Lingual Links

Some next steps would be including some interactive single player games, adding a global scoreboard, adding support for different languages, and touching up the UI/UX. 
",https://github.com/cbeazon0/RevUC2024,https://youtu.be/WjSJmgfcCnk,"python, flask, html, css, raspberry-pi",,University of Cincinnati,2,Lobby2-16,University of Cincinnati,"Auth0 was very easy to use as it had code snippets, but Kintone was difficult due to the lack of code examples and our lack of experience.",linguallinks.tech
Best Design Hack,Feline Fury!,https://revolutionuc2024.devpost.com/submissions/485184-feline-fury,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:17:42,"Inspiration

We originally wanted to create an application that compared grocery prices by using public APIs. We struggled with the authentication tokens, however, so we decided to pivot to something that was more in our scope. Most of the API tutorials we followed had us gathering information about cats, so we decided to make a fun cat card game. 

What it does

It gathers data from a website dedicated to cat facts, compiles that information to make cat stats, and then does a lot of backend data processing to create the cards that are used in the game.

How we built it

We built the game using python and using public APIs.

Challenges we ran into

Since we had never used APIs or made a game, we had to watch a lot of tutorials on both subjects. We did extensive research and went through a lot of trial and error.

Accomplishments that we're proud of

Despite the game not having all the aspects we had hoped when we set out, we are proud that we were able to create a minimum viable product and prove that our concept worked. We are especially proud of being able to implement all the new things we learned. 

What we learned

We learned a lot about object-oriented programming, game design, and APIs. The coolest part, in our opinion, is the engine that allows users to play against a bot.

What's next for Feline Furry

We hope to be able to improve game play by creating more advanced rules. This way, there will be more involved than just randomly generating cards.
","",https://youtu.be/z5Fnok-QtOQ?si=0WPwC5Xi5Y4-eCp0,"api, python, pygame, pandas, pil, matplotlib",,University of Cincinnati,1,220-44,University of Cincinnati,"We used python, Jupyter Notebook, pygames, pandas, and APIs.",""
"Best ""Useless"" Hack",Feline Fury!,https://revolutionuc2024.devpost.com/submissions/485184-feline-fury,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:17:42,"Inspiration

We originally wanted to create an application that compared grocery prices by using public APIs. We struggled with the authentication tokens, however, so we decided to pivot to something that was more in our scope. Most of the API tutorials we followed had us gathering information about cats, so we decided to make a fun cat card game. 

What it does

It gathers data from a website dedicated to cat facts, compiles that information to make cat stats, and then does a lot of backend data processing to create the cards that are used in the game.

How we built it

We built the game using python and using public APIs.

Challenges we ran into

Since we had never used APIs or made a game, we had to watch a lot of tutorials on both subjects. We did extensive research and went through a lot of trial and error.

Accomplishments that we're proud of

Despite the game not having all the aspects we had hoped when we set out, we are proud that we were able to create a minimum viable product and prove that our concept worked. We are especially proud of being able to implement all the new things we learned. 

What we learned

We learned a lot about object-oriented programming, game design, and APIs. The coolest part, in our opinion, is the engine that allows users to play against a bot.

What's next for Feline Furry

We hope to be able to improve game play by creating more advanced rules. This way, there will be more involved than just randomly generating cards.
","",https://youtu.be/z5Fnok-QtOQ?si=0WPwC5Xi5Y4-eCp0,"api, python, pygame, pandas, pil, matplotlib",,University of Cincinnati,1,220-44,University of Cincinnati,"We used python, Jupyter Notebook, pygames, pandas, and APIs.",""
"",sdcsdc,"",Draft,Pending,Project overview,02/25/2024 09:18:50,"","",,"",,University of Cincinnati,0,"","","",""
Best Educational Hack,EquationQuest,https://revolutionuc2024.devpost.com/submissions/485199-equationquest,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:41:12,"Inspiration

We initially wanted to make a 2D game in Unity for Math, English, Science, and Social Studies, but soon realized that was out of scope for this Hackathon. From there, we decided to focus on just the math and use Python since we are more familiar with it.

What it does

This game allows the user to practice math problems by through various different game modes.


Focus mode: Practice questions of a specific level
High Score mode: Try and get the highest score possible
Time attack: Answer as many questions as possible in 30 seconds.


How we built it

We used Python for the backend and the tkinter module for the GUI.

Challenges we ran into

The GUI and tkinter in general was very difficult to use. The way that buttons are used made it significantly harder for us to effectively develop our ideas.

Accomplishments that we're proud of


Learning tkinter and making GUI
Code management
Curriculum
Development speed
Teamwork
Enjoyment when playing


What we learned

We learned how to use tkinter, learned about circular importing, GitHub project management, and nested function returns.

What's next for EquationQuest

Improve GUI, add high score tracker, fix high score, and improve time attack.
",https://github.com/zdfowler0/RevUC2024,https://youtu.be/b5L7v1a5RVU,"python, tkinter",,University of Cincinnati,1,230-7,University of Cincinnati,"GitHub worked well for us to share code, though out pull requests never worked.",""
Best Design Hack,EquationQuest,https://revolutionuc2024.devpost.com/submissions/485199-equationquest,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:41:12,"Inspiration

We initially wanted to make a 2D game in Unity for Math, English, Science, and Social Studies, but soon realized that was out of scope for this Hackathon. From there, we decided to focus on just the math and use Python since we are more familiar with it.

What it does

This game allows the user to practice math problems by through various different game modes.


Focus mode: Practice questions of a specific level
High Score mode: Try and get the highest score possible
Time attack: Answer as many questions as possible in 30 seconds.


How we built it

We used Python for the backend and the tkinter module for the GUI.

Challenges we ran into

The GUI and tkinter in general was very difficult to use. The way that buttons are used made it significantly harder for us to effectively develop our ideas.

Accomplishments that we're proud of


Learning tkinter and making GUI
Code management
Curriculum
Development speed
Teamwork
Enjoyment when playing


What we learned

We learned how to use tkinter, learned about circular importing, GitHub project management, and nested function returns.

What's next for EquationQuest

Improve GUI, add high score tracker, fix high score, and improve time attack.
",https://github.com/zdfowler0/RevUC2024,https://youtu.be/b5L7v1a5RVU,"python, tkinter",,University of Cincinnati,1,230-7,University of Cincinnati,"GitHub worked well for us to share code, though out pull requests never worked.",""
"Best ""Useless"" Hack",EquationQuest,https://revolutionuc2024.devpost.com/submissions/485199-equationquest,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:41:12,"Inspiration

We initially wanted to make a 2D game in Unity for Math, English, Science, and Social Studies, but soon realized that was out of scope for this Hackathon. From there, we decided to focus on just the math and use Python since we are more familiar with it.

What it does

This game allows the user to practice math problems by through various different game modes.


Focus mode: Practice questions of a specific level
High Score mode: Try and get the highest score possible
Time attack: Answer as many questions as possible in 30 seconds.


How we built it

We used Python for the backend and the tkinter module for the GUI.

Challenges we ran into

The GUI and tkinter in general was very difficult to use. The way that buttons are used made it significantly harder for us to effectively develop our ideas.

Accomplishments that we're proud of


Learning tkinter and making GUI
Code management
Curriculum
Development speed
Teamwork
Enjoyment when playing


What we learned

We learned how to use tkinter, learned about circular importing, GitHub project management, and nested function returns.

What's next for EquationQuest

Improve GUI, add high score tracker, fix high score, and improve time attack.
",https://github.com/zdfowler0/RevUC2024,https://youtu.be/b5L7v1a5RVU,"python, tkinter",,University of Cincinnati,1,230-7,University of Cincinnati,"GitHub worked well for us to share code, though out pull requests never worked.",""
"Best ""Useless"" Hack",Fluid simulation & render,https://revolutionuc2024.devpost.com/submissions/485204-fluid-simulation-render,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 09:44:35,"Inspiration

Simulation is one of the most interesting fields in computer science. It poses fantastic problems and is a true test of someones optimization skills. I've only ever dealt optical simulation, so I thought id get fluid a shot.

What it does

It simulates a fluid in a bounding volume. Its a point based simulation, given a surface via the marched cubes algorithm. Its a bit slow.

How we built it

Under the hood it uses the euler method to simulate the motion and collision of a large number of spheres. Its given a surface, and then passed to my raytracing engine to be rendered. The engine has been highly modified for this task, to try and minimize render time per frame. 

Challenges we ran into

Getting rendering working took longer than getting the fluid sim working. I spent 3 odd hours trying to get opengl working, but it just didnt work out. Simply too much to learn in a few hours. So instead, I opted to retrofit my raytracer for the task.

When youre converting an engine meant to render in seconds per frame to something that renders in frames per second, you have to cut out ALOT of fat. I had to cut out all secondary bounces, as well as almost entirely rework thread and data management. A lot of things that used to be essentially free had to be cut out to save precious hundreds of milliseconds.

Theres also a bug with the marching cubes algo I never got around to figuring out that causes flickering, not sure what thats about.

aside from that, the fluid sim was quite frustrating. I haven't touched kinetic simulation before, so I was going in blind. I had intended to implement FLIP, but I in the end barely managed to implement a highly chaotic particle only sim.

Accomplishments that we're proud of

For what it is, a CPU based raytracer never meant for this task, the retrofit went very well. As well as that, the simulation is at least identifiable as a liquid, so I take that as a win.

What we learned

GPU bindings in C++ are rough. I need to set aside more time to learning it. I also learned a fair bit about kinetic simulation, and how finicky it can be. It was a good lesson in data and performance management.

What's next for Fluid simulation & render

Hopefully? a trashbin. Its a mess, a beautiful, horrible, mess. But the best of projects are the ones that go in the trash, because theyre the ones you learn the most from.
",https://github.com/CharlesCowdery/fluid-sim,https://www.youtube.com/v/hM8nzcIo-rI,c++,,"",0,245-13,University of Cincinnati,I didnt use anything :(,""
"",B.A.T,https://revolutionuc2024.devpost.com/submissions/485225-b-a-t,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:05:08,"Inspiration:

To create something that was entertaining

What it does:

Itâ€™s a robot that will follow you around and shout insults when it gets within a certain range. He will also follow you around

How we built it:

B.A.T uses computer vision to find his target then uses ultrasonic sensors to find out how far you are and is driven by 2 servo motors to make him mobile.

Challenges we ran into:

Getting the vision system to work in such a short time frame.

Accomplishments that we're proud of:

The ultrasonic sensors are fairly accurate, and B.A.T will follow you if you keep moving.

What we learned:

Bring a beefier power supply so I am not grounded to a Wall Wart.

What's next for B.A.T:

Become more obnoxious.
","",https://youtube.com/shorts/UZQSJoZrICk?si=NnRndNGbszEuloSM,"python, opencv",,University of Cincinnati,0,Lobby2-21,University of Cincinnati,"I had a great time interacting with my peers, I got to see a lot of good projects and be in an overall good environment",""
Best Social Impact Hack,Stock O' Clock,https://revolutionuc2024.devpost.com/submissions/485233-stock-o-clock,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:08:02,"Inspiration

Our inspiration for building this project was our passion for the use of API's and integrating secruity measures into a website.

What it does

The user can input their stock symbols that they want to search for and the website will provide information of the stock.

How we built it

We used pure html, css, javascript to build the web application.  We also used auth0 to implement a login and sign up page.

Challenges we ran into

Setting up the Auth0 was one of our big challenges, and setting up kintone.

Accomplishments that we're proud of

Accomplishments we are proud of are getting Auth0 to be set up, and using API's to fetch information for us.

What we learned

How to fetch json information and integrate Auth0 into our projects.  A lot of us also learned how to code more professionally in html, css, and javascript.

What's next for Stock O' Clock

Making it more secure, adding a database, saving user preferences.
",http://ethantiller.github.io/Stock-O-Clock,https://youtu.be/P8_ekqmuuZ4?si=qJKZwp5B54wBAU9Q,"html, css, javascript",,University of Cincinnati,3,230-8,University of Cincinnati,"We gained a lot of new experience using html, css, and javascript.  We also got a lot of practice with auth0 and creating github repositories and github-pages.",N/A
"Best ""Useless"" Hack",Stock O' Clock,https://revolutionuc2024.devpost.com/submissions/485233-stock-o-clock,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:08:02,"Inspiration

Our inspiration for building this project was our passion for the use of API's and integrating secruity measures into a website.

What it does

The user can input their stock symbols that they want to search for and the website will provide information of the stock.

How we built it

We used pure html, css, javascript to build the web application.  We also used auth0 to implement a login and sign up page.

Challenges we ran into

Setting up the Auth0 was one of our big challenges, and setting up kintone.

Accomplishments that we're proud of

Accomplishments we are proud of are getting Auth0 to be set up, and using API's to fetch information for us.

What we learned

How to fetch json information and integrate Auth0 into our projects.  A lot of us also learned how to code more professionally in html, css, and javascript.

What's next for Stock O' Clock

Making it more secure, adding a database, saving user preferences.
",http://ethantiller.github.io/Stock-O-Clock,https://youtu.be/P8_ekqmuuZ4?si=qJKZwp5B54wBAU9Q,"html, css, javascript",,University of Cincinnati,3,230-8,University of Cincinnati,"We gained a lot of new experience using html, css, and javascript.  We also got a lot of practice with auth0 and creating github repositories and github-pages.",N/A
Best Use of Auth0 ,Stock O' Clock,https://revolutionuc2024.devpost.com/submissions/485233-stock-o-clock,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:08:02,"Inspiration

Our inspiration for building this project was our passion for the use of API's and integrating secruity measures into a website.

What it does

The user can input their stock symbols that they want to search for and the website will provide information of the stock.

How we built it

We used pure html, css, javascript to build the web application.  We also used auth0 to implement a login and sign up page.

Challenges we ran into

Setting up the Auth0 was one of our big challenges, and setting up kintone.

Accomplishments that we're proud of

Accomplishments we are proud of are getting Auth0 to be set up, and using API's to fetch information for us.

What we learned

How to fetch json information and integrate Auth0 into our projects.  A lot of us also learned how to code more professionally in html, css, and javascript.

What's next for Stock O' Clock

Making it more secure, adding a database, saving user preferences.
",http://ethantiller.github.io/Stock-O-Clock,https://youtu.be/P8_ekqmuuZ4?si=qJKZwp5B54wBAU9Q,"html, css, javascript",,University of Cincinnati,3,230-8,University of Cincinnati,"We gained a lot of new experience using html, css, and javascript.  We also got a lot of practice with auth0 and creating github repositories and github-pages.",N/A
Best Educational Hack,Meetcode,https://revolutionuc2024.devpost.com/submissions/485238-meetcode,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:13:42,"Inspiration

We as Computer Science student have all once studied for a coding interview. I know how frustrated it is, you have grinded hundreds, thousands of Leetcode problems, and still have no clue how Dynamic Programming works. But you know what is more frustrated ? It is that when you study Leetcode with your friends, you struggled in sharing your ideas or explaining your solution. That's why Meetcode is here (yes Leetcode with a M instead of L), to help your journey to conquering Data Structure more excited.

What it does

Meetcode is a platform that help your DSA learning experience more interactive and collaborative. It support pair programming, allow multiple users to share a code editor and work on a same problem. It also have a drawing board feature, which tailored specifically for DSA learning experience. It allows you to visualizing some common data structure like Linked List, Tree, Graphs, with simple interaction like drag and drop, Ctrl-C Ctrl-V shortkeys, etc.. to facilitate learning experience (yeah no more ugly annoying Binary Tree drawn on MS Paint)

How we built it

Our frontend is a React app, and our server is a Golang codebase. Golang is a great choice for our backend, due to its performance in concurrency programming, allowing to setup a reliable and fast connection between users

Challenges we ran into

Our biggest challenge is setting up a reliable WebSocket connection between users and the code editor. we also faced challenges in synchronizing real-time edits made by multiple users within the code editor

Accomplishments that we're proud of

Our (or my) biggest accomplishments is just have all the needed functionality for the app to work (need lots of work on UI btw)

What we learned

I learned so much specifically about the WebSocket protocol, which is great for real-time data transfer

What's next for Meetcode

Meetcode has a lot of potential. Our mission is to help CS students around the world have the least painful experience studying DSA. Some functionality that we might include in the future are:


Allow creating different room
Allow to store as a note (and have multiple note)
More functionality on visualizing tool

","https://github.com/qtrunguyen/MeetCode-backend, https://github.com/qtrunguyen/MeetCode-frontend",https://youtu.be/sdI68db_8RQ,"react, go, postgresql",,University of Cincinnati,0,245-14,University of Cincinnati,"AWS, Postgres",no
Best Use of Postgres (Tembo),Meetcode,https://revolutionuc2024.devpost.com/submissions/485238-meetcode,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:13:42,"Inspiration

We as Computer Science student have all once studied for a coding interview. I know how frustrated it is, you have grinded hundreds, thousands of Leetcode problems, and still have no clue how Dynamic Programming works. But you know what is more frustrated ? It is that when you study Leetcode with your friends, you struggled in sharing your ideas or explaining your solution. That's why Meetcode is here (yes Leetcode with a M instead of L), to help your journey to conquering Data Structure more excited.

What it does

Meetcode is a platform that help your DSA learning experience more interactive and collaborative. It support pair programming, allow multiple users to share a code editor and work on a same problem. It also have a drawing board feature, which tailored specifically for DSA learning experience. It allows you to visualizing some common data structure like Linked List, Tree, Graphs, with simple interaction like drag and drop, Ctrl-C Ctrl-V shortkeys, etc.. to facilitate learning experience (yeah no more ugly annoying Binary Tree drawn on MS Paint)

How we built it

Our frontend is a React app, and our server is a Golang codebase. Golang is a great choice for our backend, due to its performance in concurrency programming, allowing to setup a reliable and fast connection between users

Challenges we ran into

Our biggest challenge is setting up a reliable WebSocket connection between users and the code editor. we also faced challenges in synchronizing real-time edits made by multiple users within the code editor

Accomplishments that we're proud of

Our (or my) biggest accomplishments is just have all the needed functionality for the app to work (need lots of work on UI btw)

What we learned

I learned so much specifically about the WebSocket protocol, which is great for real-time data transfer

What's next for Meetcode

Meetcode has a lot of potential. Our mission is to help CS students around the world have the least painful experience studying DSA. Some functionality that we might include in the future are:


Allow creating different room
Allow to store as a note (and have multiple note)
More functionality on visualizing tool

","https://github.com/qtrunguyen/MeetCode-backend, https://github.com/qtrunguyen/MeetCode-frontend",https://youtu.be/sdI68db_8RQ,"react, go, postgresql",,University of Cincinnati,0,245-14,University of Cincinnati,"AWS, Postgres",no
Best Social Impact Hack,Symptom Reporter,https://revolutionuc2024.devpost.com/submissions/485256-symptom-reporter,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:28:55,"Inspiration

Our inspiration is that one of our members had a medical exam and had to report the symptoms on pen and paper and turn it into the hospital. Our idea was to have patients submit their symptoms online and have the medical practional to view it. 

What it does

Our users log in and then can report the symptoms through a list of symptoms, creating notes, and uploading an image. Our medical practitioner will be able to go in and view the results of the data reported. 

How we built it

We built it using next.js and posgress for our backend. 

Challenges we ran into

A big challenge we ran into was using Auth0, it took a couple of hours to get working. Also, 2 of our 3 members have never done web dev so the learning curve was difficult. 

Accomplishments that we're proud of

Being able to easily use docker to create a database. Using node.js for a personal project instead of using someone else's code in a professional environment. Creating working web dev code for the first time for one member. 

What we learned

We learned a lot. With me having 0 experience in web dev, being able to create an application that works was a great learning experience. We all became more familiar with creating node applications and using states to manipulate the data. 

What's next for Symptom Reporter

There are a few features that need to be fleshed out. We also want to implement the ability to have multiple trails collecting data at the same time and have the admin to be able to switch between these trails and view the different trial data. 
",https://github.com/ZebTM/RevUC-2024-Hackathon,https://www.youtube.com/watch?si=AZ_JXBr2XMrUsKD_&v=zwGYWt8GfaI&feature=youtu.be,"node.js, auth0, postgresql, next, react",,University of Cincinnati,2,220-36,University of Cincinnati,"Auth0: I had a semi-difficult time setting it up with Next.js as I am a beginner using Next, but once it was working everything was very simple.
GitHub: We used this for our source control and all of us being familiar with it it made it easy for us to collaborate on the code.",""
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Symptom Reporter,https://revolutionuc2024.devpost.com/submissions/485256-symptom-reporter,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:28:55,"Inspiration

Our inspiration is that one of our members had a medical exam and had to report the symptoms on pen and paper and turn it into the hospital. Our idea was to have patients submit their symptoms online and have the medical practional to view it. 

What it does

Our users log in and then can report the symptoms through a list of symptoms, creating notes, and uploading an image. Our medical practitioner will be able to go in and view the results of the data reported. 

How we built it

We built it using next.js and posgress for our backend. 

Challenges we ran into

A big challenge we ran into was using Auth0, it took a couple of hours to get working. Also, 2 of our 3 members have never done web dev so the learning curve was difficult. 

Accomplishments that we're proud of

Being able to easily use docker to create a database. Using node.js for a personal project instead of using someone else's code in a professional environment. Creating working web dev code for the first time for one member. 

What we learned

We learned a lot. With me having 0 experience in web dev, being able to create an application that works was a great learning experience. We all became more familiar with creating node applications and using states to manipulate the data. 

What's next for Symptom Reporter

There are a few features that need to be fleshed out. We also want to implement the ability to have multiple trails collecting data at the same time and have the admin to be able to switch between these trails and view the different trial data. 
",https://github.com/ZebTM/RevUC-2024-Hackathon,https://www.youtube.com/watch?si=AZ_JXBr2XMrUsKD_&v=zwGYWt8GfaI&feature=youtu.be,"node.js, auth0, postgresql, next, react",,University of Cincinnati,2,220-36,University of Cincinnati,"Auth0: I had a semi-difficult time setting it up with Next.js as I am a beginner using Next, but once it was working everything was very simple.
GitHub: We used this for our source control and all of us being familiar with it it made it easy for us to collaborate on the code.",""
Best Use of Postgres (Tembo),Symptom Reporter,https://revolutionuc2024.devpost.com/submissions/485256-symptom-reporter,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:28:55,"Inspiration

Our inspiration is that one of our members had a medical exam and had to report the symptoms on pen and paper and turn it into the hospital. Our idea was to have patients submit their symptoms online and have the medical practional to view it. 

What it does

Our users log in and then can report the symptoms through a list of symptoms, creating notes, and uploading an image. Our medical practitioner will be able to go in and view the results of the data reported. 

How we built it

We built it using next.js and posgress for our backend. 

Challenges we ran into

A big challenge we ran into was using Auth0, it took a couple of hours to get working. Also, 2 of our 3 members have never done web dev so the learning curve was difficult. 

Accomplishments that we're proud of

Being able to easily use docker to create a database. Using node.js for a personal project instead of using someone else's code in a professional environment. Creating working web dev code for the first time for one member. 

What we learned

We learned a lot. With me having 0 experience in web dev, being able to create an application that works was a great learning experience. We all became more familiar with creating node applications and using states to manipulate the data. 

What's next for Symptom Reporter

There are a few features that need to be fleshed out. We also want to implement the ability to have multiple trails collecting data at the same time and have the admin to be able to switch between these trails and view the different trial data. 
",https://github.com/ZebTM/RevUC-2024-Hackathon,https://www.youtube.com/watch?si=AZ_JXBr2XMrUsKD_&v=zwGYWt8GfaI&feature=youtu.be,"node.js, auth0, postgresql, next, react",,University of Cincinnati,2,220-36,University of Cincinnati,"Auth0: I had a semi-difficult time setting it up with Next.js as I am a beginner using Next, but once it was working everything was very simple.
GitHub: We used this for our source control and all of us being familiar with it it made it easy for us to collaborate on the code.",""
Best Use of Auth0 ,Symptom Reporter,https://revolutionuc2024.devpost.com/submissions/485256-symptom-reporter,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:28:55,"Inspiration

Our inspiration is that one of our members had a medical exam and had to report the symptoms on pen and paper and turn it into the hospital. Our idea was to have patients submit their symptoms online and have the medical practional to view it. 

What it does

Our users log in and then can report the symptoms through a list of symptoms, creating notes, and uploading an image. Our medical practitioner will be able to go in and view the results of the data reported. 

How we built it

We built it using next.js and posgress for our backend. 

Challenges we ran into

A big challenge we ran into was using Auth0, it took a couple of hours to get working. Also, 2 of our 3 members have never done web dev so the learning curve was difficult. 

Accomplishments that we're proud of

Being able to easily use docker to create a database. Using node.js for a personal project instead of using someone else's code in a professional environment. Creating working web dev code for the first time for one member. 

What we learned

We learned a lot. With me having 0 experience in web dev, being able to create an application that works was a great learning experience. We all became more familiar with creating node applications and using states to manipulate the data. 

What's next for Symptom Reporter

There are a few features that need to be fleshed out. We also want to implement the ability to have multiple trails collecting data at the same time and have the admin to be able to switch between these trails and view the different trial data. 
",https://github.com/ZebTM/RevUC-2024-Hackathon,https://www.youtube.com/watch?si=AZ_JXBr2XMrUsKD_&v=zwGYWt8GfaI&feature=youtu.be,"node.js, auth0, postgresql, next, react",,University of Cincinnati,2,220-36,University of Cincinnati,"Auth0: I had a semi-difficult time setting it up with Next.js as I am a beginner using Next, but once it was working everything was very simple.
GitHub: We used this for our source control and all of us being familiar with it it made it easy for us to collaborate on the code.",""
Best Educational Hack,Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best Design Hack,Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best Social Impact Hack,Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best Use of AWS,Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best .Tech Domain Name,Clinical Research Journal,https://revolutionuc2024.devpost.com/submissions/485261-clinical-research-journal,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:31:52,"Inspiration

The clinical trial industry has been slow to adapt to the new technologies available. We sought to create a new innovative way for trial participants to communicate their thoughts and feelings about the drugs or devices they are trial.

What it does

Creates a platform for trial participants to view a medicine schedule, the contacts for individuals involved in their trial, and a place to write their thoughts and how they are feeling.

How we built it


We built the frontend in Vite + React with React router to handle page changes
The backend is built in Python with flask which interacts with a Postgressql database
The service is hosted via an AWS ec2 instance


Challenges we ran into


Difficulties with CORs requests not going though
Issues with AWS not allowing our EC2 instances through to the internet


Accomplishments that we're proud of


Journal entries are placed into a postgressql database


What we learned


Better strategies for building interactive apps with React and Flask


What's next for Clinical Research Journal


We'd like to add a user management system and a way for users to video chat with providers

",https://github.com/tartaljt/RevUc,https://youtu.be/GwrxFtYNnEo,"react, amazon-web-services, flask, python, javascript, vite, postressql",,University of Cincinnati,3,220-40,University of Cincinnati,We used AWS to host the service and github to manage code. Overall we had a good experience with the technology present at the hackathon. Thanks to the sponsors!,medicalchat.tech
Best Educational Hack,hr-connect,https://revolutionuc2024.devpost.com/submissions/485267-hr-connect,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:35:42,"Inspiration

Cluttered Market across the Hiring, Termination and Producitivity

What it does

It is feedback form collected from the employee and managers by HR to review the productivity, what are the next steps involved in the employee's career and personal life. It also helps the company to maintain a healthy culture and constanst improvement

How we built it


We made front end using HTML and CSS along with use of flask and python
We did backend using python and SQL, integrating the database managment from Tembo and using flask and pandas


Challenges we ran into


Connecting servers between backend and frontend
Teamwork Communication


Accomplishments that we're proud of


Integrating the database managment sever from Tembo into our backend to help us maintain large datasets 


What we learned


Development of Web Page Management for intracompany uses 
Devloping Backend to serve the frontend for the quick analytic response


What's next for hr-connect


Having LLMs for predicting and preparing for the growth planned for the company based off on the employees
Integrating more contructive questions in the forms for the managers and employees

",https://github.com/MahikaGunjkar/hr-connect,https://youtu.be/bAfoEC5Gpas?si=tsepEMXLDB3Lrt_c,"python, html, w3c-css-validator, pandas, flask, sql, cloud",,University of Cincinnati,0,220-39,University of Cincinnati,"We learned the integration, development and sever conecction across different languanges, modules and librabries. We also worked on data moduling for analysis and prediction of the output. We believe in integrating in more and building more generative AI. We learnt more on GitHub, Pandas, Flask and Tembo and database management",""
"Best ""Useless"" Hack",hr-connect,https://revolutionuc2024.devpost.com/submissions/485267-hr-connect,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:35:42,"Inspiration

Cluttered Market across the Hiring, Termination and Producitivity

What it does

It is feedback form collected from the employee and managers by HR to review the productivity, what are the next steps involved in the employee's career and personal life. It also helps the company to maintain a healthy culture and constanst improvement

How we built it


We made front end using HTML and CSS along with use of flask and python
We did backend using python and SQL, integrating the database managment from Tembo and using flask and pandas


Challenges we ran into


Connecting servers between backend and frontend
Teamwork Communication


Accomplishments that we're proud of


Integrating the database managment sever from Tembo into our backend to help us maintain large datasets 


What we learned


Development of Web Page Management for intracompany uses 
Devloping Backend to serve the frontend for the quick analytic response


What's next for hr-connect


Having LLMs for predicting and preparing for the growth planned for the company based off on the employees
Integrating more contructive questions in the forms for the managers and employees

",https://github.com/MahikaGunjkar/hr-connect,https://youtu.be/bAfoEC5Gpas?si=tsepEMXLDB3Lrt_c,"python, html, w3c-css-validator, pandas, flask, sql, cloud",,University of Cincinnati,0,220-39,University of Cincinnati,"We learned the integration, development and sever conecction across different languanges, modules and librabries. We also worked on data moduling for analysis and prediction of the output. We believe in integrating in more and building more generative AI. We learnt more on GitHub, Pandas, Flask and Tembo and database management",""
Best Use of Postgres (Tembo),hr-connect,https://revolutionuc2024.devpost.com/submissions/485267-hr-connect,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:35:42,"Inspiration

Cluttered Market across the Hiring, Termination and Producitivity

What it does

It is feedback form collected from the employee and managers by HR to review the productivity, what are the next steps involved in the employee's career and personal life. It also helps the company to maintain a healthy culture and constanst improvement

How we built it


We made front end using HTML and CSS along with use of flask and python
We did backend using python and SQL, integrating the database managment from Tembo and using flask and pandas


Challenges we ran into


Connecting servers between backend and frontend
Teamwork Communication


Accomplishments that we're proud of


Integrating the database managment sever from Tembo into our backend to help us maintain large datasets 


What we learned


Development of Web Page Management for intracompany uses 
Devloping Backend to serve the frontend for the quick analytic response


What's next for hr-connect


Having LLMs for predicting and preparing for the growth planned for the company based off on the employees
Integrating more contructive questions in the forms for the managers and employees

",https://github.com/MahikaGunjkar/hr-connect,https://youtu.be/bAfoEC5Gpas?si=tsepEMXLDB3Lrt_c,"python, html, w3c-css-validator, pandas, flask, sql, cloud",,University of Cincinnati,0,220-39,University of Cincinnati,"We learned the integration, development and sever conecction across different languanges, modules and librabries. We also worked on data moduling for analysis and prediction of the output. We believe in integrating in more and building more generative AI. We learnt more on GitHub, Pandas, Flask and Tembo and database management",""
Best Data Science and Analytics Hack (Fortified Data),hr-connect,https://revolutionuc2024.devpost.com/submissions/485267-hr-connect,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:35:42,"Inspiration

Cluttered Market across the Hiring, Termination and Producitivity

What it does

It is feedback form collected from the employee and managers by HR to review the productivity, what are the next steps involved in the employee's career and personal life. It also helps the company to maintain a healthy culture and constanst improvement

How we built it


We made front end using HTML and CSS along with use of flask and python
We did backend using python and SQL, integrating the database managment from Tembo and using flask and pandas


Challenges we ran into


Connecting servers between backend and frontend
Teamwork Communication


Accomplishments that we're proud of


Integrating the database managment sever from Tembo into our backend to help us maintain large datasets 


What we learned


Development of Web Page Management for intracompany uses 
Devloping Backend to serve the frontend for the quick analytic response


What's next for hr-connect


Having LLMs for predicting and preparing for the growth planned for the company based off on the employees
Integrating more contructive questions in the forms for the managers and employees

",https://github.com/MahikaGunjkar/hr-connect,https://youtu.be/bAfoEC5Gpas?si=tsepEMXLDB3Lrt_c,"python, html, w3c-css-validator, pandas, flask, sql, cloud",,University of Cincinnati,0,220-39,University of Cincinnati,"We learned the integration, development and sever conecction across different languanges, modules and librabries. We also worked on data moduling for analysis and prediction of the output. We believe in integrating in more and building more generative AI. We learnt more on GitHub, Pandas, Flask and Tembo and database management",""
"",Health Quest,https://revolutionuc2024.devpost.com/submissions/485275-health-quest,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:43:00,"Health Quest: A Personal Health Challenge Application

Health Quest is an innovative desktop application designed to encourage users to engage in healthy activities and habits through a gamified experience. Built with Python's Tkinter for the graphical user interface and MySQL for data storage, this application offers users a unique way to track their health-related activities and challenges, known as ""quests"".

Features:


Dynamic Quest System: Users are presented with random health-related quests, such as exercising daily, timing meditation sessions, or tracking water intake. This dynamic system keeps the health journey exciting and unpredictable.
Customizable User Profiles: Users can create and manage profiles, including basic information like name and age, as well as detailed health information like chronic diseases and medications. This allows for a personalized experience tailored to each user's specific health needs.
Real-time Feedback and Logging: The application provides immediate feedback on quest completion and logs the results in a user-specific file. This enables users to track their progress over time and stay motivated.
Engaging User Interface: The UI is designed to be user-friendly and engaging, with tabs for quests and user profiles, making navigation through the app seamless and intuitive.
Health Data Management: Users can manage their health data, including chronic diseases and medications, through the app. This centralized data management makes it easier for users to keep track of important health information.
Secure and Private: With local data storage using MySQL, users' health information and activity logs remain private and secure.


Technical Specifications:


Language: Python
GUI Framework: Tkinter
Database: MySQL
Security: Implements basic security measures for data privacy.
Compatibility: Designed for desktop use, compatible with systems running Python and MySQL.


How It Works:


Quest Generation: The app fetches all available quests from the database and allows users to generate a random quest to complete.
User Interaction: Depending on the quest type (boolean, timer, counting), the app displays the appropriate interface for users to interact with and complete the quest.
Data Logging: Upon completion, the app logs the quest results, including the date, time, and details of the quest, in a JSON file specific to the user's profile.
Profile Management: Users can create new profiles, update their health information, and track their quest progress over time.


Conclusion:

Health Quest is more than just an app; it's a companion on your journey to better health. By combining technology with the principles of gamification and personal accountability, Health Quest makes the pursuit of a healthy lifestyle engaging and accessible to everyone. Whether you're looking to start a new healthy habit or find motivation to continue your health journey, Health Quest is here to guide and inspire you every step of the way.
","",https://youtu.be/ydz1DpkEr-M,"python, sql, tkinter",,"University of Houston - Downtown, University of Cincinnati, William Mason High School",3,Lobby 2-18,University of Houston - Downtown,"Node, React, SQL, Javascript, AWS, HTML, CSS, MySQL",""
Best Social Impact Hack,Who Got Next?,https://revolutionuc2024.devpost.com/submissions/485277-who-got-next,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:44:02,"Inspiration

'''When trying to play basketball in a gym setting, it can be hard to determine who is next, how many people are ahead of you, and when your turn is. That is the problem we sought to fix'''

What it does

'''Who Got Next, allows the users to queue up for a selected court to determine an order for who gets to play when. Each court is labeled as a letter and include an indicator circle to easily determine the length of the queue. As an admin, you gain a couple extra features. The ability to close courts allows for the gym to decide which courts are open and which are not. Admins can also add players to the queue if they do not have the app and clear the court of all players in the queue. A moderate button also appears when a court has reached the required 10 players for a game. This allows the moderator to determine the winner of the game and also clear 5 spots for the queue to fill. '''

How we built it

'''We utilized HTML and JavaScript to implement the front and back end of the program

Challenges we ran into

'''Most of our group had never used HTML or JavaScript, so a major part of our time was learning how the language works and the syntax'''

Accomplishments that we're proud of

'''Because we have little experience in front-end and actual development of programs, we are proud to have created an interactive program that works. '''

What we learned

'''We learned the basics of web development in terms of both front and back-end, while also learning a completely new language in the process.'''

What's next for Who Got Next?

'''We would like to get this application setup as an actual website or mobile app that can be utilized at any gym, recreation center, or school to efficiently organize their basketball courts.'''
",https://github.com/dandoij/Who-Got-Next-,https://www.youtube.com/watch?v=Hu_etwtBf5A,"html, css, javascript",,"University of Cincinnati, Purdue University",2,2-31,University of Cinccinnati,We had an amazing time! There was a time crunch at the end but we learned so much and had so much fun!,whogotnext.tech
"Best ""Useless"" Hack",Who Got Next?,https://revolutionuc2024.devpost.com/submissions/485277-who-got-next,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:44:02,"Inspiration

'''When trying to play basketball in a gym setting, it can be hard to determine who is next, how many people are ahead of you, and when your turn is. That is the problem we sought to fix'''

What it does

'''Who Got Next, allows the users to queue up for a selected court to determine an order for who gets to play when. Each court is labeled as a letter and include an indicator circle to easily determine the length of the queue. As an admin, you gain a couple extra features. The ability to close courts allows for the gym to decide which courts are open and which are not. Admins can also add players to the queue if they do not have the app and clear the court of all players in the queue. A moderate button also appears when a court has reached the required 10 players for a game. This allows the moderator to determine the winner of the game and also clear 5 spots for the queue to fill. '''

How we built it

'''We utilized HTML and JavaScript to implement the front and back end of the program

Challenges we ran into

'''Most of our group had never used HTML or JavaScript, so a major part of our time was learning how the language works and the syntax'''

Accomplishments that we're proud of

'''Because we have little experience in front-end and actual development of programs, we are proud to have created an interactive program that works. '''

What we learned

'''We learned the basics of web development in terms of both front and back-end, while also learning a completely new language in the process.'''

What's next for Who Got Next?

'''We would like to get this application setup as an actual website or mobile app that can be utilized at any gym, recreation center, or school to efficiently organize their basketball courts.'''
",https://github.com/dandoij/Who-Got-Next-,https://www.youtube.com/watch?v=Hu_etwtBf5A,"html, css, javascript",,"University of Cincinnati, Purdue University",2,2-31,University of Cinccinnati,We had an amazing time! There was a time crunch at the end but we learned so much and had so much fun!,whogotnext.tech
Best .Tech Domain Name,Who Got Next?,https://revolutionuc2024.devpost.com/submissions/485277-who-got-next,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:44:02,"Inspiration

'''When trying to play basketball in a gym setting, it can be hard to determine who is next, how many people are ahead of you, and when your turn is. That is the problem we sought to fix'''

What it does

'''Who Got Next, allows the users to queue up for a selected court to determine an order for who gets to play when. Each court is labeled as a letter and include an indicator circle to easily determine the length of the queue. As an admin, you gain a couple extra features. The ability to close courts allows for the gym to decide which courts are open and which are not. Admins can also add players to the queue if they do not have the app and clear the court of all players in the queue. A moderate button also appears when a court has reached the required 10 players for a game. This allows the moderator to determine the winner of the game and also clear 5 spots for the queue to fill. '''

How we built it

'''We utilized HTML and JavaScript to implement the front and back end of the program

Challenges we ran into

'''Most of our group had never used HTML or JavaScript, so a major part of our time was learning how the language works and the syntax'''

Accomplishments that we're proud of

'''Because we have little experience in front-end and actual development of programs, we are proud to have created an interactive program that works. '''

What we learned

'''We learned the basics of web development in terms of both front and back-end, while also learning a completely new language in the process.'''

What's next for Who Got Next?

'''We would like to get this application setup as an actual website or mobile app that can be utilized at any gym, recreation center, or school to efficiently organize their basketball courts.'''
",https://github.com/dandoij/Who-Got-Next-,https://www.youtube.com/watch?v=Hu_etwtBf5A,"html, css, javascript",,"University of Cincinnati, Purdue University",2,2-31,University of Cinccinnati,We had an amazing time! There was a time crunch at the end but we learned so much and had so much fun!,whogotnext.tech
Best Social Impact Hack,Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
"Best ""Useless"" Hack",Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
EnableUC Challenge,Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
Best Implementation of an LLM or Other Generative AI Model (CincyTech),Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
Best Data Science and Analytics Hack (Fortified Data),Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
Best .Tech Domain Name,Medical Parse,https://revolutionuc2024.devpost.com/submissions/485289-medical-parse,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 10:53:27,"Inspiration

The inspiration for this project stems from personal experiences of two team members whose significant others and family members faced challenges in obtaining accurate medical diagnoses. Motivated by these difficulties, the team aimed to create a solution that could provide users with a broader range of potential diagnoses based on their symptoms, leveraging the authoritative health information from the WHO and the advanced AI capabilities of OpenAI.

What it does

MedicalParse allows the user to enter symptoms into a search box and then see all of the possible diseases these symptoms relate to. We wanted it to show more than one because of past family experiences where the first diagnosis was false. 

How we built it

Eyas and Jalen worked on front end UI and Flask implementation. Josh and Jared worked on backend functionality using API's, datasets and Tensorflow.

Challenges we ran into

We had a difficult time implementing the Python code into the website. We ended up using FLASK to solve this challenge but it took us nearly 6 hours to come to a solution. We also ran into issues with adding animations into our UI. Possibly the most time consuming challenge we ran into was finding a dataset that gave us the insights we needed.

Accomplishments that we're proud of

The accomplishment of implementing two API's into our website was a big one for us. The ability to learn languages and tools on the fly such as Flask and TensorFlow was also something we were satisfied with. Lastly, the ability to produce a product that we hope to make accessible to anyone was our biggest accomplishment. 

What we learned

We learned how to connect back-end development to front-end development. We learned how to use API's and how to visualize that data. We learned languages we were not comfortable with in depth. For example, the back end developers Josh and Jared were less experienced with HTML and CSS and the front end developers were less experienced with Python. We were able to collaborate and become more comfortable with these languages through teamwork.

What's next for MedicalParse

The next steps for MedicalParse include adding a vastly improved UI, adding more generative AI, and expanding the website to a virtual server.
","https://github.com/Jkrek/ML-Health-Prediction/tree/main, http://medinator.tech",https://youtu.be/66JNjRftrF0,"python, who, openai, html, javascript, flask, tensorflow, numpy, matplotlib, visual-studio",,"University of Cincinnati, Miami University",2,Lobby2-19,University of Cincinnati,The technology was innovative at the 1819 Innovation Hub. Using technology such as Github and the free domain name was helpful for our project.,"yes, medinator.tech"
"",Spring to Life,"",Draft,Pending,Additional info,02/25/2024 10:57:24,"Inspiration

The inspiration for this was to help people. I have seen a loved one deteriorate away before my eyes, mostly due to health conditions. After a long battle with asthma, he made the decision to end his life. Part of me feels like if he had someone to talk to and interact with in this moment, then it could have prevented him from making this decision. Helping another family avoid this was the goal for me, whether this could be accomplished through prevention I will never know unless I try.

What it does

The app is a welcoming place, specifically for senior citizens. It is designed to motivate members to interact and maintain or progress their physical, cognitive, and social skills. A group leader can for their closed group, which supplies a safe haven for those within. With senior citizens being a primary target audience, our approach will protect them from common forms of social engineering, while additional providing available support through familiar contact.
Although we did not make a full implementation, the demo app provides an idea of the site would work. Members are greeted with a warm splash screen, showcasing a familiar family photo. An audio example that could play was also included to highlight the power of being reminded that someone loves you. Next, a member can content in a daily challenge, earning points that add a fun value, while also being a way to monitor their status. For instance, if a family member noticed that grandma is not participating like usual, this could create an alert to signify a designate caregiver or other responsible person to check it. 
Another primary aspect in the design is to incorporate a game-type aspect. Our team imagined a form of a word cross that members can complete. The design was envisioned as simple, forming words by connecting tiles, or something similar. By solving the challenge, the member would add a building block to their structure, which can remind them of accomplishment that have been made recently.

How we built it

Initially, our team wanted a smartphone style experience, while also being multi-platformed. The group spent the majority of their time brainstorming how the app would actually provide value. Once a solid outline of the workflow was established, we looked into a database solution to maintain the data that was provided by the Hackaton, know as Kintone. The team was limited on time, and although our original goal was to use Kotlin, my unfamilarity with Kintone and programming again in Kotlin after a long-break proven too much. 
To at least present our idea, I developed a Spring Boot solution, with minimal implementation.

Challenges we ran into

New technology, limited time, work division

Accomplishments that we're proud of

I went home and was not sure that I would be able to produce a presentable delieverable. After 2 Android reinstalls, my emulator would still not work. I was able to quickly produce a Spring Boot app, sufficient for a demo, with limited time. 

What we learned

What's next for Spring to Life
",https://github.com/iByrd/SpringToLife_RevUCHack,,"spring, java, maven",,University of Cincinnati,0,220-37,University of Cincinnati,"I felt a little overwhelm with the short time frame. The open floor plan is nice, but there was also a lot of noise.",""
Best Design Hack,HitchHigh,https://revolutionuc2024.devpost.com/submissions/485306-hitchhigh,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:08:21,"Inspiration

Grace Nunn, a graduate of Loveland High School, was the oldest sibling of 5 children with 2 working parents. With several of the siblings participating in sports, and Loveland High School not having the funding for school bussing, she and her parents were left in a tough spot. With HitchHigh, Grace and her family could utilize it to get assistance for rides to and from school for both academics and for athletics. 

What it does

HitchHigh enables high schoolers to have more accessible rides to school and school events without the high fees of apps like Uber.

How we built it

We used Figma for the wireframe of the application, and then used HTML, CSS, and JavaScript to code portions of the wireframe

Challenges we ran into

We originally started using flutter, but that proved to be a challenge to use as it was a new thing for us, so we had to change languages. 

Accomplishments that we're proud of

We are super proud of how the wireframe turned out, as well as the portions of code that we did.

What we learned

We learned a ton about flutter and figma in the process.
",https://www.figma.com/proto/j8AGbtv0MDBzlvr4XlEH2F/Hitchhigh?page-id=0%3A1&type=design&node-id=9-754&viewport=-519%2C592%2C0.03&t=UNvwegP8Pcx1OrVS-1&scaling=scale-down&starting-point-node-id=9%3A762&show-proto-sidebar=1&mode=design,https://vimeo.com/916457197/5718aa75e7?share=copy,"html, css, javascript, figma",,University of Cincinnati,1,220-45,University of Cincinnati,"We used Flutter as well as Figma for the most part. The HTML, CSS, and Javascript was done in notepad but we explored Visual Studio code while using flutter",""
Best Social Impact Hack,HitchHigh,https://revolutionuc2024.devpost.com/submissions/485306-hitchhigh,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:08:21,"Inspiration

Grace Nunn, a graduate of Loveland High School, was the oldest sibling of 5 children with 2 working parents. With several of the siblings participating in sports, and Loveland High School not having the funding for school bussing, she and her parents were left in a tough spot. With HitchHigh, Grace and her family could utilize it to get assistance for rides to and from school for both academics and for athletics. 

What it does

HitchHigh enables high schoolers to have more accessible rides to school and school events without the high fees of apps like Uber.

How we built it

We used Figma for the wireframe of the application, and then used HTML, CSS, and JavaScript to code portions of the wireframe

Challenges we ran into

We originally started using flutter, but that proved to be a challenge to use as it was a new thing for us, so we had to change languages. 

Accomplishments that we're proud of

We are super proud of how the wireframe turned out, as well as the portions of code that we did.

What we learned

We learned a ton about flutter and figma in the process.
",https://www.figma.com/proto/j8AGbtv0MDBzlvr4XlEH2F/Hitchhigh?page-id=0%3A1&type=design&node-id=9-754&viewport=-519%2C592%2C0.03&t=UNvwegP8Pcx1OrVS-1&scaling=scale-down&starting-point-node-id=9%3A762&show-proto-sidebar=1&mode=design,https://vimeo.com/916457197/5718aa75e7?share=copy,"html, css, javascript, figma",,University of Cincinnati,1,220-45,University of Cincinnati,"We used Flutter as well as Figma for the most part. The HTML, CSS, and Javascript was done in notepad but we explored Visual Studio code while using flutter",""
"",Best Hackathon App,"",Draft,Pending,Project overview,02/25/2024 11:27:53,"","",,"",,University of Cincinnati,0,"","","",""
Best Social Impact Hack,IntelliMentor,https://revolutionuc2024.devpost.com/submissions/485335-intellimentor,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:31:49,"I mentors are experts in their field and are dedicated to providing you with tailored guidance to help you succeed.
Then seamless transition, we understand that the transition to studying in the US can be overwhelming.
That's why we offer services to help you find roommates and connect with insightful mentors are seamless transition process ensures that you have support you need to succeed.
Career guidance.
I didn't tell you mentor, we are committed to helping you achieve your career goals.
Our team of experts offer personalized career guidance to help you navigate your career path for resume building to interview preparation, we are here to help you succeed.
This is the mentor application.
Here are the mentors can sign up depending on their measure.
When are they available to start?
And the mentors are are selected on.
The basis of their resume and what they can actually provide.
Moving out in the networking section.
So we'll networking the Intelli mentor networking hub where meaningful connections pave the way for academic and professional success and networking.
Page is designed to foster a vibrant community allowing international students in the US to connect, collaborate and explore opportunities together.
So as we can see, here are some evenings, but fine and connection.
Then there are internship opportunities and also if someone is looking for a roommate, they can sign up here.
Then cut your navigation.
So explore our collection of internships, coops, and various different opportunities covering a multitude of aspect of career development, from crafting a compelling resume to acing a job interview.
Just put in your information and we will email you the different results and opportunities you can reply to.
So this is the form for job search that people can put in there.
Resume is what positions they want in upload their resume and that's how we can help them achieve a successful video.
Then there are a few FAQ.
So how can people get started to begin with your in telemetry journey?
Sign up for an account.
Create your profile and start exploring my internship opportunities tailored to your academic and career goals.
How does matching I got it to work so our intelligent algorithm considers factors like academic background and career goals to suggest suitable mentors for personalized connections.
So how do I find a mate and how can you find a mentor when setting up your profile?
You answered various different questions pertaining to your major and it has that we will put in an algorithm that will be the best match for you to one of our many amazing mentors.
How can I participate in the events and forums so this is the community section to explore forums and even calendar and connect with other users stay updated on webinars, workshops and connecting events to enhance your experience at entirely mentor?
Is your information security with us?
Yes, we prioritize user privacy and implement rows first.
Ohh, I think you already measures to ensure a safe and trustworthy environment for all.
",https://daniehart1027.wixsite.com/intellimentor-2,https://vimeo.com/916459854?share=copy,"bootstrap, javascript",,University of Cincinnati,0,220-46,University of Cincinnati,"This weekend, I had the opportunity to utilize Bootstrap to assist international students in improving their technical skills. Bootstrap is a powerful front-end framework that allows for the creation of responsive and visually appealing web interfaces with ease. Here's how the experience went:

1. **Introduction to Bootstrap**: I started by introducing Bootstrap to the students, explaining its importance in modern web development and its key features such as its grid system, pre-styled components, and responsive design capabilities.

2. **Hands-on Workshop**: I conducted a hands-on workshop where the students had the chance to follow along with me as we created a simple webpage using Bootstrap. We covered topics such as setting up a Bootstrap project, integrating Bootstrap into HTML files, utilizing Bootstrap's grid system for layout, and incorporating pre-styled components like navigation bars, buttons, and forms.

3. **Internationalization Considerations**: Since the students were international, I made sure to address any language or cultural considerations when discussing technical concepts. This included providing translations for key terms and examples that resonated with a diverse audience.

4. **Interactive Learning**: I encouraged interactive learning throughout the workshop, allowing students to ask questions and experiment with Bootstrap on their own. This hands-on approach helped solidify their understanding and gave them the confidence to continue exploring Bootstrap on their own after the workshop.

5. **Support and Resources**: I provided additional resources and support for the students to continue their learning journey beyond the workshop. This included links to documentation, tutorials, and online communities where they could find help and inspiration for their future projects.

Overall, it was a rewarding experience to see the students engage with Bootstrap and gain new skills that they can apply in their academic and professional pursuits. Helping international students navigate technical concepts and tools like Bootstrap is essential for fostering a diverse and inclusive tech community.",no
Best Design Hack,2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best Use of Postgres (Tembo),2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best Use of AWS,2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best Implementation of an LLM or Other Generative AI Model (CincyTech),2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best Product Market Fit (Center for Entrepreneurship),2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best .Tech Domain Name,2-Do 4-U,https://revolutionuc2024.devpost.com/submissions/485347-2-do-4-u,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:37:32,"Inspiration

No time, lol

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for 2-Do 4-U
","",https://www.youtube.com/watch?v=FsijHncWy8s,"express.js, react, prism, postgress",,"University of Louisville, University of Cincinnati",2,230-1,University of Louisville,Auth0 was wayyyyy more complicated than we expected in regards to google auth,2do4u.tech
Best Digital Solution to Improve the Clinical Trial Process (Medpace),Fix people quitting voluntary participation drug trials,https://revolutionuc2024.devpost.com/submissions/485361-fix-people-quitting-voluntary-participation-drug-trials,Submitted (Gallery/Visible),Pending,Submit,02/25/2024 11:48:20,"Inspiration

I love analysis of code

What it does

figures the root cause of quitting

How we built it

sql server

Challenges we ran into

importing data

Accomplishments that we're proud of

we found the root cause in human behavior

What we learned

A leading indicator of quitting

What's next for Fix people quitting voluntary participation drug trials

implementing the next stes
",https://docs.google.com/document/d/1-h7EC67JySLXa2N81GU6lC9XeGx9CuAHwjbTRJk05-M/edit?usp=sharing,https://www.youtube.com/watch?v=dQw4w9WgXcQ&pp=ygUXbmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXA%3D,sql,,Ohio State University,0,0,Ohio State University,It was great,""
"",IntelliMentor,"",Draft,Pending,Project overview,02/25/2024 11:49:08,"","",,"",,University of Cincinnati,1,"","","",""